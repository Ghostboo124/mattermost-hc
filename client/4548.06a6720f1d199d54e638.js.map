{"version":3,"file":"4548.06a6720f1d199d54e638.js","mappings":"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","sources":["webpack://mattermost-webapp/./node_modules/react-select/creatable/dist/react-select-creatable.esm.js","webpack://mattermost-webapp/./node_modules/react-select/dist/useCreatable-84008237.esm.js","webpack://mattermost-webapp/./src/actions/views/mfa.js","webpack://mattermost-webapp/./src/components/settings_sidebar/settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/index.ts","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/advanced/user_settings_advanced.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/color_chooser/color_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/custom_theme_chooser/custom_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/user_settings_theme.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/manage_languages.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/render_emoticons_as_emoji/render_emoticons_as_emoji.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/render_emoticons_as_emoji/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_display.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/index.ts","webpack://mattermost-webapp/./src/components/setting_picture.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/user_settings_general.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/index.ts","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_action.tsx","webpack://mattermost-webapp/./src/utils/plugins/preferences.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio_option.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/index.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/access_history_modal.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/index.ts","webpack://mattermost-webapp/./src/components/activity_log_modal/components/device_icon.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/more_info.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/activity_log.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/activity_log_modal.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/mfa_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_settings_security.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/index.ts","webpack://mattermost-webapp/./src/components/user_settings/index.tsx","webpack://mattermost-webapp/./src/components/widgets/smart_loader/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/modal/user_settings_modal.tsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { S as Select } from '../../dist/Select-aab027f3.esm.js';\nimport { u as useStateManager } from '../../dist/useStateManager-7e1e8489.esm.js';\nimport { u as useCreatable } from '../../dist/useCreatable-84008237.esm.js';\nexport { u as useCreatable } from '../../dist/useCreatable-84008237.esm.js';\nimport '@babel/runtime/helpers/objectSpread2';\nimport '@babel/runtime/helpers/classCallCheck';\nimport '@babel/runtime/helpers/createClass';\nimport '@babel/runtime/helpers/inherits';\nimport '@babel/runtime/helpers/createSuper';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../../dist/index-641ee5b8.esm.js';\nimport '@emotion/react';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/typeof';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport '@babel/runtime/helpers/defineProperty';\nimport 'react-dom';\nimport '@floating-ui/dom';\nimport 'use-isomorphic-layout-effect';\nimport 'memoize-one';\n\nvar CreatableSelect = /*#__PURE__*/forwardRef(function (props, ref) {\n  var creatableProps = useStateManager(props);\n  var selectProps = useCreatable(creatableProps);\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    ref: ref\n  }, selectProps));\n});\nvar CreatableSelect$1 = CreatableSelect;\n\nexport { CreatableSelect$1 as default };\n","import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';\nimport _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport { useMemo, useCallback } from 'react';\nimport { H as cleanValue, D as valueTernary } from './index-641ee5b8.esm.js';\nimport { g as getOptionValue, b as getOptionLabel } from './Select-aab027f3.esm.js';\n\nvar _excluded = [\"allowCreateWhileLoading\", \"createOptionPosition\", \"formatCreateLabel\", \"isValidNewOption\", \"getNewOptionData\", \"onCreateOption\", \"options\", \"onChange\"];\nvar compareOption = function compareOption() {\n  var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var option = arguments.length > 1 ? arguments[1] : undefined;\n  var accessors = arguments.length > 2 ? arguments[2] : undefined;\n  var candidate = String(inputValue).toLowerCase();\n  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();\n  var optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();\n  return optionValue === candidate || optionLabel === candidate;\n};\nvar builtins = {\n  formatCreateLabel: function formatCreateLabel(inputValue) {\n    return \"Create \\\"\".concat(inputValue, \"\\\"\");\n  },\n  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {\n    return !(!inputValue || selectValue.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }) || selectOptions.some(function (option) {\n      return compareOption(inputValue, option, accessors);\n    }));\n  },\n  getNewOptionData: function getNewOptionData(inputValue, optionLabel) {\n    return {\n      label: optionLabel,\n      value: inputValue,\n      __isNew__: true\n    };\n  }\n};\nfunction useCreatable(_ref) {\n  var _ref$allowCreateWhile = _ref.allowCreateWhileLoading,\n    allowCreateWhileLoading = _ref$allowCreateWhile === void 0 ? false : _ref$allowCreateWhile,\n    _ref$createOptionPosi = _ref.createOptionPosition,\n    createOptionPosition = _ref$createOptionPosi === void 0 ? 'last' : _ref$createOptionPosi,\n    _ref$formatCreateLabe = _ref.formatCreateLabel,\n    formatCreateLabel = _ref$formatCreateLabe === void 0 ? builtins.formatCreateLabel : _ref$formatCreateLabe,\n    _ref$isValidNewOption = _ref.isValidNewOption,\n    isValidNewOption = _ref$isValidNewOption === void 0 ? builtins.isValidNewOption : _ref$isValidNewOption,\n    _ref$getNewOptionData = _ref.getNewOptionData,\n    getNewOptionData = _ref$getNewOptionData === void 0 ? builtins.getNewOptionData : _ref$getNewOptionData,\n    onCreateOption = _ref.onCreateOption,\n    _ref$options = _ref.options,\n    propsOptions = _ref$options === void 0 ? [] : _ref$options,\n    propsOnChange = _ref.onChange,\n    restSelectProps = _objectWithoutProperties(_ref, _excluded);\n  var _restSelectProps$getO = restSelectProps.getOptionValue,\n    getOptionValue$1 = _restSelectProps$getO === void 0 ? getOptionValue : _restSelectProps$getO,\n    _restSelectProps$getO2 = restSelectProps.getOptionLabel,\n    getOptionLabel$1 = _restSelectProps$getO2 === void 0 ? getOptionLabel : _restSelectProps$getO2,\n    inputValue = restSelectProps.inputValue,\n    isLoading = restSelectProps.isLoading,\n    isMulti = restSelectProps.isMulti,\n    value = restSelectProps.value,\n    name = restSelectProps.name;\n  var newOption = useMemo(function () {\n    return isValidNewOption(inputValue, cleanValue(value), propsOptions, {\n      getOptionValue: getOptionValue$1,\n      getOptionLabel: getOptionLabel$1\n    }) ? getNewOptionData(inputValue, formatCreateLabel(inputValue)) : undefined;\n  }, [formatCreateLabel, getNewOptionData, getOptionLabel$1, getOptionValue$1, inputValue, isValidNewOption, propsOptions, value]);\n  var options = useMemo(function () {\n    return (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === 'first' ? [newOption].concat(_toConsumableArray(propsOptions)) : [].concat(_toConsumableArray(propsOptions), [newOption]) : propsOptions;\n  }, [allowCreateWhileLoading, createOptionPosition, isLoading, newOption, propsOptions]);\n  var onChange = useCallback(function (newValue, actionMeta) {\n    if (actionMeta.action !== 'select-option') {\n      return propsOnChange(newValue, actionMeta);\n    }\n    var valueArray = Array.isArray(newValue) ? newValue : [newValue];\n    if (valueArray[valueArray.length - 1] === newOption) {\n      if (onCreateOption) onCreateOption(inputValue);else {\n        var newOptionData = getNewOptionData(inputValue, inputValue);\n        var newActionMeta = {\n          action: 'create-option',\n          name: name,\n          option: newOptionData\n        };\n        propsOnChange(valueTernary(isMulti, [].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newOptionData), newActionMeta);\n      }\n      return;\n    }\n    propsOnChange(newValue, actionMeta);\n  }, [getNewOptionData, inputValue, isMulti, name, newOption, onCreateOption, propsOnChange, value]);\n  return _objectSpread(_objectSpread({}, restSelectProps), {}, {\n    options: options,\n    onChange: onChange\n  });\n}\n\nexport { useCreatable as u };\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nexport type Tab = {\n    icon: string | {url: string};\n    iconTitle: string;\n    name: string;\n    uiName: string;\n    newGroup?: boolean;\n    display?: boolean; // Controls whether the tab is displayed, defaults to true\n}\n\nexport type Props = {\n    activeTab?: string;\n    tabs: Tab[];\n    pluginTabs?: Tab[];\n    updateTab: (name: string) => void;\n    isMobileView: boolean;\n};\n\nexport default class SettingsSidebar extends React.PureComponent<Props> {\n    buttonRefs: Map<string, HTMLButtonElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.buttonRefs = new Map();\n    }\n\n    // Get all visible tabs in the correct order\n    private getVisibleTabs(): Tab[] {\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n        const visiblePluginTabs = this.props.pluginTabs?.filter((tab) => tab.display !== false) || [];\n        return [...visibleTabs, ...visiblePluginTabs];\n    }\n\n    public handleClick = (tab: Tab, e: React.MouseEvent) => {\n        e.preventDefault();\n        this.props.updateTab(tab.name);\n        (e.target as Element).closest('.settings-modal')?.classList.add('display--content');\n    };\n\n    public handleKeyDown = (tab: Tab, e: React.KeyboardEvent) => {\n        // Only handle UP and DOWN arrow keys\n        if (!isKeyPressed(e, Constants.KeyCodes.UP) && !isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n            return;\n        }\n\n        // Prevent scrolling\n        e.preventDefault();\n\n        // Get all visible tabs\n        const visibleTabs = this.getVisibleTabs();\n\n        // If no tabs are visible, do nothing\n        if (visibleTabs.length === 0) {\n            return;\n        }\n\n        // Find the current tab's position in the visible tabs\n        const currentIndex = visibleTabs.findIndex((t) => t.name === tab.name);\n\n        // If tab not found in visible tabs, do nothing\n        if (currentIndex === -1) {\n            return;\n        }\n\n        let nextIndex: number;\n\n        // Determine which tab to focus based on the key pressed\n        if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n            // UP arrow key - move to previous tab or wrap to last\n            nextIndex = currentIndex > 0 ? currentIndex - 1 : visibleTabs.length - 1;\n        } else {\n            // DOWN arrow key - move to next tab or wrap to first\n            nextIndex = currentIndex < visibleTabs.length - 1 ? currentIndex + 1 : 0;\n        }\n\n        // Get the target tab\n        const targetTab = visibleTabs[nextIndex];\n\n        // Update the active tab\n        this.props.updateTab(targetTab.name);\n\n        // Focus the target tab button directly\n        const targetButton = this.buttonRefs.get(targetTab.name);\n        if (targetButton) {\n            // Use direct focus instead of a11yFocus to ensure Cypress tests can detect the focus change\n            targetButton.focus();\n        }\n    };\n\n    private renderTab(tab: Tab) {\n        const key = `${tab.name}_li`;\n        const isActive = this.props.activeTab === tab.name;\n\n        let icon;\n        if (typeof tab.icon === 'string') {\n            icon = (\n                <i\n                    className={tab.icon}\n                    title={tab.iconTitle}\n                />\n            );\n        } else {\n            icon = (\n                <img\n                    src={tab.icon.url}\n                    alt={tab.iconTitle}\n                    className='icon'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment key={key}>\n                {tab.newGroup && <hr/>}\n                <button\n                    data-testid={`${tab.name}-tab-button`}\n                    ref={(element: HTMLButtonElement) => {\n                        if (element) {\n                            this.buttonRefs.set(tab.name, element);\n                        } else {\n                            this.buttonRefs.delete(tab.name);\n                        }\n                    }}\n                    id={`${tab.name}Button`}\n                    className={classNames('cursor--pointer style--none nav-pills__tab', {active: isActive})}\n                    onClick={this.handleClick.bind(null, tab)}\n                    onKeyDown={this.handleKeyDown.bind(null, tab)}\n                    aria-label={tab.uiName.toLowerCase()}\n                    role='tab'\n                    aria-selected={isActive}\n                    tabIndex={!isActive && !this.props.isMobileView ? -1 : 0}\n                    aria-controls={`${tab.name}Settings`}\n                >\n                    {icon}\n                    {tab.uiName}\n                </button>\n            </React.Fragment>\n        );\n    }\n\n    public render() {\n        // Filter regular tabs and plugin tabs separately for rendering\n        const visibleTabs = this.props.tabs.filter((tab) => tab.display !== false);\n\n        // Map regular tabs\n        const tabList = visibleTabs.map((tab) => this.renderTab(tab));\n\n        let pluginTabList: React.ReactNode;\n        if (this.props.pluginTabs?.length) {\n            const visiblePluginTabs = this.props.pluginTabs.filter((tab) => tab.display !== false);\n            if (visiblePluginTabs.length) {\n                pluginTabList = (\n                    <>\n                        <hr/>\n                        <div\n                            role='group'\n                            aria-labelledby='userSettingsModal.pluginPreferences.header'\n                        >\n                            <div\n                                key={'plugin preferences heading'}\n                                role='heading'\n                                className={'header'}\n                                aria-level={3}\n                                id='userSettingsModal_pluginPreferences_header'\n                            >\n                                <FormattedMessage\n                                    id={'userSettingsModal.pluginPreferences.header'}\n                                    defaultMessage={'PLUGIN PREFERENCES'}\n                                />\n                            </div>\n                            {visiblePluginTabs.map((tab) => this.renderTab(tab))}\n                        </div>\n                    </>\n                );\n            }\n        }\n\n        return (\n            <div\n                id='tabList'\n                className='nav nav-pills nav-stacked'\n                role='tablist'\n                aria-orientation='vertical'\n            >\n                <div role='group'>\n                    {tabList}\n                </div>\n                {pluginTabList}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport SettingsSidebar from './settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    joinLeave: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => ReactNode;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n        a11yFocus(e.currentTarget);\n    };\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    };\n\n    public handleSubmit = (): void => {\n        const {actions, userId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: userId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(userId, [joinLeavePreference]);\n\n        onUpdateSection();\n    };\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.active) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './join_leave_section';\nimport JoinLeaveSection from './join_leave_section';\n\nexport function mapStateToProps(state: GlobalState, props: OwnProps) {\n    const config = getConfig(state);\n    const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n    const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, Preferences.ADVANCED_FILTER_JOIN_LEAVE, enableJoinLeaveMessage.toString(), userPreference),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useRef, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n}\n\ntype Props = PropsFromRedux & OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    const minRef = useRef<SettingItemMinComponent>(null);\n    const prevActiveRef = useRef(false);\n\n    useEffect(() => {\n        if (prevActiveRef.current && !props.active && props.areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    });\n\n    useEffect(() => {\n        prevActiveRef.current = props.active;\n    }, [props.active]);\n\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.active) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = (\n            <PerformanceDebuggingSectionCollapsed\n                {...props}\n                ref={minRef}\n            />\n        );\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nconst PerformanceDebuggingSectionCollapsed = React.forwardRef<SettingItemMinComponent, Props>((props, ref) => {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n            ref={ref}\n        />\n    );\n});\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        if (!props.userId) {\n            return;\n        }\n\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0 && props.userId) {\n            props.savePreferences(props.userId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.userId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool, getUserPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './performance_debugging_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userId ? getUserPreferences(state, props.userId) : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS, undefined, userPreferences),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY, undefined, userPreferences),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES, undefined, userPreferences),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport Constants, {AdvancedSections, Preferences} from 'utils/constants';\nimport {isMac} from 'utils/user_agent';\nimport {a11yFocus} from 'utils/utils';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\ntype Settings = {\n    [key: string]: string | undefined;\n    send_on_ctrl_enter: Props['sendOnCtrlEnter'];\n    code_block_ctrl_enter: Props['codeBlockOnCtrlEnter'];\n    formatting: Props['formatting'];\n    join_leave: Props['joinLeave'];\n    sync_drafts: Props['syncDrafts'];\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    user: UserProfile;\n    userPreferences?: PreferencesType;\n    updateSection: (section?: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport type Props = OwnProps & PropsFromRedux;\n\ntype State = {\n    settings: Settings;\n    isSaving: boolean;\n    showDeactivateAccountModal: boolean;\n    serverError: string;\n}\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): State => {\n        const settings: Settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n            sync_drafts: this.props.syncDrafts,\n            [Preferences.UNREAD_SCROLL_POSITION]: this.props.unreadScrollPosition,\n        };\n\n        const isSaving = false;\n\n        const showDeactivateAccountModal = false;\n\n        return {\n            settings,\n            isSaving,\n            showDeactivateAccountModal,\n            serverError: '',\n        };\n    };\n\n    updateSetting = (setting: string, value: string, e?: React.ChangeEvent): void => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState((prevState) => ({...prevState, ...settings}));\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleSubmit = async (settings: string[]): Promise<void> => {\n        if (!this.props.user) {\n            return;\n        }\n\n        const preferences: PreferenceType[] = [];\n        const {actions, user} = this.props;\n        const userId = user.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting]!,\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    };\n\n    handleDeactivateAccountSubmit = async (): Promise<void> => {\n        const userId = this.props.user.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleShowDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    };\n\n    handleHideDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    };\n\n    handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendDesc',\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: 'user.settings.advance.sendDesc.mac',\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        });\n        const title = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendTitle',\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: 'user.settings.advance.sendTitle.mac',\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        });\n        if (isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    };\n\n    renderOnOffLabel(enabled: string): JSX.Element {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderUnreadScrollPositionLabel(option?: string): JSX.Element {\n        if (option === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT) {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.startFromLeftOff'\n                    defaultMessage='Start me where I left off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.startFromNewest'\n                defaultMessage='Start me at the newest message'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel(): JSX.Element {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        const active = this.props.activeSection === 'formatting';\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, ['formatting'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderUnreadScrollPositionSection = () => {\n        const active = this.props.activeSection === Preferences.UNREAD_SCROLL_POSITION;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.unreadScrollPositionTitle'\n                            defaultMessage='Scroll position when viewing an unread channel'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='unreadScrollPositionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionTitle'\n                                    defaultMessage='Scroll position when viewing an unread channel'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromLeftOff'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromLeftOff'\n                                        defaultMessage='Start me where I left off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromNewest'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromNewest'\n                                        defaultMessage='Start me at the newest message'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionDesc'\n                                    defaultMessage='Choose your scroll position when you view an unread channel. Channels will always be marked as read when viewed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, [Preferences.UNREAD_SCROLL_POSITION])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.unreadScrollPositionTitle'\n                        defaultMessage='Scroll position when viewing an unread channel'\n                    />\n                }\n                describe={this.renderUnreadScrollPositionLabel(this.state.settings[Preferences.UNREAD_SCROLL_POSITION])}\n                section={Preferences.UNREAD_SCROLL_POSITION}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderSyncDraftsSection = () => {\n        const active = this.props.activeSection === AdvancedSections.SYNC_DRAFTS;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.syncDrafts.Title'\n                            defaultMessage='Allow message drafts to sync with the server'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='syncDraftsSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Title'\n                                    defaultMessage='Allow message drafts to sync with the server'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOn'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOff'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Desc'\n                                    defaultMessage='When enabled, message drafts are synced with the server so they can be accessed from any device. When disabled, message drafts are only saved locally on the device where they are composed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.SYNC_DRAFTS}\n                    submit={this.handleSubmit.bind(this, ['sync_drafts'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.syncDrafts.Title'\n                        defaultMessage='Allow message drafts to sync with the server'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.sync_drafts)}\n                section={AdvancedSections.SYNC_DRAFTS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderCtrlSendSection = () => {\n        const active = this.props.activeSection === 'advancedCtrlSend';\n        const serverError = this.state.serverError || null;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n        let max = null;\n        if (active) {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage {...ctrlSendTitle}/>\n                }\n                describe={this.renderCtrlEnterLabel()}\n                section={'advancedCtrlSend'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const ctrlSendSection = this.renderCtrlSendSection();\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let deactivateAccountSection: ReactNode = '';\n        let makeConfirmationModal: ReactNode = '';\n\n        if (this.props.user.auth_service === '' && this.props.enableUserDeactivation && !this.props.adminMode) {\n            const active = this.props.activeSection === 'deactivateAccount';\n            let max = null;\n            if (active) {\n                max = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        saveButtonClassName={'btn-danger'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n            deactivateAccountSection = (\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateAccountTitle'\n                            defaultMessage='Deactivate Account'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateDescShort'\n                            defaultMessage=\"Click 'Edit' to deactivate your account\"\n                        />\n                    }\n                    section={'deactivateAccount'}\n                    updateSection={this.handleUpdateSection}\n                    max={max}\n                />\n            );\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        const unreadScrollPositionSection = this.renderUnreadScrollPositionSection();\n        let unreadScrollPositionSectionDivider = null;\n        if (unreadScrollPositionSection) {\n            unreadScrollPositionSectionDivider = <div className='divider-light'/>;\n        }\n\n        let syncDraftsSection = null;\n        let syncDraftsSectionDivider = null;\n        if (this.props.syncedDraftsAreAllowed) {\n            syncDraftsSection = this.renderSyncDraftsSection();\n            if (syncDraftsSection) {\n                syncDraftsSectionDivider = <div className='divider-light'/>;\n            }\n        }\n\n        return (\n            <div\n                id='advancedSettings'\n                aria-labelledby='advancedButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.advance.title'\n                                defaultMessage='Advanced Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        active={this.props.activeSection === AdvancedSections.JOIN_LEAVE}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                        adminMode={this.props.adminMode}\n                        userPreferences={this.props.userPreferences}\n                        userId={this.props.user.id}\n                    />\n                    <PerformanceDebuggingSection\n                        active={this.props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING}\n                        onUpdateSection={this.handleUpdateSection}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        adminMode={this.props.adminMode}\n                        userId={this.props.user.id}\n                    />\n                    {unreadScrollPositionSectionDivider}\n                    {unreadScrollPositionSection}\n                    {syncDraftsSectionDivider}\n                    {syncDraftsSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ConnectedProps} from 'react-redux';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    getUnreadScrollPositionPreference,\n    makeGetCategory, makeGetUserCategory,\n    syncedDraftsAreAllowed,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced';\nimport type {OwnProps} from './user_settings_advanced';\n\nconst getAdvancedSettingsCategory = makeGetCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\nfunction makeMapStateToProps() {\n    const getUserAdvancedSettingsCategory = makeGetUserCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n        const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n\n        const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n        const advancedSettingsCategory = userPreferences ? getUserAdvancedSettingsCategory(state, props.user.id) : getAdvancedSettingsCategory(state);\n\n        return {\n            advancedSettingsCategory,\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false', userPreferences),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true', userPreferences),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true', userPreferences),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', enableJoinLeaveMessage.toString(), userPreferences),\n            syncDrafts: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'sync_drafts', 'true', userPreferences),\n            user: props.adminMode && props.user ? props.user : getCurrentUser(state),\n            unreadScrollPosition: getUnreadScrollPositionPreference(state, userPreferences),\n            enableUserDeactivation,\n            syncedDraftsAreAllowed: syncedDraftsAreAllowed(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <>\n            <label\n                className='custom-label'\n                htmlFor={`${props.id}-inputColorValue`}\n            >\n                {props.label}\n            </label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {createRef} from 'react';\nimport type {ChangeEvent, ClipboardEvent, MouseEvent, RefObject} from 'react';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape, MessageDescriptor} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants from 'utils/constants';\n\nimport ColorChooser from '../color_chooser/color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages: Record<string, MessageDescriptor> = defineMessages({\n    sidebarBg: {\n        id: 'user.settings.custom_theme.sidebarBg',\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: 'user.settings.custom_theme.sidebarText',\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: 'user.settings.custom_theme.sidebarHeaderBg',\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: 'user.settings.custom_theme.sidebarTeamBarBg',\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: 'user.settings.custom_theme.sidebarHeaderTextColor',\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: 'user.settings.custom_theme.sidebarUnreadText',\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: 'user.settings.custom_theme.sidebarTextHoverBg',\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: 'user.settings.custom_theme.sidebarTextActiveBorder',\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: 'user.settings.custom_theme.sidebarTextActiveColor',\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: 'user.settings.custom_theme.onlineIndicator',\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: 'user.settings.custom_theme.awayIndicator',\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: 'user.settings.custom_theme.dndIndicator',\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: 'user.settings.custom_theme.mentionBg',\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: 'user.settings.custom_theme.mentionColor',\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: 'user.settings.custom_theme.centerChannelBg',\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: 'user.settings.custom_theme.centerChannelColor',\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: 'user.settings.custom_theme.newMessageSeparator',\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: 'user.settings.custom_theme.linkColor',\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: 'user.settings.custom_theme.buttonBg',\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: 'user.settings.custom_theme.buttonColor',\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: 'user.settings.custom_theme.errorTextColor',\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: 'user.settings.custom_theme.mentionHighlightBg',\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: 'user.settings.custom_theme.mentionHighlightLink',\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: 'user.settings.custom_theme.codeTheme',\n        defaultMessage: 'Code Theme',\n    },\n});\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    intl: IntlShape;\n};\n\ntype State = {\n    copyTheme: string;\n};\n\nexport class CustomThemeChooser extends React.PureComponent<Props, State> {\n    textareaRef: RefObject<HTMLTextAreaElement>;\n    sidebarStylesHeaderRef: RefObject<HTMLButtonElement>;\n    centerChannelStylesHeaderRef: RefObject<HTMLButtonElement>;\n    linkAndButtonStylesHeaderRef: RefObject<HTMLButtonElement>;\n    sidebarStylesRef: RefObject<HTMLDivElement>;\n    centerChannelStylesRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesRef: RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n        this.textareaRef = createRef();\n        this.sidebarStylesHeaderRef = createRef();\n        this.centerChannelStylesHeaderRef = createRef();\n        this.linkAndButtonStylesHeaderRef = createRef();\n        this.sidebarStylesRef = createRef();\n        this.centerChannelStylesRef = createRef();\n        this.linkAndButtonStylesRef = createRef();\n\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n    handleColorChange = (settingId: string, color: string) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme: Theme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatibility\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    };\n\n    setCopyTheme(theme: Theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n        let text = '';\n\n        if ((window as any).clipboardData && (window as any).clipboardData.getData) { // IE\n            text = (window as any).clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    };\n\n    onChangeHandle = (e: ChangeEvent<HTMLTextAreaElement>) => e.stopPropagation();\n\n    selectTheme = () => {\n        this.textareaRef.current?.focus();\n        this.textareaRef.current?.setSelectionRange(0, this.state.copyTheme.length);\n    };\n\n    toggleSidebarStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.sidebarStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.sidebarStylesHeaderRef.current?.classList.contains('open');\n        this.sidebarStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.sidebarStylesRef.current);\n    };\n\n    toggleCenterChannelStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.centerChannelStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.centerChannelStylesHeaderRef.current?.classList.contains('open');\n        this.centerChannelStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.centerChannelStylesRef.current);\n    };\n\n    toggleLinkAndButtonStyles = (e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        this.linkAndButtonStylesHeaderRef.current?.classList.toggle('open');\n\n        const isAccordionOpen = this.linkAndButtonStylesHeaderRef.current?.classList.contains('open');\n        this.linkAndButtonStylesHeaderRef.current?.setAttribute('aria-expanded', `${isAccordionOpen}`);\n        this.toggleSection(this.linkAndButtonStylesRef.current);\n    };\n\n    toggleSection(node: HTMLElement | null) {\n        if (!node) {\n            return;\n        }\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const theme: Theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    };\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    };\n\n    showCopySuccess = () => {\n        const copySuccess: HTMLElement | null = document.querySelector('.copy-theme-success');\n        if (copySuccess) {\n            copySuccess.style.display = 'inline-block';\n            setTimeout(() => {\n                copySuccess.style.display = 'none';\n            }, COPY_SUCCESS_INTERVAL);\n        }\n    };\n\n    render() {\n        const {intl, theme} = this.props;\n        const sidebarElements: JSX.Element[] = [];\n        const centerChannelElements: JSX.Element[] = [];\n        const linkAndButtonElements: JSX.Element[] = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions: JSX.Element[] = [];\n                let codeThemeURL = '';\n\n                element.themes?.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label\n                            className='custom-label'\n                            htmlFor='codeThemeSelect'\n                        >\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <WithTooltip\n                                title={\n                                    <div className='code-popover'>\n                                        <img\n                                            width='200'\n                                            alt={'code theme image'}\n                                            src={codeThemeURL}\n                                        />\n                                    </div>\n                                }\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </WithTooltip>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label\n                    className='custom-label'\n                    htmlFor='pasteBox'\n                >\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref={this.textareaRef}\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-tertiary'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div\n                id='customThemesSection'\n                className='appearance-section pt-2'\n                aria-labelledby='customThemes'\n            >\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.sidebarStylesHeaderRef}\n                            id='sidebarStylesAccordion'\n                            onClick={this.toggleSidebarStyles}\n                            aria-expanded={false}\n                            aria-controls='sidebarStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.sidebarTitle'\n                                defaultMessage='Sidebar Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        ref={this.sidebarStylesRef}\n                        id='sidebarStylesSection'\n                        aria-labelledby='sidebarStylesAccordion'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.centerChannelStylesHeaderRef}\n                            id='centerChannelStylesAccordion'\n                            onClick={this.toggleCenterChannelStyles}\n                            aria-expanded={false}\n                            aria-controls='centerChannelStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.centerChannelTitle'\n                                defaultMessage='Center Channel Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        ref={this.centerChannelStylesRef}\n                        id='centerChannelStylesSection'\n                        className='theme-elements__body'\n                        aria-labelledby='centerChannelStylesAccordion'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <h4 className='theme-elements__header'>\n                        <button\n                            ref={this.linkAndButtonStylesHeaderRef}\n                            id='linkAndButtonsStylesAccordion'\n                            onClick={this.toggleLinkAndButtonStyles}\n                            aria-expanded={false}\n                            aria-controls='linkAndButtonsStylesSection'\n                            className='theme-elements__header'\n                        >\n                            <FormattedMessage\n                                id='user.settings.custom_theme.linkButtonTitle'\n                                defaultMessage='Link and Button Styles'\n                            />\n                            <div className='header__icon'>\n                                <i\n                                    className='fa fa-plus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                                />\n                                <i\n                                    className='fa fa-minus'\n                                    aria-hidden={true}\n                                    title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                />\n                            </div>\n                        </button>\n                    </h4>\n                    <div\n                        id='linkAndButtonsStylesSection'\n                        ref={this.linkAndButtonStylesRef}\n                        className='theme-elements__body'\n                        aria-labelledby='linkAndButtonsStylesAccordion'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName?: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {Theme, ThemeKey} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    allowedThemes: string[];\n}\n\nconst PremadeThemeChooser = ({theme, updateTheme, allowedThemes = []}: Props) => {\n    const premadeThemes = [];\n    const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n    for (const k in Preferences.THEMES) {\n        if (Object.hasOwn(Preferences.THEMES, k)) {\n            if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                continue;\n            }\n\n            const premadeTheme: Theme = Object.assign({}, Preferences.THEMES[k as ThemeKey]);\n\n            let activeClass = '';\n            if (premadeTheme.type === theme.type) {\n                activeClass = 'active';\n            }\n\n            premadeThemes.push(\n                <div\n                    className='col-xs-6 col-sm-3 premade-themes'\n                    key={'premade-theme-key' + k}\n                >\n                    <button\n                        id={`premadeTheme${premadeTheme.type?.replace(' ', '')}`}\n                        className={`premadeThemeButton ${activeClass}`}\n                        onClick={() => updateTheme(premadeTheme)}\n                    >\n                        <label>\n                            <ThemeThumbnail\n                                themeKey={k}\n                                themeName={premadeTheme.type}\n                                sidebarBg={premadeTheme.sidebarBg}\n                                sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                onlineIndicator={premadeTheme.onlineIndicator}\n                                awayIndicator={premadeTheme.awayIndicator}\n                                dndIndicator={premadeTheme.dndIndicator}\n                                centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                centerChannelBg={premadeTheme.centerChannelBg}\n                                newMessageSeparator={premadeTheme.newMessageSeparator}\n                                buttonBg={premadeTheme.buttonBg}\n                            />\n                            <div className='theme-label'>{toTitleCase(premadeTheme.type || '')}</div>\n                        </label>\n                    </button>\n                </div>,\n            );\n        }\n    }\n\n    return (\n        <div\n            id='premadeThemesSection'\n            className='row appearance-section'\n            aria-labelledby='standardThemes'\n        >\n            <div className='clearfix'>\n                {premadeThemes}\n            </div>\n        </div>\n    );\n};\n\nexport default PremadeThemeChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {Constants} from 'utils/constants';\nimport {applyTheme} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\nimport CustomThemeChooser from './custom_theme_chooser/custom_theme_chooser';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\ntype Props = {\n    currentTeamId: string;\n    theme: Theme;\n    selected: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    setRequireConfirm?: (requireConfirm: boolean) => void;\n    allowCustomThemes: boolean;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    actions: {\n        saveTheme: (teamId: string, theme: Theme) => void;\n        deleteTeamSpecificThemes: () => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\ntype State = {\n    isSaving: boolean;\n    type: string;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    serverError: string;\n    theme: Theme;\n};\n\nexport default class ThemeSetting extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n    originalTheme: Theme;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n            serverError: '',\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n        if (prevProps.selected && !this.props.selected && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props): State {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n            serverError: '',\n            isSaving: false,\n        };\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    submitTheme = async (): Promise<void> => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm?.(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme: Theme): void => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (Object.hasOwn(theme, field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm?.(themeChanged);\n\n        this.setState({theme});\n        applyTheme(theme);\n    };\n\n    updateType = (type: string): void => this.setState({type});\n\n    resetFields = (): void => {\n        const state = this.getStateFromProps();\n        state.serverError = '';\n        this.setState(state);\n\n        applyTheme(state.theme);\n\n        this.props.setRequireConfirm?.(false);\n    };\n\n    handleUpdateSection = (section: string): void => this.props.updateSection(section);\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        key='premadeCustom'\n                        className='user-settings__radio-group-inline'\n                    >\n                        <div className='radio radio-inline'>\n                            <label>\n                                <input\n                                    id='standardThemes'\n                                    type='radio'\n                                    name='theme'\n                                    checked={!displayCustom}\n                                    onChange={this.updateType.bind(this, 'premade')}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.display.theme.premadeThemes'\n                                    defaultMessage='Premade Themes'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio radio-inline'>\n                            <label>\n                                <input\n                                    id='customThemes'\n                                    type='radio'\n                                    name='theme'\n                                    checked={displayCustom}\n                                    onChange={this.updateType.bind(this, 'custom')}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.display.theme.customTheme'\n                                    defaultMessage='Custom Theme'\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(premade, custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <ExternalLink\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            location='user_settings_theme'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </ExternalLink>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    inputs={\n                        <fieldset>\n                            <legend className='hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.display.theme.title'\n                                    defaultMessage='Theme'\n                                />\n                            </legend>\n                            <div>\n                                {inputs}\n                            </div>\n                        </fieldset>\n                    }\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    isFullWidth={true}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {getTheme, getThemePreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsTheme from './user_settings_theme';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        theme: getTheme(state),\n        applyToAllTeams: getThemePreferences(state).length <= 1,\n        showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {StylesConfig, OnChangeValue, AriaOnFocus, AriaOnChange} from 'react-select';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    locale: string;\n    locales: Record<string, Language>;\n    updateSection: (section: string) => void;\n    actions: Actions;\n    adminMode?: boolean;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: props.locales[userLocale].value,\n            label: props.locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: OnChangeValue<SelectedOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(user).then((res) => {\n            if ('data' in res) {\n                this.setState({isSaving: false});\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        const {intl, locales} = this.props;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        } satisfies StylesConfig<SelectedOption, boolean>;\n\n        const onFocusMessage: AriaOnFocus<SelectedOption> = ({focused}) => {\n            return `option ${focused.label} focused`;\n        };\n\n        const onChangeMessage: AriaOnChange<SelectedOption, boolean> = (option) => {\n            return `option ${option.label} selected`;\n        };\n\n        const interfaceLanguageLabelAria = intl.formatMessage({id: 'user.settings.languages.dropdown.arialabel', defaultMessage: 'Dropdown selector to change the interface language'});\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    aria-label={interfaceLanguageLabelAria}\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                    htmlFor='displayLanguage'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        ariaLiveMessages={{\n                            onFocus: onFocusMessage,\n                            onChange: onChangeMessage,\n                        }}\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        isClearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                        aria-live='assertive'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote1'\n                        defaultMessage='Select which language Mattermost displays in the user interface.'\n                    />\n                    <p/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote2'\n                        defaultMessage='Would you like to help with translations? Join the <link>Mattermost Translation Server</link> to contribute.'\n                        values={{\n                            link: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='http://translate.mattermost.com'\n                                    location='manage_languages'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n                disableEnterSubmit={true}\n            />\n        );\n    }\n}\nexport default injectIntl(ManageLanguage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\n\nimport {getLanguages} from 'i18n/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        locales: getLanguages(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, StylesConfig} from 'react-select';\nimport type {Timezone} from 'timezones.json';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {getBrowserTimezone} from 'utils/timezone';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n    adminMode?: boolean;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: OnChangeValue<SelectedOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        let index = 0;\n        let previousTimezone: Timezone;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            if (timeObject.utc[index] === previousTimezone?.utc[index]) {\n                index++;\n            } else {\n                // It's safe to use the first item since consecutive timezones\n                // don't have the same 'utc' array.\n                index = index === 0 ? index : 0;\n            }\n\n            previousTimezone = timeObject;\n\n            // Some more context on why different 'utc' items are used can be found here.\n            // https://github.com/mattermost/mattermost/pull/29290#issuecomment-2478492626\n            return {\n                value: timeObject.utc[index],\n                label: timeObject.text,\n            };\n        });\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        // These are passed to the 'key' prop and should all be unique.\n        const inputId = {\n            automaticTimezoneInput: 1,\n            manualTimezoneInput: 2,\n            message: 3,\n        };\n\n        const reactStyles = {\n\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        } satisfies StylesConfig<SelectedOption, boolean>;\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div\n                className='checkbox'\n                key={inputId.automaticTimezoneInput}\n            >\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n                key={inputId.manualTimezoneInput}\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    isClearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div key={inputId.message}>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n                disableEnterSubmit={true}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getCurrentTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\nfunction mapStateToProps(state: GlobalState) {\n    const timezoneLabel = getCurrentTimezoneLabel(state);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nexport type Actions = {\n    savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n};\n\nexport type OwnProps = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    renderEmoticonsAsEmoji: string;\n    actions: Actions;\n}\n\nconst RenderEmoticonsAsEmoji: React.FC<Props> = ({user, renderEmoticonsAsEmoji, updateSection, actions}) => {\n    const [value, setValue] = useState<string>(renderEmoticonsAsEmoji);\n    const [isSaving, setIsSaving] = useState<boolean>(false);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value);\n    }, []);\n\n    const submitPreference = useCallback(() => {\n        setIsSaving(true);\n        const pref: PreferenceType = {\n            user_id: user.id,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.RENDER_EMOTICONS_AS_EMOJI,\n            value,\n        };\n        actions.savePreferences(user.id, [pref]);\n        setIsSaving(false);\n        updateSection('');\n    }, [user.id, updateSection, actions, value]);\n\n    const changePreference = useCallback(() => {\n        if (value === renderEmoticonsAsEmoji) {\n            updateSection('');\n            return;\n        }\n\n        submitPreference();\n    }, [renderEmoticonsAsEmoji, updateSection, value, submitPreference]);\n\n    const options = [\n        {\n            option: 'true',\n            inputId: 'renderEmoticonsAsEmojiOn',\n            messageId: 'user.settings.advance.on',\n            defaultMessage: 'On',\n        },\n        {\n            option: 'false',\n            inputId: 'renderEmoticonsAsEmojiOff',\n            messageId: 'user.settings.advance.off',\n            defaultMessage: 'Off',\n        },\n    ];\n\n    const input = (\n        <fieldset key='renderEmoticonsAsEmojiSetting'>\n            <legend className='form-legend hidden-label'>\n                <FormattedMessage\n                    id='user.settings.display.renderEmoticonsAsEmojiTitle'\n                    defaultMessage='Render emoticons as emojis'\n                />\n            </legend>\n            {options.map(({option, inputId, messageId, defaultMessage}) => {\n                return (\n                    <div\n                        className='radio'\n                        key={option}\n                    >\n                        <label>\n                            <input\n                                id={inputId}\n                                type='radio'\n                                name='renderEmoticonsAsEmoji'\n                                value={option}\n                                checked={value === option}\n                                onChange={handleChange}\n                            />\n                            <FormattedMessage\n                                id={messageId}\n                                defaultMessage={defaultMessage}\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            })}\n            <div className='mt-5'>\n                <FormattedMessage\n                    id='user.settings.display.renderEmoticonsAsEmojiDesc'\n                    defaultMessage='When enabled, text emoticons in messages will be rendered as emojis (For example :D as 😄)'\n                />\n            </div>\n        </fieldset>\n    );\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.display.renderEmoticonsAsEmojiTitle'\n                    defaultMessage='Render emoticons as emojis'\n                />\n            }\n            inputs={[input]}\n            submit={changePreference}\n            saving={isSaving}\n            updateSection={updateSection}\n            disableEnterSubmit={true}\n        />\n    );\n};\n\nexport default RenderEmoticonsAsEmoji;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport RenderEmoticonsAsEmoji from './render_emoticons_as_emoji';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RenderEmoticonsAsEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedMessage, defineMessage} from 'react-intl';\nimport type {Timezone} from 'timezones.json';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile, UserTimezone} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\n\nimport {getLanguageInfo} from 'i18n/i18n';\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {a11yFocus} from 'utils/utils';\n\nimport ManageLanguages from './manage_languages';\nimport ManageTimezones from './manage_timezones';\nimport RenderEmoticonsAsEmoji from './render_emoticons_as_emoji';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        colorizeUsernames: props.colorizeUsernames,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        lastActiveDisplay: props.lastActiveDisplay.toString(),\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype ChildOption = {\n    label: MessageDescriptor;\n    value: string;\n    display: string;\n    more: MessageDescriptor;\n};\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        label: MessageDescriptor;\n        more?: MessageDescriptor;\n    };\n    childOption?: ChildOption;\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: MessageDescriptor;\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: MessageDescriptor;\n    disabled?: boolean;\n    onSubmit?: () => void;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    locales: Record<string, Language>;\n    userLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    shouldAutoUpdateTimezone: boolean | string;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    lastActiveDisplay: boolean;\n    lastActiveTimeEnabled: boolean;\n    renderEmoticonsAsEmoji: string;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        patchUser: (user: UserProfile) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    lastActiveDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, shouldAutoUpdateTimezone} = this.props;\n\n        if (shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    submitLastActive = () => {\n        const {user, actions} = this.props;\n        const {lastActiveDisplay} = this.state;\n\n        const updatedUser = {\n            ...user,\n            props: {\n                ...user.props,\n                show_last_active: lastActiveDisplay,\n            },\n        };\n\n        const action = this.props.adminMode ? actions.patchUser : actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const colorizeUsernamesPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLORIZE_USERNAMES,\n            value: this.state.colorizeUsernames,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n            colorizeUsernamesPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    };\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    };\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    };\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    };\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLastActiveRadio(lastActiveDisplay: string) {\n        this.setState({lastActiveDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    };\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    };\n\n    handleOnChange(e: React.ChangeEvent, display: {[key: string]: any}) {\n        this.setState({...display});\n        a11yFocus(e.currentTarget as HTMLElement);\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    };\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    };\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n            onSubmit,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | (() => void) | null = onSubmit || this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.label.id}\n                defaultMessage={firstOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.more?.id) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.more.id}\n                        defaultMessage={firstOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.label.id}\n                defaultMessage={secondOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.more?.id) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.more.id}\n                        defaultMessage={secondOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.label.id}\n                    defaultMessage={thirdOption.radionButtonText.label.defaultMessage}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.defaultMessage}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.defaultMessage}\n            />\n        );\n\n        const active = this.props.activeSection === section;\n        let max = null;\n        if (active) {\n            const format = [false, false, false];\n            let childOptionToShow: ChildOption | undefined;\n            if (value === firstOption.value) {\n                format[0] = true;\n                childOptionToShow = firstOption.childOption;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n                childOptionToShow = secondOption.childOption;\n            } else {\n                format[2] = true;\n                if (thirdOption) {\n                    childOptionToShow = thirdOption.childOption;\n                }\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={(e) => this.handleOnChange(e, thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let childOptionSection;\n            if (childOptionToShow) {\n                const childDisplay = childOptionToShow.display;\n                childOptionSection = (\n                    <div className='checkbox'>\n                        <hr/>\n                        <label>\n                            <input\n                                id={name + 'childOption'}\n                                type='checkbox'\n                                name={childOptionToShow.label.id}\n                                checked={childOptionToShow.value === 'true'}\n                                onChange={(e) => {\n                                    this.handleOnChange(e, {[childDisplay]: e.target.checked ? 'true' : 'false'});\n                                }}\n                            />\n                            <FormattedMessage\n                                id={childOptionToShow.label.id}\n                                defaultMessage={childOptionToShow.label.defaultMessage}\n                            />\n                            {moreColon}\n                            <span className='font-weight--normal'>\n                                <FormattedMessage\n                                    id={childOptionToShow.more.id}\n                                    defaultMessage={childOptionToShow.more.defaultMessage}\n                                />\n                            </span>\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={(e) => this.handleOnChange(e, firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={(e) => this.handleOnChange(e, secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                    {childOptionSection}\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            max = (\n                <SettingItemMax\n                    title={messageTitle}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.updateSection}\n                />);\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                    max={max}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.collapseDisplay',\n                defaultMessage: 'Default Appearance of Image Previews',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOn',\n                        defaultMessage: 'Expanded',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOff',\n                        defaultMessage: 'Collapsed',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.collapseDesc',\n                defaultMessage: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            }),\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.linkPreviewDisplay',\n                    defaultMessage: 'Website Link Previews',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.linkPreviewDesc',\n                    defaultMessage: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                }),\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        let lastActiveSection = null;\n\n        if (this.props.lastActiveTimeEnabled) {\n            lastActiveSection = this.createSection({\n                section: 'lastactive',\n                display: 'lastActiveDisplay',\n                value: this.state.lastActiveDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.lastActiveDisplay',\n                    defaultMessage: 'Share last active time',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.lastActiveDesc',\n                    defaultMessage: 'When enabled, other users will see when you were last active.',\n                }),\n                onSubmit: this.submitLastActive,\n            });\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.clockDisplay',\n                defaultMessage: 'Clock Display',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.normalClock',\n                        defaultMessage: '12-hour clock (example: 4:00 PM)',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.militaryClock',\n                        defaultMessage: '24-hour clock (example: 16:00)',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.preferTime',\n                defaultMessage: 'Select how you prefer time displayed.',\n            }),\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayTitle',\n                defaultMessage: 'Teammate Name Display',\n            }),\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayUsername',\n                        defaultMessage: 'Show username',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayNicknameFullname',\n                        defaultMessage: 'Show nickname if one exists, otherwise show first and last name',\n                    }),\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayFullname',\n                        defaultMessage: 'Show first and last name',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayDescription',\n                defaultMessage: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            }),\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsTitle',\n                defaultMessage: 'Show user availability on posts',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsDescription',\n                defaultMessage: 'When enabled, online availability is displayed on profile images in the message list.',\n            }),\n        });\n\n        let timezoneSelection;\n        if (!this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            const active = this.props.activeSection === 'timezone';\n            let max = null;\n            if (active) {\n                max = (\n                    <ManageTimezones\n                        user={this.props.user}\n                        useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                        automaticTimezone={userTimezone.automaticTimezone}\n                        manualTimezone={userTimezone.manualTimezone}\n                        updateSection={this.updateSection}\n                        adminMode={this.props.adminMode}\n                    />\n                );\n            }\n            timezoneSelection = (\n                <div>\n                    <SettingItem\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.timezone'\n                                defaultMessage='Timezone'\n                            />\n                        }\n                        describe={this.props.timezoneLabel}\n                        section={'timezone'}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: defineMessage({\n                id: 'user.settings.display.messageDisplayTitle',\n                defaultMessage: 'Message Display',\n            }),\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayClean',\n                        defaultMessage: 'Standard',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCleanDes',\n                        defaultMessage: 'Easy to scan and read.',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompact',\n                        defaultMessage: 'Compact',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompactDes',\n                        defaultMessage: 'Fit as many messages on the screen as we can.',\n                    }),\n                },\n                childOption: {\n                    label: defineMessage({\n                        id: 'user.settings.display.colorize',\n                        defaultMessage: 'Colorize usernames',\n                    }),\n                    value: this.state.colorizeUsernames,\n                    display: 'colorizeUsernames',\n                    more: defineMessage({\n                        id: 'user.settings.display.colorizeDes',\n                        defaultMessage: 'Use colors to distinguish users in compact mode',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.messageDisplayDescription',\n                defaultMessage: 'Select how messages in a channel should be displayed.',\n            }),\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsTitle',\n                    defaultMessage: 'Threaded Discussions',\n                }),\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsDescription',\n                    defaultMessage: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                }),\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.clickToReply',\n                defaultMessage: 'Click to open threads',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.clickToReplyDescription',\n                defaultMessage: 'When enabled, click anywhere on a message to open the reply thread.',\n            }),\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: defineMessage({\n                id: 'user.settings.display.channelDisplayTitle',\n                defaultMessage: 'Channel Display',\n            }),\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fullScreen',\n                        defaultMessage: 'Full width',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fixedWidthCentered',\n                        defaultMessage: 'Fixed width, centered',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.channeldisplaymode',\n                defaultMessage: 'Select the width of the center channel.',\n            }),\n        });\n\n        let languagesSection;\n        const userLocale = this.props.userLocale;\n        const localeName = getLanguageInfo(userLocale).name;\n\n        languagesSection = (\n            <div>\n                <SettingItem\n                    active={this.props.activeSection === 'languages'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.language'\n                            defaultMessage='Language'\n                        />\n                    }\n                    describe={localeName}\n                    section={'languages'}\n                    updateSection={this.updateSection}\n                    max={(\n                        <ManageLanguages\n                            user={this.props.user}\n                            locale={userLocale}\n                            updateSection={this.updateSection}\n                            adminMode={this.props.adminMode}\n                        />\n                    )}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n\n        if (Object.keys(this.props.locales).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection && !this.props.adminMode) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsTitle',\n                    defaultMessage: 'Quick reactions on messages',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.on',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.off',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsDescription',\n                    defaultMessage: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                }),\n            });\n        }\n\n        const renderEmoticonsAsEmojiSection = (\n            <div>\n                <SettingItem\n                    active={this.props.activeSection === 'renderEmoticonsAsEmoji'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.renderEmoticonsAsEmojiTitle'\n                            defaultMessage='Render emoticons as emojis'\n                        />\n                    }\n                    describe={\n                        this.props.renderEmoticonsAsEmoji === 'true' ? (\n                            <FormattedMessage\n                                id='user.settings.advance.on'\n                                defaultMessage='On'\n                            />\n                        ) : (\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        )\n                    }\n                    section='renderEmoticonsAsEmoji'\n                    updateSection={this.updateSection}\n                    max={(\n                        <RenderEmoticonsAsEmoji\n                            renderEmoticonsAsEmoji={this.props.renderEmoticonsAsEmoji}\n                            user={this.props.user}\n                            updateSection={this.updateSection}\n                            adminMode={this.props.adminMode}\n                            userPreferences={this.props.userPreferences}\n                        />\n                    )}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n\n        return (\n            <div\n                id='displaySettings'\n                aria-labelledby='displayButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='displaySettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.display.title'\n                                defaultMessage='Display Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {lastActiveSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {renderEmoticonsAsEmojiSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    isCollapsedThreadsAllowed,\n    getCollapsedThreadsPreference,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    generateCurrentTimezoneLabel,\n    getCurrentTimezoneFull,\n    getCurrentTimezoneLabel,\n    getTimezoneForUserProfile,\n} from 'mattermost-redux/selectors/entities/timezone';\nimport {getCurrentUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getLanguages, isLanguageAvailable} from 'i18n/i18n';\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_display';\nimport UserSettingsDisplay from './user_settings_display';\n\nexport function makeMapStateToProps() {\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userTimezone = props.adminMode ? getTimezoneForUserProfile(props.user) : getCurrentTimezoneFull(state);\n        const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n        const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n        const timezoneLabel = props.adminMode ? generateCurrentTimezoneLabel(getUserCurrentTimezone(userTimezone)) : getCurrentTimezoneLabel(state);\n        const allowCustomThemes = config.AllowCustomThemes === 'true';\n        const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n        const enableThemeSelection = config.EnableThemeSelection === 'true';\n        const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n        const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n        const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n        const lastActiveTimeEnabled = config.EnableLastActiveTime === 'true';\n        const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n        let lastActiveDisplay = true;\n        const user = props.adminMode ? props.user : getUser(state, currentUserId);\n        if (user.props?.show_last_active === 'false') {\n            lastActiveDisplay = false;\n        }\n\n        let userLocale = props.user.locale;\n        if (!isLanguageAvailable(state, userLocale)) {\n            userLocale = config.DefaultClientLocale as string;\n        }\n\n        return {\n            lockTeammateNameDisplay,\n            allowCustomThemes,\n            configTeammateNameDisplay,\n            enableLinkPreviews,\n            locales: getLanguages(state),\n            userLocale,\n            enableThemeSelection,\n            timezones,\n            timezoneLabel,\n            userTimezone,\n            shouldAutoUpdateTimezone,\n            availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT, userPreference),\n            militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT, userPreference),\n            teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay, userPreference),\n            channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT, userPreference),\n            messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT, userPreference),\n            colorizeUsernames: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLORIZE_USERNAMES, Preferences.COLORIZE_USERNAMES_DEFAULT, userPreference),\n            collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT, userPreference),\n            collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n            collapsedReplyThreads: getCollapsedThreadsPreference(state),\n            clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT, userPreference),\n            linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT, userPreference),\n            oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT, userPreference),\n            renderEmoticonsAsEmoji: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.RENDER_EMOTICONS_AS_EMOJI, Preferences.RENDER_EMOTICONS_AS_EMOJI_DEFAULT, userPreference),\n            emojiPickerEnabled,\n            lastActiveDisplay,\n            lastActiveTimeEnabled,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            savePreferences,\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Component, createRef} from 'react';\nimport type {ChangeEvent, CSSProperties, MouseEvent, ReactNode, RefObject} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport FormError from 'components/form_error';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {Constants} from 'utils/constants';\nimport * as FileUtils from 'utils/file_utils';\nimport {localizeMessage} from 'utils/utils';\n\nimport WithTooltip from './with_tooltip';\n\ntype Props = {\n    clientError?: ReactNode;\n    serverError?: ReactNode;\n    src?: string | null;\n    defaultImageSrc?: string;\n    file?: File | null;\n    loadingPicture?: boolean;\n    submitActive?: boolean;\n    onRemove?: () => void;\n    onSetDefault?: (() => Promise<void>) | null;\n    onSubmit?: (() => void) | null;\n    title?: string;\n    onFileChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    updateSection?: (e: MouseEvent<HTMLButtonElement>) => void;\n    imageContext?: string;\n    maxFileSize?: number;\n    helpText?: ReactNode;\n}\n\ntype State = {\n    image: string | null;\n    removeSrc: boolean;\n    setDefaultSrc: boolean;\n    orientationStyles?: CSSProperties;\n}\n\nexport default class SettingPicture extends Component<Props, State> {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n    private readonly settingList: RefObject<HTMLDivElement>;\n    private readonly selectInput: RefObject<HTMLInputElement>;\n    private readonly confirmButton: RefObject<HTMLButtonElement>;\n    private previewBlob: string | null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.settingList = createRef();\n        this.selectInput = createRef();\n        this.confirmButton = createRef();\n        this.previewBlob = null;\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        this.settingList.current?.focus();\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.file && prevProps.file !== this.props.file) {\n            this.setPicture(this.props.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e: MouseEvent<HTMLButtonElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection?.(e);\n    };\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    };\n\n    handleSave = (e: MouseEvent) => {\n        e.preventDefault();\n        if (this.props.loadingPicture) {\n            return;\n        }\n        if (this.state.removeSrc) {\n            this.props.onRemove?.();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault?.();\n        } else {\n            this.props.onSubmit?.();\n        }\n    };\n\n    handleRemoveSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleSetDefaultSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange?.(e);\n    };\n\n    handleInputFile = () => {\n        if (this.selectInput.current) {\n            this.selectInput.current.value = '';\n            this.selectInput.current.click();\n        }\n    };\n\n    setPicture = (file: File) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target!.result! as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove This Icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove Profile Picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <WithTooltip\n                        title={title ?? ''}\n                        disabled={!title}\n                    >\n                        <button\n                            data-testid='removeSettingPicture'\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </WithTooltip>\n                </div>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        let buttonRender;\n        if (this.props.onSubmit) {\n            buttonRender = (\n                <span>\n                    <input\n                        data-testid='uploadPicture'\n                        ref={this.selectInput}\n                        className='hidden'\n                        accept={Constants.ACCEPT_STATIC_IMAGE}\n                        type='file'\n                        onChange={this.handleFileChange}\n                        disabled={this.props.loadingPicture}\n                        aria-hidden={true}\n                        tabIndex={-1}\n                    />\n                    <button\n                        data-testid='inputSettingPictureButton'\n                        className='btn btn-primary btn-file'\n                        disabled={this.props.loadingPicture}\n                        onClick={this.handleInputFile}\n                        aria-label={localizeMessage({id: 'setting_picture.select', defaultMessage: 'Select'})}\n                    >\n                        <FormattedMessage\n                            id='setting_picture.select'\n                            defaultMessage='Select'\n                        />\n                    </button>\n                    <button\n                        tabIndex={disableSaveButtonFocus ? -1 : 0}\n                        data-testid='saveSettingPicture'\n                        disabled={disableSaveButtonFocus}\n                        ref={this.confirmButton}\n                        className={confirmButtonClass}\n                        onClick={this.handleSave}\n                        aria-label={this.props.loadingPicture ? localizeMessage({id: 'setting_picture.uploading', defaultMessage: 'Uploading...'}) : localizeMessage({id: 'setting_picture.save', defaultMessage: 'Save'})}\n                    >\n                        <LoadingWrapper\n                            loading={this.props.loadingPicture}\n                            text={defineMessage({id: 'setting_picture.uploading', defaultMessage: 'Uploading...'})}\n                        >\n                            <FormattedMessage\n                                id='setting_picture.save'\n                                defaultMessage='Save'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </span>\n            );\n        }\n        return (\n            <section className='section-max form-horizontal'>\n                <h4 className='col-xs-12 section-title'>\n                    {this.props.title}\n                </h4>\n                <div className='col-sm-10 col-sm-offset-2'>\n                    <div\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex={-1}\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <div\n                            id='setting-picture__helptext'\n                            className='setting-list-item pt-3'\n                        >\n                            {this.props.helpText}\n                        </div>\n                        <div\n                            className='setting-list-item'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            {buttonRender}\n                            <button\n                                data-testid='cancelSettingPicture'\n                                className='btn btn-tertiary theme ml-2'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage({id: 'setting_picture.cancel', defaultMessage: 'Cancel'})}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React, {PureComponent} from 'react';\nimport {defineMessage, defineMessages, FormattedDate, FormattedMessage, FormattedList, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, ActionMeta, StylesConfig} from 'react-select';\n\nimport type {UserPropertyField, PropertyFieldOption} from '@mattermost/types/properties';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {LogErrorOptions} from 'mattermost-redux/actions/errors';\nimport {LogErrorBarMode} from 'mattermost-redux/actions/errors';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingPicture from 'components/setting_picture';\nimport Input from 'components/widgets/inputs/input/input';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\nimport {validHttpUrl} from 'utils/url';\nimport * as Utils from 'utils/utils';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: 'user.settings.general.usernameReserved',\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: 'user.settings.general.usernameGroupNameUniqueness',\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: 'user.settings.general.usernameRestrictions',\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: 'user.settings.general.validEmail',\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    validUrl: {\n        id: 'user.settings.general.validUrl',\n        defaultMessage: 'Please enter a valid url.',\n    },\n    emailMatch: {\n        id: 'user.settings.general.emailMatch',\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: 'user.settings.general.incorrectPassword',\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: 'user.settings.general.emptyPassword',\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: 'user.settings.general.validImage',\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: 'user.settings.general.imageTooLarge',\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: 'user.settings.general.uploadImage',\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: 'user.settings.general.mobile.uploadImage',\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: 'user.settings.general.fullName',\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: 'user.settings.general.nickname',\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: 'user.settings.general.username',\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: 'user.settings.general.profilePicture',\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: 'user.settings.general.close',\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: 'user.settings.general.position',\n        defaultMessage: 'Position',\n    },\n});\n\nexport type SelectOption = {\n    value: string;\n    label: string;\n};\n\nconst selectStyles: StylesConfig<SelectOption, true> = {\n    valueContainer: (baseStyles) => ({\n        ...baseStyles,\n        height: 'auto',\n        minHeight: '38px',\n        flexWrap: 'wrap',\n        whiteSpace: 'normal',\n    }),\n    multiValue: (baseStyles) => ({\n        ...baseStyles,\n        margin: '2px',\n    }),\n    control: (baseStyles) => ({\n        ...baseStyles,\n        height: 'auto',\n        minHeight: '38px',\n    }),\n    multiValueLabel: (baseStyles) => ({\n        ...baseStyles,\n        padding: '2px 6px',\n    }),\n};\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    isMobileView: boolean;\n    maxFileSize: number;\n    customProfileAttributeFields: UserPropertyField[];\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, options?: LogErrorOptions) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<ActionResult>;\n        getCustomProfileAttributeValues: (userID: string) => Promise<ActionResult<Record<string, string | string[]>>>;\n        saveCustomProfileAttribute: (userID: string, attributeID: string, attributeValue: string | string[]) => Promise<ActionResult<Record<string, string | string[]>>>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n    enableCustomProfileAttributes: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    pictureError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n    customAttributeValues: Record<string, string | string[]>;\n}\n\nexport class UserSettingsGeneralTab extends PureComponent<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.setupInitialState(props);\n    }\n\n    componentDidMount() {\n        if (this.props.enableCustomProfileAttributes && !this.props.user.custom_profile_attributes) {\n            this.props.actions.getCustomProfileAttributeValues(this.props.user.id);\n        }\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={defineMessage({id: 'user.settings.general.sending', defaultMessage: 'Sending'})}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    };\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    };\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    };\n\n    isEmailValid = () => {\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        if (email === '' || !isEmail(email)) {\n            return false;\n        }\n\n        if (email !== confirmEmail) {\n            return false;\n        }\n\n        if (currentPassword === '') {\n            return false;\n        }\n\n        return true;\n    };\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, {errorBarMode: LogErrorBarMode.Always});\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', sectionIsSaving: false});\n                }\n            });\n    };\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', pictureError: '', sectionIsSaving: false});\n        }\n    };\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({pictureError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({pictureError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    };\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    };\n\n    submitAttribute = async (settings: string[]) => {\n        const attributeID = settings[0];\n        const attributeField = this.props.customProfileAttributeFields.find((field) => field.id === attributeID);\n        if (attributeField === undefined) {\n            return;\n        }\n        let attributeValue: string | string[] = this.state.customAttributeValues?.[attributeID];\n\n        if (typeof attributeValue === 'string' && attributeField.attrs && attributeField.attrs.value_type) {\n            if (attributeField.attrs.value_type === 'email') {\n                if (attributeValue !== '' && !isEmail(attributeValue)) {\n                    this.setState({emailError: '', serverError: ''});\n                    return;\n                }\n            }\n            if (attributeField.attrs.value_type === 'url') {\n                if (attributeValue !== '') {\n                    const validURL = validHttpUrl(attributeValue);\n                    if (!validURL) {\n                        this.setState({emailError: '', serverError: ''});\n                        return;\n                    }\n                    let validLink = validURL.toString();\n                    if (validLink.endsWith('/')) {\n                        validLink = validLink.slice(0, -1);\n                    }\n                    attributeValue = validLink;\n                }\n            }\n        }\n        if (attributeField.type === 'multiselect' && !attributeValue) {\n            attributeValue = [];\n        }\n        trackEvent('settings', 'user_settings_update', {field: 'customAttributeValues-' + attributeID});\n\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.saveCustomProfileAttribute(this.props.user.id, attributeID, attributeValue as string).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.setState({customAttributeValues: {...this.state.customAttributeValues, ...data}});\n                } else if (err) {\n                    const serverError = err.message;\n                    this.setState({serverError, emailError: '', sectionIsSaving: false});\n                }\n            });\n    };\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    };\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    };\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    };\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    };\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    };\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    };\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({pictureError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    };\n\n    updateSelectAttribute = (selectedOption: OnChangeValue<SelectOption, boolean>, action: ActionMeta<SelectOption>, fieldID: string) => {\n        const attributeValues = {...this.state.customAttributeValues};\n\n        if (!selectedOption) {\n            attributeValues[fieldID] = '';\n        } else if (Array.isArray(selectedOption)) {\n            // Handle multi-select\n            attributeValues[fieldID] = selectedOption.\n                filter((option): option is SelectOption =>\n                    Boolean(option && Object.hasOwn(option, 'value'))).\n                map((option) => option.value);\n        } else if ('value' in selectedOption) {\n            // Handle single select\n            attributeValues[fieldID] = selectedOption.value || '';\n        } else {\n            attributeValues[fieldID] = '';\n        }\n\n        this.setState({customAttributeValues: attributeValues});\n    };\n\n    updateAttribute = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const attributeValues = Object.assign({}, this.state.customAttributeValues);\n        const id = e.target.id.substring(e.target.id.indexOf('_') + 1);\n        attributeValues[id] = e.target.value;\n        this.setState({customAttributeValues: attributeValues});\n    };\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {pictureError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    };\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n            customAttributeValues: user.custom_profile_attributes || {},\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'email';\n        let max = null;\n        if (active) {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <span className='as-bs-label col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </span>\n                            <div className='col-sm-7'>\n                                <span className='as-bs-label control-label word-break--all text-left'>{this.state.originalEmail}</span>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='primaryEmail'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <Input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    name='primaryEmail'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                    validate={(value) => {\n                                        if (value === '' || !isEmail(value as string)) {\n                                            return {\n                                                type: 'error',\n                                                value: formatMessage(holders.validEmail),\n                                            };\n                                        }\n                                        return undefined;\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='confirmEmail'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <Input\n                                    id='confirmEmail'\n                                    name='confirmEmail'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                    validate={(value) => {\n                                        if (this.state.email !== value) {\n                                            return {\n                                                type: 'error',\n                                                value: formatMessage(holders.emailMatch),\n                                            };\n                                        }\n                                        return undefined;\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label\n                                className='col-sm-5 control-label'\n                                htmlFor='currentPassword'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <Input\n                                    id='currentPassword'\n                                    name='currentPassword'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                    validate={(value) => {\n                                        if (value === '') {\n                                            return {\n                                                type: 'error',\n                                                value: formatMessage(holders.emptyPassword),\n                                            };\n                                        }\n                                        return undefined;\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.updateSection}\n                    isValid={this.isEmailValid()}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (this.props.user.auth_service === '') {\n            describe = this.props.user.email;\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGitlab'\n                    defaultMessage='Login done through GitLab ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGoogle'\n                    defaultMessage='Login done through Google Apps ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginOffice365'\n                    defaultMessage='Login done through Entra ID ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginLdap'\n                    defaultMessage='Login done through AD/LDAP ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginSaml'\n                    defaultMessage='Login done through SAML ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.general.email'\n                        defaultMessage='Email'\n                    />\n                }\n                describe={describe}\n                section={'email'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createNameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'name';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='firstName'\n                        >\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='firstName'\n                                name='firstName'\n                                autoFocus={true}\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='lastName'\n                        >\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='lastName'\n                                name='lastName'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n\n        if (user.first_name && user.last_name) {\n            describe = user.first_name + ' ' + user.last_name;\n        } else if (user.first_name) {\n            describe = user.first_name;\n        } else if (user.last_name) {\n            describe = user.last_name;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyName'\n                    defaultMessage=\"Click 'Edit' to add your full name\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyName'\n                        defaultMessage='Click to add your full name'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.fullName)}\n                describe={describe}\n                section={'name'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createNicknameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'nickname';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='nickname'\n                                name='nickname'\n                                autoFocus={true}\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.nickname) {\n            describe = user.nickname;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyNickname'\n                    defaultMessage=\"Click 'Edit' to add a nickname\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyNickname'\n                        defaultMessage='Click to add a nickname'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.nickname)}\n                describe={describe}\n                section={'nickname'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createUsernameSection = () => {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'username';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='username'\n                                name='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                                validate={(value) => {\n                                    const usernameError = Utils.isValidUsername(value as string);\n                                    if (usernameError) {\n                                        if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                                            return {\n                                                type: 'error',\n                                                value: formatMessage(holders.usernameReserved),\n                                            };\n                                        }\n                                        return {\n                                            type: 'error',\n                                            value: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}),\n                                        };\n                                    }\n                                    return undefined;\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                    isValid={Utils.isValidUsername(this.state.username) === undefined}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.username)}\n                describe={this.props.user.username}\n                section={'username'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createPositionSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'position';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='position'\n                                name='position'\n                                autoFocus={true}\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.position) {\n            describe = user.position;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyPosition'\n                    defaultMessage=\"Click 'Edit' to add your job title / position\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyPosition'\n                        defaultMessage='Click to add your job title / position'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.position)}\n                describe={describe}\n                section={'position'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createCustomAttributeSection = () => {\n        const {formatMessage} = this.props.intl;\n        if (this.props.customProfileAttributeFields == null) {\n            return <></>;\n        }\n\n        const attributeSections = this.props.customProfileAttributeFields.map((attribute) => {\n            const sectionName = 'customAttribute_' + attribute.id;\n            const active = this.props.activeSection === sectionName;\n            let max = null;\n\n            const getDisplayValue = (attributeValue: string | string[]) => {\n                if (!attributeValue || (!Array.isArray(attributeValue) && !attributeValue.length)) {\n                    return '';\n                }\n\n                if (attribute.type === 'select' || attribute.type === 'multiselect') {\n                    const attribOptions = attribute.attrs.options;\n                    if (!attribOptions) {\n                        return '';\n                    }\n                    if (Array.isArray(attributeValue)) {\n                        return attributeValue.map((value) => {\n                            const option = attribOptions.find((o) => o.id === value);\n                            if (option) {\n                                return {label: option?.name, value: option?.id};\n                            }\n                            return null;\n                        }).filter((value) => value != null);\n                    }\n\n                    // Handle single select\n                    const option = attribOptions.find((o) => o.id === attributeValue);\n                    if (option) {\n                        return {label: option?.name, value: option?.id};\n                    }\n                    return '';\n                }\n\n                return attributeValue as string;\n            };\n\n            if (active) {\n                const inputs = [];\n                let extraInfo: JSX.Element|string;\n                let submit = null;\n\n                const validate = () => {\n                    if (attribute.attrs?.value_type === 'email') {\n                        const value = this.state.customAttributeValues[attribute.id] as string;\n                        if (value && !isEmail(value)) {\n                            return {\n                                type: 'error' as const,\n                                value: formatMessage(holders.validEmail),\n                            };\n                        }\n                    }\n                    if (attribute.attrs?.value_type === 'url') {\n                        const value = this.state.customAttributeValues[attribute.id] as string;\n                        if (value) {\n                            const validURL = validHttpUrl(value);\n                            if (!validURL) {\n                                return {\n                                    type: 'error' as const,\n                                    value: formatMessage(holders.validUrl),\n                                };\n                            }\n                        }\n                    }\n                    return undefined;\n                };\n\n                if ((this.props.user.auth_service === Constants.LDAP_SERVICE && attribute.attrs?.ldap) ||\n                    (this.props.user.auth_service === Constants.SAML_SERVICE && attribute.attrs?.saml)) {\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.general.field_handled_externally'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </span>\n                    );\n                } else {\n                    let attributeLabel: JSX.Element | string = (\n                        attribute.name\n                    );\n                    if (this.props.isMobileView) {\n                        attributeLabel = '';\n                    }\n\n                    if (attribute.type === 'select' || attribute.type === 'multiselect') {\n                        const attribOptions: PropertyFieldOption[] = attribute.attrs!.options as PropertyFieldOption[];\n                        const opts = attribOptions.map((o) => {\n                            return {label: o.name, value: o.id} as SelectOption;\n                        });\n                        inputs.push(\n                            <ReactSelect\n                                isMulti={attribute.type === 'multiselect' ? true : undefined}\n                                key={sectionName}\n                                id={'customProfileAttribute_' + attribute.id}\n                                inputId={'customProfileAttribute_' + attribute.id + '_input'}\n                                className='react-select inlineSelect'\n                                classNamePrefix='react-select'\n                                options={opts}\n                                isClearable={true}\n                                isSearchable={false}\n                                isDisabled={false}\n                                placeholder={formatMessage({\n                                    id: 'user.settings.general.select',\n                                    defaultMessage: 'Select',\n                                })}\n                                components={{IndicatorSeparator: null}}\n                                styles={selectStyles}\n                                value={getDisplayValue(this.state.customAttributeValues[attribute.id]) as SelectOption}\n                                onChange={(v, a) => this.updateSelectAttribute(v, a, attribute.id)}\n                            />,\n                        );\n                    } else {\n                        const inputType = attribute.type as string;\n                        inputs.push(\n                            <div\n                                key={sectionName}\n                                className='form-group'\n                            >\n                                <label className='col-sm-5 control-label'>{attributeLabel}</label>\n                                <div className='col-sm-7'>\n                                    <Input\n                                        id={sectionName}\n                                        name={sectionName}\n                                        autoFocus={true}\n                                        type={inputType}\n                                        onChange={this.updateAttribute}\n                                        value={getDisplayValue(this.state.customAttributeValues[attribute.id]) as string}\n                                        maxLength={Constants.MAX_CUSTOM_ATTRIBUTE_LENGTH}\n                                        autoCapitalize='off'\n                                        onFocus={Utils.moveCursorToEnd}\n                                        aria-label={attribute.name}\n                                        validate={validate}\n                                    />\n                                </div>\n                            </div>,\n                        );\n                    }\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.general.attributeExtra'\n                                defaultMessage='This will be shown in your profile popover.'\n                            />\n                        </span>\n                    );\n\n                    submit = this.submitAttribute.bind(this, [attribute.id]);\n                }\n\n                max = (\n                    <SettingItemMax\n                        key={'settingItemMax_' + attribute.id}\n                        title={attribute.name}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.sectionIsSaving}\n                        serverError={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                        isValid={validate() === undefined}\n                    />\n                );\n            }\n            let describe: JSX.Element|string = '';\n            if (this.props.user.custom_profile_attributes?.[attribute.id]) {\n                const attributeValue = getDisplayValue(this.props.user.custom_profile_attributes?.[attribute.id]);\n                if (attributeValue) {\n                    if (typeof attributeValue === 'string') {\n                        describe = attributeValue;\n                    } else if (Array.isArray(attributeValue) && attributeValue.length > 0) {\n                        describe = <FormattedList value={attributeValue.map((attrib) => attrib?.label || null)}/>;\n                    } else if (!Array.isArray(attributeValue) && Object.hasOwn(attributeValue, 'label')) {\n                        describe = attributeValue.label || '';\n                    }\n                }\n            }\n            if (!describe) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyAttribute'\n                        defaultMessage=\"Click 'Edit' to add your custom attribute\"\n                    />\n                );\n                if (this.props.isMobileView) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyAttribute'\n                            defaultMessage='Click to add your custom attribute'\n                        />\n                    );\n                }\n            }\n\n            return (\n                <div key={sectionName}>\n                    <SettingItem\n                        key={'settingItem_' + attribute.id}\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={attribute.name}\n                        describe={describe}\n                        section={sectionName}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        });\n        return <>{attributeSections}</>;\n    };\n\n    createPictureSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'picture';\n        let max = null;\n\n        if (active) {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id='setting_picture.help.profile'\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            max = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={this.state.serverError}\n                    clientError={this.state.pictureError}\n                    updateSection={(e: React.MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        }\n\n        let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n        if (this.props.isMobileView) {\n            minMessage = formatMessage(holders.uploadImageMobile);\n        }\n        if (user.last_picture_update > 0) {\n            minMessage = (\n                <FormattedMessage\n                    id='user.settings.general.imageUpdated'\n                    defaultMessage='Image last updated {date}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={new Date(user.last_picture_update)}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <>\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                    max={max}\n                />\n                <div\n                    className='sr-only'\n                    aria-live='polite'\n                    aria-atomic='true'\n                >\n                    {this.renderPictureStatus()}\n                </div>\n            </>\n        );\n    };\n\n    renderPictureStatus = () => {\n        if (this.state.loadingPicture) {\n            return (\n                <FormattedMessage\n                    id='user.settings.general.picture.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else if (this.state.pictureFile) {\n            return (\n                <FormattedMessage\n                    id='user.settings.general.picture.selected'\n                    defaultMessage='Picture selected, ready to save'\n                />\n            );\n        } else if (this.submitActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.general.picture.uploaded'\n                    defaultMessage='Picture uploaded'\n                />\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const nameSection = this.createNameSection();\n        const nicknameSection = this.createNicknameSection();\n        const usernameSection = this.createUsernameSection();\n        const positionSection = this.createPositionSection();\n        const emailSection = this.createEmailSection();\n        const customAttributeSection = this.createCustomAttributeSection();\n        const pictureSection = this.createPictureSection();\n\n        return (\n            <div\n                id='profileSettings'\n                aria-labelledby='profileButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='generalSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.modal.profile'\n                                defaultMessage='Profile'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {customAttributeSection}\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n    saveCustomProfileAttribute,\n    getCustomProfileAttributeValues,\n} from 'mattermost-redux/actions/users';\nimport {getConfig, getCustomProfileAttributes, getFeatureFlagValue, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {isEnterpriseLicense} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsGeneralTab from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const customProfileAttributeFields = getCustomProfileAttributes(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    const license = getLicense(state);\n    const isEnterprise = isEnterpriseLicense(license);\n    const enableCustomProfileAttributes = isEnterprise && getFeatureFlagValue(state, 'CustomProfileAttributes') === 'true';\n\n    return {\n        isMobileView: getIsMobileView(state),\n        requireEmailVerification,\n        maxFileSize,\n        customProfileAttributeFields,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n        enableCustomProfileAttributes,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n            saveCustomProfileAttribute,\n            getCustomProfileAttributeValues,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, type ConnectedProps} from 'react-redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getSubscriptionProduct} from 'mattermost-redux/selectors/entities/cloud';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    isCollapsedThreadsEnabled,\n    isCollapsedThreadsEnabledForUser,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {isCallsEnabled, isCallsRingingEnabledOnServer} from 'selectors/calls';\n\nimport {isEnterpriseOrCloudOrSKUStarterFree} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_notifications';\nimport UserSettingsNotifications from './user_settings_notifications';\n\nconst mapStateToProps = (state: GlobalState, props: OwnProps) => {\n    // server config, related to server configuration, not the user\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    const license = getLicense(state);\n    const subscriptionProduct = getSubscriptionProduct(state);\n\n    const isEnterpriseReady = config.BuildEnterpriseReady === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: props.adminMode && props.userPreferences ? isCollapsedThreadsEnabledForUser(state, props.userPreferences) : isCollapsedThreadsEnabled(state),\n        isCallsRingingEnabled: isCallsEnabled(state, '0.17.0') && isCallsRingingEnabledOnServer(state),\n        isEnterpriseOrCloudOrSKUStarterFree: isEnterpriseOrCloudOrSKUStarterFree(license, subscriptionProduct, isEnterpriseReady),\n        isEnterpriseReady,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateMe,\n    patchUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport React, {useMemo} from 'react';\n\nimport SectionNotice from 'components/section_notice';\n\nimport type {PluginConfigurationAction} from 'types/plugins/user_settings';\n\nimport './plugin_action.scss';\n\ntype Props = {\n    action?: PluginConfigurationAction;\n};\n\nconst PluginAction = ({\n    action,\n}: Props) => {\n    const props = useMemo<ComponentProps<typeof SectionNotice>>(() => {\n        return action ? {\n            text: action.text,\n            title: action.title,\n            primaryButton: {\n                onClick: action?.onClick,\n                text: action?.buttonText,\n            },\n        } : {\n            text: '',\n            title: '',\n        };\n    }, [action]);\n\n    if (!action) {\n        return null;\n    }\n\n    return (\n        <div className={'pluginActionContainer'}>\n            <SectionNotice {...props}/>\n        </div>\n    );\n};\n\nexport default PluginAction;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getPluginPreferenceKey(pluginId: string) {\n    return `pp_${pluginId}`.slice(0, 32);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\n\nimport Markdown from 'components/markdown';\n\nimport type {PluginConfigurationRadioSettingOption} from 'types/plugins/user_settings';\n\ntype Props = {\n    selectedValue: string;\n    name: string;\n    option: PluginConfigurationRadioSettingOption;\n    onSelected: (v: string) => void;\n}\n\nconst markdownOptions = {mentionHighlight: false};\n\nconst RadioOption = ({\n    selectedValue,\n    name,\n    option,\n    onSelected,\n}: Props) => {\n    const onChange = useCallback(() => onSelected(option.value), [option.value]);\n    return (\n        <div className={'radio'}>\n            <label >\n                <input\n                    type='radio'\n                    name={name}\n                    checked={selectedValue === option.value}\n                    onChange={onChange}\n                />\n                {option.text}\n            </label>\n            <br/>\n            {option.helpText && (\n                <Markdown\n                    message={option.helpText}\n                    options={markdownOptions}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default RadioOption;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport Markdown from 'components/markdown';\n\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationRadioSetting} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioOption from './radio_option';\n\ntype Props = {\n    setting: PluginConfigurationRadioSetting;\n    pluginId: string;\n    informChange: (name: string, value: string) => void;\n}\n\nconst RadioInput = ({\n    setting,\n    pluginId,\n    informChange,\n}: Props) => {\n    const preference = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), setting.name, setting.default));\n    const [selectedValue, setSelectedValue] = useState(preference);\n\n    const onSelected = useCallback((value: string) => {\n        setSelectedValue(value);\n        informChange(setting.name, value);\n    }, [setting.name]);\n\n    return (\n        <fieldset key={setting.name}>\n            <legend className='form-legend hidden-label'>\n                {setting.title || setting.name}\n            </legend>\n            {setting.options.map((option) => (\n                <RadioOption\n                    key={option.value}\n                    name={setting.name}\n                    option={option}\n                    selectedValue={selectedValue}\n                    onSelected={onSelected}\n                />\n            ))}\n            {setting.helpText && (\n                <div className='mt-5'>\n                    <Markdown\n                        message={setting.helpText}\n                        options={{mentionHighlight: false}}\n                    />\n                </div>\n            )}\n        </fieldset>\n    );\n};\n\nexport default RadioInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationSection} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioInput from './radio';\n\ntype Props = {\n    pluginId: string;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    section: PluginConfigurationSection;\n}\n\nconst PluginSetting = ({\n    pluginId,\n    section,\n    activeSection,\n    updateSection,\n}: Props) => {\n    const dispatch = useDispatch();\n    const userId = useSelector(getCurrentUserId);\n    const preferenceMin = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), section.settings[0].name, section.settings[0].default));\n    const toUpdate = useRef<{[name: string]: string}>({});\n\n    const minDescribe = useMemo(() => {\n        const setting = section.settings[0];\n        if (setting.type === 'radio') {\n            return setting.options.find((v) => v.value === preferenceMin)?.text;\n        }\n\n        return undefined;\n    }, [section, preferenceMin]);\n\n    const onSettingChanged = useCallback((name: string, value: string) => {\n        toUpdate.current[name] = value;\n    }, []);\n\n    const updateSetting = useCallback(async () => {\n        const preferences = [];\n        for (const key of Object.keys(toUpdate.current)) {\n            preferences.push({\n                user_id: userId,\n                category: getPluginPreferenceKey(pluginId),\n                name: key,\n                value: toUpdate.current[key],\n            });\n        }\n\n        if (preferences.length) {\n            // Save preferences does not offer any await strategy or error handling\n            // so I am leaving this as is for now. We probably should update save\n            // preferences and handle any kind of error or network delay here.\n            dispatch(savePreferences(userId, preferences));\n            section.onSubmit?.(toUpdate.current);\n        }\n\n        updateSection('');\n    }, [pluginId, dispatch, section.onSubmit]);\n\n    useEffect(() => {\n        if (activeSection !== section.title) {\n            toUpdate.current = {};\n        }\n    }, [activeSection, section.title]);\n\n    const inputs = [];\n    for (const setting of section.settings) {\n        if (setting.type === 'radio') {\n            inputs.push(\n                <RadioInput\n                    key={setting.name}\n                    setting={setting}\n                    informChange={onSettingChanged}\n                    pluginId={pluginId}\n                />);\n        } else if (setting.type === 'custom') {\n            const CustomComponent = setting.component;\n            const inputEl = (\n                <PluggableErrorBoundary\n                    key={setting.name}\n                    pluginId={pluginId}\n                >\n                    <CustomComponent informChange={onSettingChanged}/>\n                </PluggableErrorBoundary>\n            );\n            inputs.push(inputEl);\n        }\n    }\n\n    if (!inputs.length) {\n        return null;\n    }\n\n    if (section.title === activeSection) {\n        return (\n            <SettingItemMax\n                title={section.title}\n                inputs={inputs}\n                submit={updateSetting}\n                updateSection={updateSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            section={section.title}\n            title={section.title}\n            updateSection={updateSection}\n            describe={minDescribe}\n            isDisabled={section.disabled}\n        />\n    );\n};\n\nexport default PluginSetting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport PluginAction from './plugin_action';\nimport PluginSetting from './plugin_setting';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\ntype Props = {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    settings: PluginConfiguration;\n}\n\nconst PluginTab = ({\n    activeSection,\n    closeModal,\n    collapseModal,\n    settings,\n    updateSection,\n}: Props) => {\n    const intl = useIntl();\n\n    const headerText = intl.formatMessage(\n        {id: 'user.settings.plugins.title', defaultMessage: '{pluginName} Settings'},\n        {pluginName: settings.uiName},\n    );\n\n    return (\n        <div\n            id={`${settings.id}Settings`}\n            aria-labelledby={`${settings.id}Button`}\n            role='tabpanel'\n        >\n            <SettingMobileHeader\n                closeModal={closeModal}\n                collapseModal={collapseModal}\n                text={headerText}\n            />\n            <div className='user-settings'>\n                <SettingDesktopHeader text={headerText}/>\n                <PluginAction action={settings.action}/>\n                <div className='divider-dark first'/>\n                {settings.sections.map((v) => {\n                    let sectionEl;\n                    if ('component' in v) {\n                        const CustomComponent = v.component;\n                        sectionEl = (\n                            <PluggableErrorBoundary\n                                pluginId={settings.id}\n                            >\n                                <CustomComponent/>\n                            </PluggableErrorBoundary>\n                        );\n                    } else {\n                        sectionEl = (\n                            <PluginSetting\n                                pluginId={settings.id}\n                                activeSection={activeSection}\n                                section={v}\n                                updateSection={updateSection}\n                            />\n                        );\n                    }\n\n                    return (\n                        <React.Fragment key={v.title}>\n                            {sectionEl}\n                            <div className='divider-light'/>\n                        </React.Fragment>\n                    );\n                },\n                )}\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n};\n\nexport default PluginTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Audit} from '@mattermost/types/audits';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\nimport './access_history_modal.scss';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: Audit[];\n    currentUserId: string;\n}\n\nconst AccessHistoryModal = ({\n    actions: {\n        getUserAudits,\n    },\n    currentUserId,\n    onHide,\n    userAudits,\n}: Props) => {\n    useEffect(() => {\n        getUserAudits(currentUserId, 0, 200);\n    }, [currentUserId, getUserAudits]);\n\n    let content;\n    if (userAudits.length === 0) {\n        content = (<LoadingScreen/>);\n    } else {\n        content = (\n            <AuditTable\n                audits={userAudits}\n                showIp={true}\n                showSession={true}\n            />\n        );\n    }\n\n    return (\n        <GenericModal\n            id='accessHistoryModal'\n            className='a11y__modal access-history-modal modal--scroll'\n            modalHeaderText={\n                <FormattedMessage\n                    id='access_history.title'\n                    defaultMessage='Access History'\n                />\n            }\n            modalHeaderTextId='accessHistoryModalLabel'\n            show={true}\n            onHide={onHide}\n            modalLocation='top'\n            isStacked={true}\n            compassDesign={true}\n            ariaLabelledby='accessHistoryModalLabel'\n        >\n            <div className='access-history-modal__body'>\n                {content}\n            </div>\n        </GenericModal>\n    );\n};\n\nexport default React.memo(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useIntl} from 'react-intl';\n\nimport {formatAsString} from 'utils/i18n';\n\ntype Props = {\n    devicePicture?: string;\n    deviceTitle: MessageDescriptor | string;\n}\n\nexport default function DeviceIcon(props: Props) {\n    const intl = useIntl();\n\n    return (\n        <i\n            className={props.devicePicture}\n            title={formatAsString(intl.formatMessage, props.deviceTitle)}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, defineMessages} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport DeviceIcon from './device_icon';\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: MessageDescriptor;\n    devicePlatform?: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    };\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    };\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let devicePlatform;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = messages.appleIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.iphoneNativeClassicApp'\n                    defaultMessage='iPhone Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.iphoneNativeApp'\n                        defaultMessage='iPhone Native App'\n                    />\n                );\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = messages.androidIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.androidNativeClassicApp'\n                    defaultMessage='Android Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.androidNativeApp'\n                        defaultMessage='Android Native App'\n                    />\n                );\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform,\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle: MessageDescriptor | string = '';\n\n        if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n            deviceTitle = sessionInfo.deviceTitle || deviceTitle;\n        } else {\n            if (currentSession.props.platform === 'Windows') {\n                devicePicture = 'fa fa-windows';\n                deviceTitle = messages.windowsIcon;\n            } else if (currentSession.props.platform === 'Macintosh' ||\n                currentSession.props.platform === 'iPhone') {\n                devicePicture = 'fa fa-apple';\n                deviceTitle = messages.appleIcon;\n            } else if (currentSession.props.platform === 'Linux') {\n                if (currentSession.props.os.indexOf('Android') >= 0) {\n                    devicePlatform = (\n                        <FormattedMessage\n                            id='activity_log_modal.android'\n                            defaultMessage='Android'\n                        />\n                    );\n                    devicePicture = 'fa fa-android';\n                    deviceTitle = messages.androidIcon;\n                } else {\n                    devicePicture = 'fa fa-linux';\n                    deviceTitle = messages.linuxIcon;\n                }\n            } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = messages.linuxIcon;\n            }\n\n            if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.desktop'\n                        defaultMessage='Native Desktop App'\n                    />\n                );\n            }\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <DeviceIcon\n                            devicePicture={devicePicture}\n                            deviceTitle={deviceTitle}\n                        />\n                        {devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    androidIcon: {\n        id: 'device_icons.android',\n        defaultMessage: 'Android Icon',\n    },\n    appleIcon: {\n        id: 'device_icons.apple',\n        defaultMessage: 'Apple Icon',\n    },\n    linuxIcon: {\n        id: 'device_icons.linux',\n        defaultMessage: 'Linux Icon',\n    },\n    windowsIcon: {\n        id: 'device_icons.windows',\n        defaultMessage: 'Windows Icon',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Session} from '@mattermost/types/sessions';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nimport './activity_log_modal.scss';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => void;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<ActionResult>;\n    };\n}\n\nconst ActivityLogModal = ({\n    currentUserId,\n    sessions,\n    locale,\n    onHide,\n    actions: {\n        getSessions,\n        revokeSession,\n    },\n}: Props) => {\n    const submitRevoke = useCallback((altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        revokeSession(currentUserId, altId).then(() => {\n            getSessions(currentUserId);\n        });\n    }, [currentUserId, revokeSession, getSessions]);\n\n    useEffect(() => {\n        getSessions(currentUserId);\n    }, [currentUserId, getSessions]);\n\n    const activityList = useMemo(() => {\n        return sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={locale}\n                    currentSession={currentSession}\n                    submitRevoke={submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n    }, [sessions, locale, submitRevoke]);\n\n    const content = <form>{activityList}</form>;\n\n    return (\n        <GenericModal\n            id='activityLogModal'\n            className='activity-log-modal modal--scroll'\n            modalHeaderText={\n                <FormattedMessage\n                    id='activity_log.activeSessions'\n                    defaultMessage='Active Sessions'\n                />\n            }\n            show={true}\n            onHide={onHide}\n            ariaLabelledby='activityLogModalLabel'\n            modalLocation='top'\n            isStacked={true}\n            compassDesign={true}\n        >\n            <div className='activity-log-modal__body'>\n                <p className='session-help-text'>\n                    <FormattedMessage\n                        id='activity_log.sessionsDescription'\n                        defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                    />\n                </p>\n                {content}\n            </div>\n        </GenericModal>\n    );\n};\n\nexport default React.memo(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ActivityLogModal from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        getHistory().push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            getHistory().push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\n\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserAccessToken, UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport ExternalLink from 'components/external_link';\nimport SaveButton from 'components/save_button';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {Constants, DeveloperLinks} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport {isMobile} from 'utils/user_agent';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        enableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        disableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: UserAccessToken | null;\n    tokenCreationState?: string;\n    tokenError?: React.ReactNode;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private minRef: React.RefObject<SettingItemMinComponent>;\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    };\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    };\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({\n                tokenError: (\n                    <FormattedMessage\n                        id='user.settings.tokens.nameRequired'\n                        defaultMessage='Please enter a description.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    };\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    };\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    };\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    };\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Keyboard.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    };\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <p>\n                        <FormattedMessage\n                            id='user.settings.tokens.confirmDelete.description'\n                            defaultMessage={'Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action.'}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='user.settings.tokens.confirmDelete.confirmation'\n                            defaultMessage={'Are you sure you want to delete the <b>{description}</b> token?'}\n                            values={{\n                                description: token.description,\n                                b: (chunks: string) => <b>{chunks}</b>,\n                            }}\n                        />\n                    </p>\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    };\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    };\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    };\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    };\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = (\n                <FormattedMessage\n                    id='user.settings.tokens.clickToEdit'\n                    defaultMessage=\"Click 'Edit' to manage your personal access tokens\"\n                />\n            );\n\n            return (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.tokens.title'\n                            defaultMessage='Personal Access Tokens'\n                        />\n                    }\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label\n                            className='col-sm-auto control-label pr-3'\n                            htmlFor='newTokenDescription'\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                id='newTokenDescription'\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-tertiary'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.tokens.title'\n                            defaultMessage='Personal Access Tokens'\n                        />\n                    }\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    isFullWidth={true}\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport Input from 'components/widgets/inputs/input/input';\n\nimport icon50 from 'images/icon50x50.png';\nimport Constants from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    allowedToSwitchToEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: PasswordConfig;\n    militaryTime: boolean;\n    actions: Actions;\n    intl: IntlShape;\n    deleteAccountLink?: string;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n\n        if (!this.isPasswordValid()) {\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            this.setState(state);\n        }\n    };\n\n    isPasswordValid = () => {\n        if (this.state.currentPassword === '') {\n            return false;\n        }\n\n        const {valid, error} = isValidPassword(\n            this.state.newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            return false;\n        }\n\n        if (this.state.newPassword !== this.state.confirmPassword) {\n            return false;\n        }\n\n        return true;\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        const inputs = [];\n        let submit;\n\n        const active = this.props.activeSection === SECTION_PASSWORD;\n        let max = null;\n        if (active) {\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='currentPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='currentPassword'\n                                name='currentPassword'\n                                autoFocus={true}\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.currentPassword',\n                                    defaultMessage: 'Current Password',\n                                })}\n                                validate={(value) => {\n                                    if (typeof value !== 'string' || value === '') {\n                                        return {\n                                            type: 'error' as const,\n                                            value: (\n                                                <FormattedMessage\n                                                    id='user.settings.security.currentPasswordError'\n                                                    defaultMessage='Please enter your current password.'\n                                                />\n                                            ),\n                                        };\n                                    }\n                                    return undefined;\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='newPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='newPassword'\n                                name='newPassword'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.newPassword',\n                                    defaultMessage: 'New Password',\n                                })}\n                                validate={(value) => {\n                                    const {valid, error} = isValidPassword(\n                                        value as string,\n                                        this.props.passwordConfig,\n                                    );\n                                    if (!valid) {\n                                        return {\n                                            type: 'error' as const,\n                                            value: error,\n                                        };\n                                    }\n                                    return undefined;\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label\n                            className='col-sm-5 control-label'\n                            htmlFor='confirmPassword'\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <Input\n                                id='confirmPassword'\n                                name='confirmPassword'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.retypePassword',\n                                    defaultMessage: 'Retype New Password',\n                                })}\n                                validate={(value) => {\n                                    if (typeof value !== 'string') {\n                                        return undefined;\n                                    }\n                                    if (this.state.newPassword !== value) {\n                                        return {\n                                            type: 'error' as const,\n                                            value: (\n                                                <FormattedMessage\n                                                    id='user.settings.security.passwordMatchError'\n                                                    defaultMessage='The new passwords you entered do not match.'\n                                                />\n                                            ),\n                                        };\n                                    }\n                                    return undefined;\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    isValid={this.isPasswordValid()}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Entra ID'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        const active = this.props.activeSection === SECTION_SIGNIN;\n        let max = null;\n        if (active) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Entra ID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.allowedToSwitchToEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({\n                        id: 'user.settings.security.method',\n                        defaultMessage: 'Sign-in Method',\n                    })}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Entra ID'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.method',\n                    defaultMessage: 'Sign-in Method',\n                })}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        const active = this.props.activeSection === SECTION_APPS;\n        let max = null;\n        if (active) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <ExternalLink\n                            href={app.homepage}\n                            location='user_settings_security'\n                        >\n                            {app.homepage}\n                        </ExternalLink>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    isFullWidth={true}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.oauthApps',\n                    defaultMessage: 'OAuth 2.0 Applications',\n                })}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.allowedToSwitchToEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div\n                id='securitySettings'\n                aria-labelledby='securityButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.security.title'\n                                defaultMessage='Security Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <i\n                            className='icon icon-clock-outline'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.viewHistory.icon',\n                                defaultMessage: 'Access History Icon',\n                            })}\n                            aria-hidden='true'\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <i\n                            className='icon icon-clock-outline'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.logoutActiveSessions.icon',\n                                defaultMessage: 'Active Sessions Icon',\n                            })}\n                            aria-hidden='true'\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                    {this.props.deleteAccountLink && (\n                        <>\n                            <p/>\n                            <ExternalLink\n                                className='security-links color--link mt-2 danger'\n                                href={this.props.deleteAccountLink}\n                                id='deleteAccountLink'\n                                location={window.location.href}\n                            >\n                                <i\n                                    className='icon icon-trash-can-outline'\n                                    title={this.props.intl.formatMessage({\n                                        id: 'user.settings.security.deleteAccountLink.icon',\n                                        defaultMessage: 'Delete Account Icon',\n                                    })}\n                                    aria-hidden='true'\n                                />\n                                <FormattedMessage\n                                    id='user.settings.security.deleteAccountLink'\n                                    defaultMessage='Delete Your Account'\n                                />\n                            </ExternalLink>\n                        </>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getConfig, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const allowedToSwitchToEmail = config.EnableSignUpWithEmail === 'true' && (config.EnableSignInWithEmail === 'true' || config.EnableSignInWithUsername === 'true');\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        allowedToSwitchToEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(state),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n        deleteAccountLink: config.DeleteAccountLink,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, StylesConfig} from 'react-select';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    handleChange = (selected: OnChangeValue<Limit, boolean>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    };\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            isClearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n} satisfies StylesConfig<Limit, boolean>;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './limit_visible_gms_dms';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const userPreferences = ownProps.adminMode && ownProps.userPreferences ? ownProps.userPreferences : undefined;\n    return {\n        userId: ownProps.adminMode ? ownProps.userId : getCurrentUserId(state),\n        dmGmLimit: getVisibleDmGmLimit(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n        a11yFocus(e.target);\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            // Only for type safety, won't actually happen\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {\n    shouldShowUnreadsCategory,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './show_unreads_category';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div\n            id='sidebarSettings'\n            aria-labelledby='sidebarButton'\n            role='tabpanel'\n        >\n            <SettingMobileHeader\n                closeModal={props.closeModal}\n                collapseModal={props.collapseModal}\n                text={\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                }\n            />\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <SettingDesktopHeader\n                    text={\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    }\n                />\n\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport PluginTab from './plugin';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section?: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    pluginSettings: {[tabName: string]: PluginConfiguration};\n    userPreferences?: PreferencesType;\n    adminMode?: boolean;\n};\n\nexport default function UserSettings(props: Props) {\n    if (props.activeTab === 'profile') {\n        return (\n            <div>\n                <GeneralTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    updateTab={props.updateTab}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'security') {\n        return (\n            <div>\n                <SecurityTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setRequireConfirm={props.setRequireConfirm}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'notifications') {\n        return (\n            <div>\n                <NotificationsTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'display') {\n        return (\n            <div>\n                <DisplayTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setRequireConfirm={props.setRequireConfirm}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'sidebar') {\n        return (\n            <div>\n                <SidebarTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userId={props.user.id}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'advanced') {\n        return (\n            <div>\n                <AdvancedTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    user={props.user}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab && props.pluginSettings[props.activeTab]) {\n        return (\n            <div>\n                <PluginTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    settings={props.pluginSettings[props.activeTab]}\n                />\n            </div>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode, useEffect, useState} from 'react';\n\nconst DEFAULT_MIN_LOADER_DURATION = 1000;\n\ntype Props = {\n    loading: boolean;\n    children: ReactNode;\n    className?: string;\n    onLoaded: () => void;\n}\n\nconst SmartLoader = ({loading, children, className, onLoaded}: Props) => {\n    const [timeoutFinished, setTimeoutFinished] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeoutFinished(true);\n        }, DEFAULT_MIN_LOADER_DURATION);\n    }, []);\n\n    useEffect(() => {\n        if (!loading && timeoutFinished) {\n            onLoaded();\n        }\n    }, [loading, timeoutFinished, onLoaded]);\n\n    return loading || !timeoutFinished ? (\n        <div className={`SmartLoader ${className}`}>\n            {children}\n        </div>\n    ) : null;\n};\n\nexport default SmartLoader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingsSidebar from 'components/settings_sidebar';\nimport UserSettings from 'components/user_settings';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport SmartLoader from 'components/widgets/smart_loader';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {stopTryNotificationRing} from 'utils/notification_sounds';\nimport {isValidUrl} from 'utils/url';\nimport {getDisplayName} from 'utils/utils';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport './user_settings_modal.scss';\n\nexport type OwnProps = {\n    userID?: string;\n    adminMode?: boolean;\n    isContentProductSettings: boolean;\n    userPreferences?: PreferencesType;\n    activeTab?: string;\n}\n\nexport type Props = OwnProps & {\n    intl: IntlShape;\n    pluginSettings: {[pluginId: string]: PluginConfiguration};\n    user?: UserProfile;\n    onExited: () => void;\n    focusOriginElement?: string;\n    actions: {\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        getUserPreferences: (userID: string) => Promise<unknown>;\n        getUser: (userID: string) => Promise<unknown>;\n    };\n}\n\ntype State = {\n    active_tab?: string;\n    active_section: string;\n    showConfirmModal: boolean;\n    enforceFocus?: boolean;\n    show: boolean;\n    resendStatus: string;\n    loading: boolean;\n};\n\nclass UserSettingsModal extends React.PureComponent<Props, State> {\n    private requireConfirm: boolean;\n    private customConfirmAction: ((handleConfirm: () => void) => void) | null;\n    private afterConfirm: (() => void) | null;\n    private modalBodyRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active_tab: props.activeTab ?? (props.isContentProductSettings ? 'notifications' : 'profile'),\n            active_section: '',\n            showConfirmModal: false,\n            enforceFocus: true,\n            show: true,\n            resendStatus: '',\n            loading: false,\n        };\n\n        this.requireConfirm = false;\n\n        // Used when settings want to override the default confirm modal with their own\n        // If set by a child, it will be called in place of showing the regular confirm\n        // modal. It will be passed a function to call on modal confirm\n        this.customConfirmAction = null;\n        this.afterConfirm = null;\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    handleResend = (email: string) => {\n        this.setState({resendStatus: 'sending'});\n\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n\n        if (this.props.adminMode && this.props.userID) {\n            this.setState({loading: true});\n\n            if (!this.props.userPreferences) {\n                this.props.actions.getUserPreferences(this.props.userID);\n            }\n            if (!this.props.user) {\n                this.props.actions.getUser(this.props.userID);\n            }\n        }\n\n        if (!this.props.adminMode) {\n            this.setState({loading: false});\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (this.state.active_tab !== prevState.active_tab) {\n            // Scroll to top if user changes tabs\n            if (this.modalBodyRef.current) {\n                const el = this.modalBodyRef.current as HTMLDivElement;\n                el.scrollTop = 0;\n            }\n        }\n    }\n\n    setLoadingFinished = () => {\n        this.setState({loading: false});\n    };\n\n    handleKeyDown = (e: KeyboardEvent) => {\n        // Ctrl+Shift+A (or Cmd+Shift+A) to close\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            e.preventDefault();\n            this.handleHide();\n        }\n    };\n\n    // Called when the close button is pressed on the main modal\n    handleHide = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(() => this.handleHide());\n            return;\n        }\n\n        // Cancel any ongoing notification sound, if any (from DesktopNotificationSettings)\n        stopTryNotificationRing();\n        this.setState({show: false});\n    };\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            active_tab: this.props.isContentProductSettings ? 'notifications' : 'profile',\n            active_section: '',\n        });\n        if (this.props.focusOriginElement) {\n            focusElement(this.props.focusOriginElement, true);\n        }\n        this.props.onExited();\n    };\n\n    // Called to hide the settings pane when on mobile\n    handleCollapse = () => {\n        const el = ReactDOM.findDOMNode(this.modalBodyRef.current) as HTMLDivElement;\n        el.closest('.modal-dialog')!.classList.remove('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    };\n\n    handleConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n        this.requireConfirm = false;\n        this.customConfirmAction = null;\n\n        if (this.afterConfirm) {\n            this.afterConfirm();\n            this.afterConfirm = null;\n        }\n    };\n\n    handleCancelConfirmation = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n        this.afterConfirm = null;\n    };\n\n    showConfirmModal = (afterConfirm: () => void) => {\n        if (afterConfirm) {\n            this.afterConfirm = afterConfirm;\n        }\n\n        if (this.customConfirmAction) {\n            this.customConfirmAction(this.handleConfirm);\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            enforceFocus: false,\n        });\n    };\n\n    // Called by settings tabs when their close button is pressed\n    closeModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.closeModal);\n        } else {\n            this.handleHide();\n        }\n    };\n\n    // Called by settings tabs when their back button is pressed\n    collapseModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.collapseModal);\n        } else {\n            this.handleCollapse();\n        }\n    };\n\n    updateTab = (tab?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateTab(tab, true));\n        } else {\n            this.setState({\n                active_tab: tab,\n                active_section: '',\n            });\n        }\n    };\n\n    updateSection = (section?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateSection(section, true));\n        } else {\n            this.setState({active_section: section ?? ''});\n        }\n    };\n\n    getUserSettingsTabs = () => {\n        const {formatMessage} = this.props.intl;\n        return [\n            {\n                name: 'notifications',\n                uiName: formatMessage({id: 'user.settings.modal.notifications', defaultMessage: 'Notifications'}),\n                icon: 'icon icon-bell-outline',\n                iconTitle: formatMessage({id: 'user.settings.notifications.icon', defaultMessage: 'Notification Settings Icon'}),\n            },\n            {\n                name: 'display',\n                uiName: formatMessage({id: 'user.settings.modal.display', defaultMessage: 'Display'}),\n                icon: 'icon icon-eye-outline',\n                iconTitle: formatMessage({id: 'user.settings.display.icon', defaultMessage: 'Display Settings Icon'}),\n            },\n            {\n                name: 'sidebar',\n                uiName: formatMessage({id: 'user.settings.modal.sidebar', defaultMessage: 'Sidebar'}),\n                icon: 'icon icon-dock-left',\n                iconTitle: formatMessage({id: 'user.settings.sidebar.icon', defaultMessage: 'Sidebar Settings Icon'}),\n            },\n            {\n                name: 'advanced',\n                uiName: formatMessage({id: 'user.settings.modal.advanced', defaultMessage: 'Advanced'}),\n                icon: 'icon icon-tune',\n                iconTitle: formatMessage({id: 'user.settings.advance.icon', defaultMessage: 'Advanced Settings Icon'}),\n            },\n        ];\n    };\n\n    getProfileSettingsTab = () => {\n        const {formatMessage} = this.props.intl;\n        return [\n            {\n                name: 'profile',\n                uiName: formatMessage({id: 'user.settings.modal.profile', defaultMessage: 'Profile'}),\n                icon: 'icon icon-settings-outline',\n                iconTitle: formatMessage({id: 'user.settings.profile.icon', defaultMessage: 'Profile Settings Icon'}),\n            },\n            {\n                name: 'security',\n                uiName: formatMessage({id: 'user.settings.modal.security', defaultMessage: 'Security'}),\n                icon: 'icon icon-lock-outline',\n                iconTitle: formatMessage({id: 'user.settings.security.icon', defaultMessage: 'Security Settings Icon'}),\n            },\n        ];\n    };\n\n    getPluginsSettingsTab = () => {\n        return Object.values(this.props.pluginSettings).map((v) => {\n            const useURL = v.icon && (isValidUrl(v.icon) || v.icon.startsWith('/'));\n            const className = v.icon ? `icon ${v.icon}` : 'icon icon-power-plug-outline';\n            return {\n                name: v.id,\n                uiName: v.uiName,\n                icon: useURL ? {url: v.icon!} : className,\n                iconTitle: v.uiName,\n            };\n        });\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        let modalTitle: string;\n        if (this.props.adminMode && this.props.user) {\n            modalTitle = formatMessage(\n                {id: 'userSettings.adminMode.modal_header', defaultMessage: \"{userDisplayName}'s Settings\"},\n                {userDisplayName: getDisplayName(this.props.user)},\n            );\n        } else if (this.props.isContentProductSettings) {\n            modalTitle = formatMessage({id: 'global_header.productSettings', defaultMessage: 'Settings'});\n        } else {\n            modalTitle = formatMessage({id: 'user.settings.modal.title', defaultMessage: 'Profile'});\n        }\n\n        const headerTitle = (\n            <div\n                className='UserSettingsModal__headerWrapper'\n                id='accountSettingsHeader'\n            >\n                <span\n                    id='accountSettingsModalLabel'\n                    className='modal-header__title'\n                >\n                    {modalTitle}\n                </span>\n                {this.props.adminMode && (\n                    <div className='adminModeBadge'>\n                        <FormattedMessage\n                            id='userSettings.adminMode.admin_mode_badge'\n                            defaultMessage='Admin Mode'\n                        />\n                    </div>\n                )}\n            </div>\n        );\n\n        return (\n            <GenericModal\n                id='accountSettingsModal'\n                className='a11y__modal settings-modal UserSettingsModal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                ariaLabel={modalTitle}\n                compassDesign={true}\n                enforceFocus={this.state.enforceFocus}\n                bodyPadding={false}\n                modalHeaderText={headerTitle}\n                modalLocation='top'\n                delayFocusTrap={true}\n            >\n                <div\n                    ref={this.modalBodyRef}\n                >\n                    {/* Admin Mode: wait for user + preferences */}\n                    {this.props.adminMode &&\n                        <SmartLoader\n                            loading={this.props.adminMode && (!this.props.userPreferences || !this.props.user)}\n                            className='loadingIndicator'\n                            onLoaded={this.setLoadingFinished}\n                        >\n                            <LoadingSpinner/>\n                        </SmartLoader>\n                    }\n\n                    {/* Show content only when not loading */}\n                    {!this.state.loading && this.props.user &&\n                        <>\n                            <div className='settings-table'>\n                                <div className='settings-links'>\n                                    <SettingsSidebar\n                                        tabs={this.props.isContentProductSettings ? this.getUserSettingsTabs() : this.getProfileSettingsTab()}\n                                        pluginTabs={this.props.isContentProductSettings ? this.getPluginsSettingsTab() : []}\n                                        activeTab={this.state.active_tab}\n                                        updateTab={this.updateTab}\n                                    />\n                                </div>\n                                <div className='settings-content minimize-settings'>\n                                    <UserSettings\n                                        activeTab={this.state.active_tab}\n                                        activeSection={this.state.active_section}\n                                        updateSection={this.updateSection}\n                                        updateTab={this.updateTab}\n                                        closeModal={this.closeModal}\n                                        collapseModal={this.collapseModal}\n                                        setRequireConfirm={(requireConfirm?: boolean, customConfirmAction?: () => () => void) => {\n                                            this.requireConfirm = requireConfirm || false;\n                                            this.customConfirmAction = customConfirmAction || null;\n                                        }}\n                                        pluginSettings={this.props.pluginSettings}\n                                        user={this.props.user}\n                                        adminMode={this.props.adminMode}\n                                        userPreferences={this.props.userPreferences}\n                                    />\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n\n                <ConfirmModal\n                    title={formatMessage({id: 'user.settings.modal.confirmTitle', defaultMessage: 'Discard Changes?'})}\n                    message={formatMessage({\n                        id: 'user.settings.modal.confirmMsg',\n                        defaultMessage: 'You have unsaved changes, are you sure you want to discard them?',\n                    })}\n                    confirmButtonText={formatMessage({\n                        id: 'user.settings.modal.confirmBtns',\n                        defaultMessage: 'Yes, Discard',\n                    })}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancelConfirmation}\n                />\n            </GenericModal>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsModal);\n"],"names":["CreatableSelect$1","forwardRef","props","ref","creatableProps","u","selectProps","S","_excluded","compareOption","option","arguments","length","undefined","accessors","candidate","String","toLowerCase","optionValue","getOptionValue","optionLabel","getOptionLabel","builtins","formatCreateLabel","inputValue","concat","isValidNewOption","selectValue","selectOptions","some","getNewOptionData","label","value","__isNew__","useCreatable","_ref","_ref$allowCreateWhile","allowCreateWhileLoading","_ref$createOptionPosi","createOptionPosition","_ref$formatCreateLabe","_ref$isValidNewOption","_ref$getNewOptionData","onCreateOption","_ref$options","options","propsOptions","propsOnChange","onChange","restSelectProps","_restSelectProps$getO","getOptionValue$1","g","_restSelectProps$getO2","getOptionLabel$1","isLoading","isMulti","name","newOption","useMemo","useCallback","newValue","actionMeta","action","valueArray","Array","isArray","newOptionData","newActionMeta","activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","SettingsSidebar","React","constructor","super","_defineProperty","tab","e","_closest","preventDefault","this","updateTab","target","closest","classList","add","isKeyPressed","Constants","KeyCodes","UP","DOWN","visibleTabs","getVisibleTabs","currentIndex","findIndex","t","nextIndex","targetTab","targetButton","buttonRefs","get","focus","Map","_this$props$pluginTab","tabs","filter","display","pluginTabs","renderTab","key","isActive","activeTab","icon","className","title","iconTitle","src","url","alt","newGroup","element","set","delete","id","classNames","active","onClick","handleClick","bind","onKeyDown","handleKeyDown","uiName","role","tabIndex","isMobileView","render","_this$props$pluginTab2","tabList","map","pluginTabList","visiblePluginTabs","FormattedMessage","defaultMessage","_pt","isRequired","connect","state","getIsMobileView","JoinLeaveSection","currentTarget","setState","joinLeaveState","a11yFocus","section","joinLeave","onUpdateSection","actions","userId","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","user_id","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","minRef","focusEditButton","_this$minRef$current","current","componentDidUpdate","prevProps","areAllSectionsInactive","SettingItemMax","inputs","type","AdvancedSections","JOIN_LEAVE","checked","handleOnChange","setting","submit","handleSubmit","saving","isSaving","serverError","updateSection","handleUpdateSection","SettingItemMin","describe","renderOnOffLabel","enableJoinLeaveMessage","getConfig","EnableJoinLeaveMessageByDefault","userPreference","adminMode","userPreferences","toString","bindActionCreators","PerformanceDebuggingSection","useRef","prevActiveRef","useEffect","_minRef$current","performanceDebuggingEnabled","settings","PerformanceDebuggingSectionExpanded","PerformanceDebuggingSectionCollapsed","Object","assign","propTypes","description","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","values","count","PERFORMANCE_DEBUGGING","setDisableClientPlugins","useState","setDisableTelemetry","setDisableTypingMessages","preferences","push","CATEGORY_PERFORMANCE_DEBUGGING","NAME_DISABLE_CLIENT_PLUGINS","NAME_DISABLE_TELEMETRY","NAME_DISABLE_TYPING_MESSAGES","mapDispatchToProps","getUserPreferences","getBool","isPerformanceDebuggingEnabled","AdvancedSettingsDisplay","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","sync_drafts","syncDrafts","UNREAD_SCROLL_POSITION","unreadScrollPosition","showDeactivateAccountModal","prevState","_objectSpread","async","user","forEach","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","defineMessages","default","mac","isMac","ctrlSendTitle","ctrlSendDesc","activeSection","max","updateSetting","SettingItem","unread_scroll_position","UNREAD_SCROLL_POSITION_START_FROM_LEFT","UNREAD_SCROLL_POSITION_START_FROM_NEWEST","renderUnreadScrollPositionLabel","SYNC_DRAFTS","getCtrlSendText","ctrlSendActive","renderCtrlEnterLabel","enabled","ctrlEnter","codeBlockCtrlEnter","ctrlSendSection","renderCtrlSendSection","formattingSection","renderFormattingSection","formattingSectionDivider","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","saveButtonClassName","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","ConfirmModal","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","unreadScrollPositionSection","renderUnreadScrollPositionSection","unreadScrollPositionSectionDivider","syncDraftsSection","syncDraftsSectionDivider","syncedDraftsAreAllowed","renderSyncDraftsSection","SettingMobileHeader","closeModal","collapseModal","text","SettingDesktopHeader","getAdvancedSettingsCategory","makeGetCategory","getUserAdvancedSettingsCategory","makeGetUserCategory","config","EnableUserDeactivation","advancedSettingsCategory","getCurrentUser","getUnreadScrollPositionPreference","ColorChooser","htmlFor","ColorInput","newColor","_props$onChange","call","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarTeamBarBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","color","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","JSON","parse","err","setThemeDefaults","stringify","stopPropagation","_this$textareaRef$cur","_this$textareaRef$cur2","textareaRef","setSelectionRange","_this$sidebarStylesHe","_this$sidebarStylesHe2","_this$sidebarStylesHe3","sidebarStylesHeaderRef","toggle","isAccordionOpen","contains","setAttribute","toggleSection","sidebarStylesRef","_this$centerChannelSt","_this$centerChannelSt2","_this$centerChannelSt3","centerChannelStylesHeaderRef","centerChannelStylesRef","_this$linkAndButtonSt","_this$linkAndButtonSt2","_this$linkAndButtonSt3","linkAndButtonStylesHeaderRef","linkAndButtonStylesRef","selectTheme","document","execCommand","showCopySuccess","copySuccess","querySelector","style","setTimeout","createRef","image","node","ontransitionend","overflowY","intl","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","index","_element$themes","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","defaultValue","onCodeThemeChange","WithTooltip","width","group","handleColorChange","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","toggleSidebarStyles","formatMessage","toggleCenterChannelStyles","toggleLinkAndButtonStyles","injectIntl","ThemeThumbnail","themeName","themeKey","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r","PremadeThemeChooser","allowedThemes","premadeThemes","hasAllowedThemes","trim","k","THEMES","hasOwn","_premadeTheme$type","indexOf","premadeTheme","activeClass","replace","changeOpacity","toTitleCase","AllowedThemes","split","ThemeSetting","_this$props$setRequir","_this$props","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","_this$props$setRequir2","_this$props2","themeChanged","field","applyTheme","_this$props$setRequir3","_this$props3","selected","resetFields","componentWillUnmount","DEFAULT_CODE_THEME","showAllTeamsCheckbox","displayCustom","custom","premade","themeUI","allowCustomThemes","updateType","ExternalLink","href","location","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","isFullWidth","getCurrentTeamId","getTheme","getThemePreferences","getMyTeamsCount","openModal","UserSettingsTheme","ManageLanguage","modalBody","ESCAPE","openMenu","remove","ENTER","selectedOption","locale","submitUser","patchUser","updateMe","res","Error","userLocale","locales","reactSelectContainer","componentDidMount","addEventListener","handleContainerKeyDown","removeEventListener","keys","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","interfaceLanguageLabelAria","input","ReactSelect","classNamePrefix","ariaLiveMessages","onFocus","focused","menuIsOpen","menuPortalTarget","body","styles","isClearable","setLanguage","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","link","msg","changeLanguage","getLanguages","ManageLanguages","ManageTimezones","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","timezone","updatedUser","timezoneLabel","selectedOptionValue","getBrowserTimezone","getTimezoneLabel","timezones","previousTimezone","timeOptions","timeObject","_previousTimezone","utc","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","manualTimezoneInput","isDisabled","containerStyle","changeTimezone","getCurrentTimezoneLabel","RenderEmoticonsAsEmoji","renderEmoticonsAsEmoji","setValue","setIsSaving","handleChange","submitPreference","pref","CATEGORY_DISPLAY_SETTINGS","RENDER_EMOTICONS_AS_EMOJI","changePreference","inputId","messageId","_ref2","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","colorizeUsernames","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","lastActiveDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","show_last_active","timePreference","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","colorizeUsernamesPreference","COLORIZE_USERNAMES","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","deepEqual","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","trackEvent","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLastActiveRadio","handleLinkPreviewRadio","createSection","_firstOption$radionBu","_secondOption$radionB","firstOption","secondOption","thirdOption","onSubmit","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","more","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","childOptionToShow","childOption","firstDisplay","secondDisplay","thirdSection","childOptionSection","thirdDisplay","childDisplay","collapseSection","defaultDisplay","defineMessage","linkPreviewSection","enableLinkPreviews","lastActiveSection","lastActiveTimeEnabled","submitLastActive","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","Boolean","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","localeName","getLanguageInfo","themeSection","oneClickReactionsOnPostsSection","enableThemeSelection","emojiPickerEnabled","renderEmoticonsAsEmojiSection","_user$props","getTimezoneForUserProfile","getCurrentTimezoneFull","automaticTimezoneNotSet","generateCurrentTimezoneLabel","getUserCurrentTimezone","AllowCustomThemes","EnableLinkPreviews","EnableThemeSelection","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","EnableLastActiveTime","getUser","isLanguageAvailable","DefaultClientLocale","AVAILABILITY_STATUS_ON_POSTS_DEFAULT","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLORIZE_USERNAMES_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","isCollapsedThreadsAllowed","CollapsedThreads","ALWAYS_ON","getCollapsedThreadsPreference","CLICK_TO_REPLY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","ONE_CLICK_REACTIONS_ENABLED_DEFAULT","RENDER_EMOTICONS_AS_EMOJI_DEFAULT","SettingPicture","Component","_this$props$updateSec","removeSrc","setDefaultSrc","confirmButton","_this$props$onRemove","loadingPicture","onRemove","_this$props$onSetDefa","onSetDefault","_this$props$onSubmit","_this$props4","focusFirstElement","_this$props$onFileCha","_this$props5","onFileChange","selectInput","click","file","previewBlob","URL","createObjectURL","reader","FileReader","onload","orientation","FileUtils","result","orientationStyles","readAsArrayBuffer","imageContext","imageStyles","backgroundImage","defaultImageSrc","_title","imageElement","handler","handleRemoveSrc","handleSetDefaultSrc","settingList","_this$settingList$cur","handleFileSelected","setPicture","revokeObjectURL","img","renderImg","imgRender","buttonRender","disableSaveButtonFocus","submitActive","accept","ACCEPT_STATIC_IMAGE","handleFileChange","handleInputFile","localizeMessage","handleSave","LoadingWrapper","loading","helpText","FormError","errors","clientError","handleCancel","holders","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","validUrl","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","selectStyles","valueContainer","baseStyles","minHeight","flexWrap","whiteSpace","multiValue","margin","control","multiValueLabel","padding","UserSettingsGeneralTab","PureComponent","email","resendStatus","showSpinner","sendVerificationEmail","handleEmailResend","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","password","isEmail","emailUpdated","sectionIsSaving","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","errorBarMode","LogErrorBarMode","Always","server_error_id","emailError","setDefaultProfileImage","pictureError","pictureFile","AcceptedProfileImageTypes","includes","size","maxFileSize","uploadProfileImage","_ref3","setupInitialState","_this$state$customAtt","attributeID","attributeField","customProfileAttributeFields","find","attributeValue","customAttributeValues","attrs","value_type","validURL","validHttpUrl","validLink","endsWith","slice","saveCustomProfileAttribute","_ref4","files","fieldID","attributeValues","substring","LDAP_SERVICE","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","SAML_SERVICE","samlFirstNameAttributeSet","samlLastNameAttributeSet","OAUTH_SERVICES","Input","autoFocus","updateFirstName","maxLength","MAX_FIRSTNAME_LENGTH","Utils","updateLastName","MAX_LASTNAME_LENGTH","notifClick","notifLink","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","MAX_USERNAME_LENGTH","updateUsername","validate","usernameError","ValidationErrors","RESERVED_NAME","min","MIN_USERNAME_LENGTH","submitUsername","isValid","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","attributeSections","attribute","_this$props$user$cust","sectionName","getDisplayValue","attribOptions","o","_attribute$attrs3","_attribute$attrs4","_attribute$attrs","_attribute$attrs2","ldap","saml","attributeLabel","opts","isSearchable","placeholder","components","IndicatorSeparator","v","updateSelectAttribute","inputType","updateAttribute","MAX_CUSTOM_ATTRIBUTE_LENGTH","submitAttribute","custom_profile_attributes","_this$props$user$cust2","FormattedList","attrib","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","date","FormattedDate","Date","day","month","year","renderPictureStatus","enableCustomProfileAttributes","getCustomProfileAttributeValues","originalEmail","createEmailSection","emailVerificationEnabled","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","OPENID_SERVICE","isEmailValid","nameSection","createNameSection","nicknameSection","createNicknameSection","usernameSection","createUsernameSection","positionSection","createPositionSection","emailSection","customAttributeSection","createCustomAttributeSection","pictureSection","createPictureSection","getCustomProfileAttributes","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","license","isEnterpriseLicense","getFeatureFlagValue","mapStateToProps","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","subscriptionProduct","getSubscriptionProduct","isEnterpriseReady","BuildEnterpriseReady","isCollapsedThreadsEnabled","isCollapsedThreadsEnabledForUser","isCallsRingingEnabled","isCallsEnabled","isCallsRingingEnabledOnServer","isEnterpriseOrCloudOrSKUStarterFree","UserSettingsNotifications","primaryButton","buttonText","SectionNotice","getPluginPreferenceKey","pluginId","markdownOptions","mentionHighlight","RadioOption","selectedValue","onSelected","Markdown","RadioInput","informChange","useSelector","getPreference","setSelectedValue","PluginSetting","useDispatch","preferenceMin","toUpdate","minDescribe","_setting$options$find","onSettingChanged","_section$onSubmit","CustomComponent","component","inputEl","PluggableErrorBoundary","PluginTab","headerText","useIntl","pluginName","PluginAction","sections","sectionEl","AccessHistoryModal","content","getUserAudits","onHide","userAudits","LoadingScreen","AuditTable","audits","showIp","showSession","GenericModal","modalHeaderText","modalHeaderTextId","modalLocation","isStacked","compassDesign","ariaLabelledby","getCurrentUserAudits","DeviceIcon","devicePicture","formatAsString","deviceTitle","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","create_at","getMonthLong","time","FormattedTime","hour","minute","os","browser","ActivityLog","submitRevoke","session","device_id","devicePlatform","appleIcon","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","androidIcon","PUSH_NOTIFY_ANDROID_REACT_NATIVE","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","windowsIcon","linuxIcon","ActivityLogModal","sessions","getSessions","revokeSession","altId","_e$target","modalContent","activityList","reduce","array","getUserSessions","getCurrentLocale","MfaSection","getHistory","mfaEnforced","mfaActive","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","Keyboard","confirmCreateToken","tokenId","userAccessTokens","chunks","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","getDerivedStateFromProps","nextProps","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","linkTokens","DeveloperLinks","PERSONAL_ACCESS_TOKENS","linkAPI","onKeyPress","saveTokenKeyPress","SaveButton","savingMessage","stopCreatingToken","WarningIcon","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","isPasswordValid","savingPassword","updateUserPassword","getMe","getDefaultState","valid","isValidPassword","passwordConfig","confirmPassword","appId","getAttribute","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","allowedToSwitchToEmail","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ToggleModalButton","modalId","dialogType","deleteAccountLink","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","DeleteAccountLink","limits","LimitVisibleGMsDMs","limit","CATEGORY_SIDEBAR_SETTINGS","LIMIT_VISIBLE_DMS_GMS","dmGmLimit","getVisibleDmGmLimit","ShowUnreadsCategory","SHOW_UNREAD_SECTION","showUnreadsCategory","shouldShowUnreadsCategory","UserSettingsSidebar","UserSettings","GeneralTab","NotificationsTab","DisplayTab","SidebarTab","AdvancedTab","pluginSettings","SmartLoader","children","onLoaded","timeoutFinished","setTimeoutFinished","UserSettingsModal","_props$activeTab","cmdOrCtrlPressed","shiftKey","A","handleHide","requireConfirm","stopTryNotificationRing","active_tab","isContentProductSettings","active_section","focusOriginElement","focusElement","onExited","ReactDOM","modalBodyRef","enforceFocus","customConfirmAction","afterConfirm","handleConfirm","handleCollapse","skipConfirm","useURL","isValidUrl","startsWith","userID","scrollTop","modalTitle","userDisplayName","getDisplayName","headerTitle","handleHidden","ariaLabel","bodyPadding","delayFocusTrap","setLoadingFinished","LoadingSpinner","getUserSettingsTabs","getProfileSettingsTab","getPluginsSettingsTab","handleCancelConfirmation"],"sourceRoot":""}