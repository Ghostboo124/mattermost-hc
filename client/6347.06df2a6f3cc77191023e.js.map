{"version":3,"file":"6347.06df2a6f3cc77191023e.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/icons/fa_back_icon.tsx","webpack://mattermost-webapp/./src/components/backstage/components/backstage_navbar.tsx","webpack://mattermost-webapp/./src/components/integrations/delete_integration_link/delete_integration_link.tsx","webpack://mattermost-webapp/./src/components/integrations/delete_integration_link/index.ts","webpack://mattermost-webapp/./src/components/emoji/emoji_list_item/delete_emoji_button.tsx","webpack://mattermost-webapp/./src/components/emoji/emoji_list_item/emoji_list_item.tsx","webpack://mattermost-webapp/./src/components/emoji/emoji_list_item/index.ts","webpack://mattermost-webapp/./src/components/emoji/emoji_list/emoji_list.tsx","webpack://mattermost-webapp/./src/components/emoji/emoji_list/index.ts","webpack://mattermost-webapp/./src/components/emoji/emoji_page.tsx","webpack://mattermost-webapp/./src/components/emoji/index.ts","webpack://mattermost-webapp/./src/components/backstage/components/backstage_header.tsx","webpack://mattermost-webapp/./src/components/emoji/add_emoji/add_emoji.tsx","webpack://mattermost-webapp/./src/components/emoji/add_emoji/index.ts","webpack://mattermost-webapp/./src/components/integrations/integration_option.tsx","webpack://mattermost-webapp/./src/components/integrations/integrations.tsx","webpack://mattermost-webapp/./src/components/integrations/index.ts","webpack://mattermost-webapp/./src/components/channel_select/channel_select.tsx","webpack://mattermost-webapp/./src/components/channel_select/index.ts","webpack://mattermost-webapp/./src/components/integrations/abstract_incoming_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/add_incoming_webhook/add_incoming_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/add_incoming_webhook/index.ts","webpack://mattermost-webapp/./src/components/integrations/abstract_oauth_app.tsx","webpack://mattermost-webapp/./src/components/integrations/add_oauth_app/add_oauth_app.tsx","webpack://mattermost-webapp/./src/components/integrations/add_oauth_app/index.ts","webpack://mattermost-webapp/./src/components/integrations/abstract_outgoing_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/add_outgoing_webhook/add_outgoing_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/add_outgoing_webhook/index.ts","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/actions/bots.ts","webpack://mattermost-webapp/./src/components/backstage/components/backstage_list.tsx","webpack://mattermost-webapp/./src/components/integrations/bots/bot.tsx","webpack://mattermost-webapp/./src/components/integrations/bots/bots.tsx","webpack://mattermost-webapp/./src/components/integrations/bots/index.ts","webpack://mattermost-webapp/./src/components/integrations/bots/add_bot/add_bot.tsx","webpack://mattermost-webapp/./src/components/integrations/bots/add_bot/index.ts","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/oauth_connection_audience_input.tsx","webpack://mattermost-webapp/./src/components/integrations/abstract_command.tsx","webpack://mattermost-webapp/./src/components/integrations/add_command/add_command.tsx","webpack://mattermost-webapp/./src/components/integrations/add_command/index.ts","webpack://mattermost-webapp/./src/components/copy_text.tsx","webpack://mattermost-webapp/./src/components/integrations/confirm_integration/confirm_integration.tsx","webpack://mattermost-webapp/./src/components/integrations/confirm_integration/index.ts","webpack://mattermost-webapp/./src/components/integrations/edit_command/edit_command.tsx","webpack://mattermost-webapp/./src/components/integrations/edit_command/index.ts","webpack://mattermost-webapp/./src/components/integrations/installed_command.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_commands/installed_commands.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_commands/index.ts","webpack://mattermost-webapp/./src/components/integrations/commands_container/commands_container.tsx","webpack://mattermost-webapp/./src/components/integrations/commands_container/index.ts","webpack://mattermost-webapp/./src/components/integrations/edit_incoming_webhook/edit_incoming_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/edit_incoming_webhook/index.ts","webpack://mattermost-webapp/./src/components/integrations/edit_oauth_app/edit_oauth_app.tsx","webpack://mattermost-webapp/./src/components/integrations/edit_oauth_app/index.ts","webpack://mattermost-webapp/./src/components/integrations/edit_outgoing_webhook/edit_outgoing_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/edit_outgoing_webhook/index.ts","webpack://mattermost-webapp/./src/components/integrations/installed_incoming_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_incoming_webhooks/installed_incoming_webhooks.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_incoming_webhooks/index.ts","webpack://mattermost-webapp/./src/components/integrations/installed_oauth_app/installed_oauth_app.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_oauth_app/index.ts","webpack://mattermost-webapp/./src/components/integrations/installed_oauth_apps/installed_oauth_apps.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_oauth_apps/index.ts","webpack://mattermost-webapp/./src/components/integrations/installed_outgoing_webhook.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_outgoing_webhooks/installed_outgoing_webhooks.tsx","webpack://mattermost-webapp/./src/components/integrations/installed_outgoing_webhooks/index.ts","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/abstract_outgoing_oauth_connection.tsx","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/add_outgoing_oauth_connection.tsx","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/edit_outgoing_oauth_connection.tsx","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/installed_outgoing_oauth_connection.tsx","webpack://mattermost-webapp/./src/components/integrations/outgoing_oauth_connections/installed_outgoing_oauth_connections.tsx","webpack://mattermost-webapp/./src/components/backstage/components/backstage_category.tsx","webpack://mattermost-webapp/./src/components/backstage/components/backstage_section.tsx","webpack://mattermost-webapp/./src/components/backstage/components/backstage_sidebar.tsx","webpack://mattermost-webapp/./src/components/backstage/backstage_controller.tsx","webpack://mattermost-webapp/./src/components/backstage/index.ts","webpack://mattermost-webapp/./src/components/form_error.tsx","webpack://mattermost-webapp/./src/components/localized_placeholder_input.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_next_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_previous_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_search_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_warning_icon.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/selectors/entities/bots.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function BackIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-angle-left'\n            title={formatMessage({id: 'generic_icons.back', defaultMessage: 'Back Icon'})}\n        />\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\ntype Props = {\n    team?: Team;\n    siteName?: string;\n}\n\nconst BackstageNavbar = ({team, siteName}: Props) => {\n    const teamExists = team?.delete_at === 0;\n\n    return (\n        <div className='backstage-navbar'>\n            <BlockableLink\n                className='backstage-navbar__back'\n                to={`/${teamExists ? team?.name : ''}`}\n            >\n                <BackIcon/>\n                <span>\n                    {teamExists ? (\n                        <FormattedMessage\n                            id='backstage_navbar.backToMattermost'\n                            defaultMessage='Back to {siteName}'\n                            values={{siteName: siteName ?? team?.name}}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='backstage_navbar.back'\n                            defaultMessage='Back'\n                        />\n                    )}\n                </span>\n            </BlockableLink>\n        </div>\n    );\n};\n\nexport default BackstageNavbar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {openModal as openModalAction} from 'actions/views/modals';\n\nimport ConfirmModalRedux from 'components/confirm_modal_redux';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst ModalId = 'delete_integration_confirm';\n\ntype Props = {\n    confirmButtonText?: React.ReactNode;\n    linkText?: React.ReactNode;\n    subtitleText?: React.ReactNode;\n    modalMessage?: React.ReactNode;\n    modalTitle?: React.ReactNode;\n    onDelete: () => void;\n    openModal: typeof openModalAction;\n};\n\nexport default function DeleteIntegrationLink(props: Props) {\n    const {\n        confirmButtonText = (\n            <FormattedMessage\n                id='integrations.delete.confirm.button'\n                defaultMessage='Yes, delete it'\n            />\n        ),\n        linkText = (\n            <FormattedMessage\n                id='installed_integrations.delete'\n                defaultMessage='Delete'\n            />\n        ),\n        modalMessage,\n        modalTitle = (\n            <FormattedMessage\n                id='integrations.delete.confirm.title'\n                defaultMessage='Delete Integration'\n            />\n        ),\n        onDelete,\n        openModal,\n    } = props;\n\n    const onClick = useCallback(() => {\n        openModal({\n            modalId: ModalId,\n            dialogProps: {\n                confirmButtonText,\n                confirmButtonClass: 'btn btn-danger',\n                modalClass: 'integrations-backstage-modal',\n                message: (\n                    <>\n                        {props.subtitleText && (\n                            <p>\n                                {props.subtitleText}\n                            </p>\n                        )}\n                        <div className='alert alert-danger'>\n                            <WarningIcon additionalClassName='mr-1'/>\n                            <strong>\n                                {props.modalMessage}\n                            </strong>\n                        </div>\n                    </>\n                ),\n                onConfirm: onDelete,\n                title: modalTitle,\n            },\n            dialogType: ConfirmModalRedux,\n        });\n    }, [confirmButtonText, modalMessage, modalTitle, onDelete, openModal]);\n\n    return (\n        <button\n            className='color--link style--none'\n            onClick={onClick}\n        >\n            {linkText}\n        </button>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nconst mapDispatchToProps = {\n    openModal,\n};\n\nexport default connect(null, mapDispatchToProps)(DeleteIntegrationLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport DeleteIntegrationLink from 'components/integrations/delete_integration_link';\n\ntype Props = {\n    onDelete: () => void;\n}\n\nexport default function DeleteEmojiButton(props: Props) {\n    return (\n        <DeleteIntegrationLink\n            confirmButtonText={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.button'\n                    defaultMessage='Delete'\n                />\n            }\n            linkText={\n                <FormattedMessage\n                    id='emoji_list.delete'\n                    defaultMessage='Delete'\n                />\n            }\n            modalMessage={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.msg'\n                    defaultMessage='This action permanently deletes the custom emoji. Are you sure you want to delete it?'\n                />\n            }\n            modalTitle={\n                <FormattedMessage\n                    id='emoji_list.delete.confirm.title'\n                    defaultMessage='Delete Custom Emoji'\n                />\n            }\n            onDelete={props.onDelete}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useMemo} from 'react';\n\nimport type {CustomEmoji} from '@mattermost/types/emojis';\n\nimport {Client4} from 'mattermost-redux/client';\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nimport DeleteEmojiButton from './delete_emoji_button';\n\nexport type Props = {\n    emoji?: CustomEmoji;\n    emojiId?: string;\n    currentUserId?: string;\n    creatorDisplayName?: string;\n    creatorUsername?: string;\n    onDelete?: (emojiId: string) => void;\n    actions: {\n        deleteCustomEmoji: (emojiId: string) => void;\n    };\n};\n\nconst DELETE_PERMISSION = [Permissions.DELETE_EMOJIS];\nconst DELETE_OTHER_PERMISSION = [Permissions.DELETE_OTHERS_EMOJIS];\n\nconst EmojiListItem = ({\n    actions: {\n        deleteCustomEmoji,\n    },\n    onDelete,\n    emoji = {} as CustomEmoji,\n    creatorUsername,\n    currentUserId = '',\n    creatorDisplayName = '',\n}: Props) => {\n    const emoticonStyle = useMemo(() => {\n        return {backgroundImage: `url(${Client4.getCustomEmojiImageUrl(emoji.id)})`};\n    }, [emoji.id]);\n\n    const handleDelete = useCallback((): void => {\n        if (!emoji) {\n            return;\n        }\n        if (onDelete) {\n            onDelete(emoji.id);\n        }\n        deleteCustomEmoji(emoji.id);\n    }, [deleteCustomEmoji, emoji, onDelete]);\n\n    let displayName = creatorDisplayName;\n    if (creatorUsername && creatorUsername !== displayName) {\n        displayName += ' (@' + creatorUsername + ')';\n    }\n\n    let deleteButton = <DeleteEmojiButton onDelete={handleDelete}/>;\n\n    if (emoji.creator_id === currentUserId) {\n        deleteButton = (\n            <AnyTeamPermissionGate permissions={DELETE_PERMISSION}>\n                {deleteButton}\n            </AnyTeamPermissionGate>\n        );\n    } else {\n        deleteButton = (\n            <AnyTeamPermissionGate permissions={DELETE_PERMISSION}>\n                <AnyTeamPermissionGate permissions={DELETE_OTHER_PERMISSION}>\n                    {deleteButton}\n                </AnyTeamPermissionGate>\n            </AnyTeamPermissionGate>\n        );\n    }\n\n    return (\n        <tr className='backstage-list__item'>\n            <td className='emoji-list__name'>{':' + emoji.name + ':'}</td>\n            <td className='emoji-list__image'>\n                <span\n                    className='emoticon'\n                    style={emoticonStyle}\n                />\n            </td>\n            <td className='emoji-list__creator'>{displayName}</td>\n            <td className='emoji-list-item_actions'>{deleteButton}</td>\n        </tr>\n    );\n};\n\nexport default React.memo(EmojiListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {deleteCustomEmoji} from 'mattermost-redux/actions/emojis';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport EmojiListItem from './emoji_list_item';\nimport type {Props} from './emoji_list_item';\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const emoji = state.entities.emojis.customEmoji[ownProps.emojiId!];\n    const creator = getUser(state, emoji.creator_id);\n\n    return {\n        emoji,\n        creatorDisplayName: getDisplayNameByUser(state, creator),\n        creatorUsername: creator ? creator.username : '',\n        currentUserId: getCurrentUserId(state),\n        currentTeam: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent, ChangeEventHandler} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport type {CustomEmoji} from '@mattermost/types/emojis';\n\nimport {deleteCustomEmoji} from 'mattermost-redux/actions/emojis';\nimport {Emoji} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport EmojiListItem from 'components/emoji/emoji_list_item';\nimport LoadingScreen from 'components/loading_screen';\nimport LocalizedPlaceholderInput from 'components/localized_placeholder_input';\nimport SaveButton from 'components/save_button';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport SearchIcon from 'components/widgets/icons/fa_search_icon';\n\nconst EMOJI_PER_PAGE = 50;\nconst EMOJI_SEARCH_DELAY_MILLISECONDS = 200;\n\nexport interface Props {\n\n    /**\n     * Custom emojis on the system.\n     */\n    emojiIds: string[];\n\n    /**\n     * Function to scroll list to top.\n     */\n    scrollToTop: () => void;\n    actions: {\n\n        /**\n         * Get pages of custom emojis.\n         */\n        getCustomEmojis: (page?: number, perPage?: number, sort?: string, loadUsers?: boolean) => Promise<ActionResult<CustomEmoji[]>>;\n\n        /**\n         * Search custom emojis.\n         */\n        searchCustomEmojis: (term: string, options: any, loadUsers: boolean) => Promise<ActionResult<CustomEmoji[]>>;\n    };\n\n}\n\ninterface State {\n    loading: boolean;\n    page: number;\n    nextLoading: boolean;\n    searchEmojis: string[] | null;\n    missingPages: boolean;\n}\n\nexport default class EmojiList extends React.PureComponent<Props, State> {\n    private searchTimeout: NodeJS.Timeout | null;\n\n    constructor(props: Props) {\n        super(props);\n        this.searchTimeout = null;\n        this.state = {\n            loading: true,\n            page: 0,\n            nextLoading: false,\n            searchEmojis: null,\n            missingPages: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        this.props.actions.getCustomEmojis(0, EMOJI_PER_PAGE + 1, Emoji.SORT_BY_NAME, true).\n            then(({data}: ActionResult<CustomEmoji[]>) => {\n                this.setState({loading: false});\n                if (data && data.length < EMOJI_PER_PAGE) {\n                    this.setState({missingPages: false});\n                }\n            });\n    }\n\n    nextPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const next = this.state.page + 1;\n        this.setState({nextLoading: true});\n        this.props.actions.getCustomEmojis(next, EMOJI_PER_PAGE, Emoji.SORT_BY_NAME, true).\n            then(({data}: ActionResult<CustomEmoji[]>) => {\n                this.setState({page: next, nextLoading: false});\n                if (data && data.length < EMOJI_PER_PAGE) {\n                    this.setState({missingPages: false});\n                }\n\n                this.props.scrollToTop();\n            });\n    };\n    previousPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            page: this.state.page - 1,\n            nextLoading: false,\n            missingPages: true,\n        });\n\n        this.props.scrollToTop();\n    };\n\n    onSearchChange: ChangeEventHandler = (e: ChangeEvent): void => {\n        if (!e || !e.target) {\n            return;\n        }\n\n        const term = (e.target as HTMLInputElement).value || '';\n\n        clearTimeout(this.searchTimeout!);\n\n        this.searchTimeout = setTimeout(async () => {\n            if (term.trim() === '') {\n                this.setState({searchEmojis: null, page: 0});\n                return;\n            }\n\n            this.setState({loading: true});\n\n            const {data} = await this.props.actions.searchCustomEmojis(\n                term,\n                {},\n                true,\n            );\n\n            if (data) {\n                this.setState({\n                    searchEmojis: data.map((em: CustomEmoji) => em.id),\n                    loading: false,\n                });\n            } else {\n                this.setState({searchEmojis: [], loading: false});\n            }\n        }, EMOJI_SEARCH_DELAY_MILLISECONDS);\n    };\n\n    deleteFromSearch = (emojiId: string): void => {\n        if (!this.state.searchEmojis) {\n            return;\n        }\n\n        const index = this.state.searchEmojis.indexOf(emojiId);\n\n        if (index < 0) {\n            return;\n        }\n\n        const newSearchEmojis = [...this.state.searchEmojis];\n        newSearchEmojis.splice(index, 1);\n        this.setState({searchEmojis: newSearchEmojis});\n    };\n\n    render(): JSX.Element {\n        const searchEmojis = this.state.searchEmojis;\n        const emojis = [];\n        let nextButton;\n        let previousButton;\n\n        if (this.state.loading) {\n            emojis.push(\n                <tr\n                    key='loading'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan={4}>\n                        <LoadingScreen key='loading'/>\n                    </td>\n                </tr>,\n            );\n        } else if (\n            this.props.emojiIds.length === 0 ||\n            (searchEmojis && searchEmojis.length === 0)\n        ) {\n            emojis.push(\n                <tr\n                    key='empty'\n                    className='backstage-list__item backstage-list__empty'\n                >\n                    <td colSpan={4}>\n                        <FormattedMessage\n                            id='emoji_list.empty'\n                            defaultMessage='No custom emoji found'\n                        />\n                    </td>\n                </tr>,\n            );\n        } else if (searchEmojis) {\n            searchEmojis.forEach((emojiId: string) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_search_item' + emojiId}\n                        emojiId={emojiId}\n                        onDelete={this.deleteFromSearch}\n                        actions={{deleteCustomEmoji}}\n                    />,\n                );\n            });\n        } else {\n            const pageStart = this.state.page * EMOJI_PER_PAGE;\n            const pageEnd = pageStart + EMOJI_PER_PAGE;\n            const emojisToDisplay = this.props.emojiIds.slice(pageStart, pageEnd);\n\n            emojisToDisplay.forEach((emojiId: string) => {\n                emojis.push(\n                    <EmojiListItem\n                        key={'emoji_list_item' + emojiId}\n                        emojiId={emojiId}\n                        actions={{deleteCustomEmoji}}\n                    />,\n                );\n            });\n\n            if (this.state.missingPages) {\n                const buttonContents = (\n                    <span>\n                        <FormattedMessage\n                            id='filtered_user_list.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon additionalClassName='ml-2'/>\n                    </span>\n                );\n\n                nextButton = (\n                    <SaveButton\n                        btnClass='btn-tertiary'\n                        extraClasses='pull-right'\n                        onClick={this.nextPage}\n                        saving={this.state.nextLoading}\n                        disabled={this.state.nextLoading}\n                        defaultMessage={buttonContents}\n                        savingMessage={buttonContents}\n                    />\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-tertiary'\n                        onClick={this.previousPage}\n                    >\n                        <PreviousIcon additionalClassName='mr-2'/>\n                        <FormattedMessage\n                            id='filtered_user_list.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        return (\n            <div>\n                <div className='backstage-filters'>\n                    <div className='backstage-filter__search'>\n                        <SearchIcon/>\n                        <LocalizedPlaceholderInput\n                            type='search'\n                            className='form-control'\n                            placeholder={defineMessage({id: 'emoji_list.search', defaultMessage: 'Search Custom Emoji'})}\n                            onChange={this.onSearchChange}\n                            style={style.search}\n                        />\n                    </div>\n                </div>\n                <span className='backstage-list__help'>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help'\n                            defaultMessage=\"Custom emoji are available to everyone on your server. Type ':' followed by two characters in a message box to bring up the emoji selection menu.\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='emoji_list.help2'\n                            defaultMessage=\"Tip: If you add #, ##, or ### as the first character on a new line containing emoji, you can use larger sized emoji. To try it out, send a message such as: '# :smile:'.\"\n                        />\n                    </p>\n                </span>\n                <div className='backstage-list'>\n                    <table className='emoji-list__table'>\n                        <thead>\n                            <tr className='backstage-list__item emoji-list__table-header'>\n                                <th className='emoji-list__name'>\n                                    <FormattedMessage\n                                        id='emoji_list.name'\n                                        defaultMessage='Name'\n                                    />\n                                </th>\n                                <th className='emoji-list__image'>\n                                    <FormattedMessage\n                                        id='emoji_list.image'\n                                        defaultMessage='Image'\n                                    />\n                                </th>\n                                <th className='emoji-list__creator'>\n                                    <FormattedMessage\n                                        id='emoji_list.creator'\n                                        defaultMessage='Creator'\n                                    />\n                                </th>\n                                <th className='emoji-list_actions'>\n                                    <FormattedMessage\n                                        id='emoji_list.actions'\n                                        defaultMessage='Actions'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>{emojis}</tbody>\n                    </table>\n                </div>\n                <div className='filter-controls pt-3'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    search: {flexGrow: 0, flexShrink: 0},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getCustomEmojis, searchCustomEmojis} from 'mattermost-redux/actions/emojis';\nimport {getCustomEmojiIdsSortedByName} from 'mattermost-redux/selectors/entities/emojis';\n\nimport EmojiList from './emoji_list';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        emojiIds: getCustomEmojiIdsSortedByName(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomEmojis,\n            searchCustomEmojis,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport AnyTeamPermissionGate from 'components/permissions_gates/any_team_permission_gate';\n\nimport * as Utils from 'utils/utils';\n\nimport EmojiList from './emoji_list';\n\ntype Props = {\n    teamName?: string;\n    teamDisplayName?: string;\n    siteName?: string;\n    scrollToTop(): void;\n    currentTheme: Theme;\n    actions: {\n        loadRolesIfNeeded(roles: Iterable<string>): void;\n    };\n}\n\nconst CREATE_EMOJIS_PERMISSIONS = [Permissions.CREATE_EMOJIS];\nconst ROLES = ['system_admin', 'team_admin', 'system_user', 'team_user'];\n\nexport default function EmojiPage({\n    teamDisplayName = '',\n    teamName = '',\n    siteName = '',\n    scrollToTop,\n    currentTheme,\n    actions,\n}: Props) {\n    const intl = useIntl();\n\n    useEffect(() => {\n        updateTitle();\n        actions.loadRolesIfNeeded(ROLES);\n        Utils.resetTheme();\n\n        return () => {\n            Utils.applyTheme(currentTheme);\n        };\n    }, []);\n\n    useEffect(() => {\n        updateTitle();\n    }, [siteName]);\n\n    const updateTitle = () => {\n        document.title = intl.formatMessage({id: 'custom_emoji.header', defaultMessage: 'Custom Emoji'}) + ' - ' + teamDisplayName + ' ' + siteName;\n    };\n\n    return (\n        <div className='backstage-content emoji-list'>\n            <div className='backstage-header'>\n                <h1>\n                    <FormattedMessage\n                        id='emoji_list.header'\n                        defaultMessage='Custom Emoji'\n                    />\n                </h1>\n                <AnyTeamPermissionGate permissions={CREATE_EMOJIS_PERMISSIONS}>\n                    <Link\n                        className='add-link'\n                        to={'/' + teamName + '/emoji/add'}\n                    >\n                        <button\n                            type='button'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='emoji_list.add'\n                                defaultMessage='Add Custom Emoji'\n                            />\n                        </button>\n                    </Link>\n                </AnyTeamPermissionGate>\n            </div>\n            <EmojiList scrollToTop={scrollToTop}/>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport EmojiPage from 'components/emoji/emoji_page';\n\nimport type {GlobalState} from 'types/store';\n\nfunction mapStateToProps(state: GlobalState) {\n    const team = getCurrentTeam(state);\n\n    return {\n        teamName: team?.name,\n        teamDisplayName: team?.display_name,\n        siteName: state.entities.general.config.SiteName,\n        currentTheme: getTheme(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmojiPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    children?: ReactNode;\n}\n\nconst BackstageHeader = ({children}: Props) => {\n    const {formatMessage} = useIntl();\n    const childrenElements: ReactNode[] = [];\n\n    React.Children.forEach(children, (child, index) => {\n        if (index !== 0) {\n            childrenElements.push(\n                <span\n                    key={'divider' + index}\n                    className='backstage-header__divider'\n                >\n                    <i\n                        className='fa fa-angle-right'\n                        title={formatMessage({id: 'generic_icons.breadcrumb', defaultMessage: 'Breadcrumb Icon'})}\n                    />\n                </span>,\n            );\n        }\n\n        childrenElements.push(child);\n    });\n\n    return (\n        <div className='backstage-header'>\n            <h1>\n                {childrenElements}\n            </h1>\n        </div>\n    );\n};\n\nexport default BackstageHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent, FormEvent, SyntheticEvent} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {CustomEmoji} from '@mattermost/types/emojis';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\n\nimport {getHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\nimport type EmojiMap from 'utils/emoji_map';\n\nexport interface AddEmojiProps {\n    actions: {\n        createCustomEmoji: (term: CustomEmoji, imageData: File) => Promise<ActionResult>;\n    };\n    emojiMap: EmojiMap;\n    user: UserProfile;\n    team: Team;\n}\n\ntype EmojiCreateArgs = {\n    creator_id: string;\n    name: string;\n};\n\ntype AddEmojiState = {\n    name: string;\n    image: File | null;\n    imageUrl: string | ArrayBuffer | null;\n    saving: boolean;\n    error: React.ReactNode;\n};\n\ninterface AddErrorResponse {\n    error: Error;\n}\n\ninterface AddEmojiResponse {\n    data: CustomEmoji;\n}\n\nexport default class AddEmoji extends React.PureComponent<AddEmojiProps, AddEmojiState> {\n    constructor(props: AddEmojiProps) {\n        super(props);\n\n        this.state = {\n            name: '',\n            image: null,\n            imageUrl: '',\n            saving: false,\n            error: null,\n        };\n    }\n\n    handleFormSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {\n        return this.handleSubmit(e);\n    };\n\n    handleSaveButtonClick = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): Promise<void> => {\n        return this.handleSubmit(e);\n    };\n\n    handleSubmit = async (e: SyntheticEvent<unknown>): Promise<void> => {\n        const {actions, emojiMap, user, team} = this.props;\n        const {image, name, saving} = this.state;\n\n        e.preventDefault();\n\n        if (saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            error: null,\n        });\n\n        const emoji: EmojiCreateArgs = {\n            creator_id: user.id,\n            name: name.trim().toLowerCase(),\n        };\n\n        // trim surrounding colons if the user accidentally included them in the name\n        if (emoji.name.startsWith(':') && emoji.name.endsWith(':')) {\n            emoji.name = emoji.name.substring(1, emoji.name.length - 1);\n        }\n\n        if (!emoji.name) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameRequired'\n                        defaultMessage='A name is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if ((/[^a-z0-9+_-]/).test(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameInvalid'\n                        defaultMessage=\"An emoji's name can only contain lowercase letters, numbers, and the symbols '-', '+' and '_'.\"\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (emojiMap.hasSystemEmoji(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.nameTaken'\n                        defaultMessage='This name is already in use by a system emoji. Please choose another name.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (emojiMap.has(emoji.name)) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.customNameTaken'\n                        defaultMessage='This name is already in use by a custom emoji. Please choose another name.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!image) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageRequired'\n                        defaultMessage='An image is required for the emoji'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const maxFileSizeBytes = 1024 * 1024;\n        if (image.size > maxFileSizeBytes) {\n            this.setState({\n                saving: false,\n                error: (\n                    <FormattedMessage\n                        id='add_emoji.imageTooLarge'\n                        defaultMessage='Unable to create emoji. Image must be less than 1 MB in size.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const response = await actions.createCustomEmoji(emoji as CustomEmoji, image);\n\n        if ('data' in response) {\n            const savedEmoji = response as AddEmojiResponse;\n            if (savedEmoji && savedEmoji.data.name === emoji.name) {\n                getHistory().push('/' + team.name + '/emoji');\n                return;\n            }\n        }\n\n        if ('error' in response) {\n            const responseError = response as AddErrorResponse;\n            if (responseError) {\n                this.setState({\n                    saving: false,\n                    error: responseError.error.message,\n                });\n\n                return;\n            }\n        }\n\n        const genericError = (\n            <FormattedMessage\n                id='add_emoji.failedToAdd'\n                defaultMessage='Something went wrong when adding the custom emoji.'\n            />\n        );\n\n        this.setState({\n            saving: false,\n            error: (genericError),\n        });\n    };\n\n    updateName = (e: ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    updateImage = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (e.target.files == null || e.target.files.length === 0) {\n            this.setState({\n                image: null,\n                imageUrl: '',\n            });\n\n            return;\n        }\n\n        const image = e.target.files![0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            this.setState({\n                image,\n                imageUrl: reader.result,\n            });\n        };\n        reader.readAsDataURL(image);\n    };\n\n    render(): JSX.Element {\n        let filename = null;\n        if (this.state.image) {\n            filename = (\n                <span className='add-emoji__filename'>\n                    {this.state.image.name}\n                </span>\n            );\n        }\n\n        let preview = null;\n        if (this.state.imageUrl) {\n            preview = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='preview'\n                    >\n                        <FormattedMessage\n                            id='add_emoji.preview'\n                            defaultMessage='Preview'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8 add-emoji__preview'>\n                        <FormattedMessage\n                            id='add_emoji.preview.sentence'\n                            defaultMessage='This is a sentence with {image} in it.'\n                            values={{\n                                image: (\n                                    <span\n                                        className='emoticon'\n                                        style={{backgroundImage: 'url(' + this.state.imageUrl + ')'}}\n                                    />\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/emoji'}>\n                        <FormattedMessage\n                            id='emoji_list.header'\n                            defaultMessage='Custom Emoji'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id='add_emoji.header'\n                        defaultMessage='Add'\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleFormSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.name'\n                                    defaultMessage='Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_emoji.name.help'\n                                        defaultMessage=\"Name your emoji. The name can be up to 64 characters, and can contain lowercase letters, numbers, and the symbols '-' and '_'.\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='image'\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.image'\n                                    defaultMessage='Image'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div>\n                                    <div className='add-emoji__upload'>\n                                        <button className='btn btn-primary'>\n                                            <FormattedMessage\n                                                id='add_emoji.image.button'\n                                                defaultMessage='Select'\n                                            />\n                                        </button>\n                                        <input\n                                            id='select-emoji'\n                                            type='file'\n                                            accept={Constants.ACCEPT_EMOJI_IMAGE}\n                                            multiple={false}\n                                            onChange={this.updateImage}\n                                        />\n                                    </div>\n                                    {filename}\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_emoji.image.help'\n                                            defaultMessage='Specify a .gif, .png, or .jpg file of up to 64 KB for your emoji. The dimensions can be up to 128 pixels by 128 pixels.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {preview}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                error={this.state.error}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={'/' + this.props.team.name + '/emoji'}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                data-testid='save-button'\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={defineMessage({id: 'add_emoji.saving', defaultMessage: 'Saving...'})}\n                                onClick={this.handleSaveButtonClick}\n                            >\n                                <FormattedMessage\n                                    id='add_emoji.save'\n                                    defaultMessage='Save'\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {createCustomEmoji} from 'mattermost-redux/actions/emojis';\n\nimport {getEmojiMap} from 'selectors/emojis';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddEmoji from './add_emoji';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        emojiMap: getEmojiMap(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createCustomEmoji,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmoji);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n    image: string;\n    title: JSX.Element;\n    description: JSX.Element;\n    link: string;\n}\n\nconst IntegrationOption = ({image, title, description, link}: Props) => {\n    return (\n        <Link\n            to={link}\n            className='integration-option'\n        >\n            <img\n                alt={'integration image'}\n                className='integration-option__image'\n                src={image}\n            />\n            <div className='integration-option__title'>\n                {title}\n            </div>\n            <div className='integration-option__description'>\n                {description}\n            </div>\n        </Link>\n    );\n};\n\nexport default React.memo(IntegrationOption);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport ExternalLink from 'components/external_link';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport BotAccountsIcon from 'images/bot_default_icon.png';\nimport IncomingWebhookIcon from 'images/incoming_webhook.jpg';\nimport OAuthIcon from 'images/oauth_icon.png';\nimport OutgoingOAuthConnectionsIcon from 'images/outgoing_oauth_connection.png';\nimport OutgoingWebhookIcon from 'images/outgoing_webhook.jpg';\nimport SlashCommandIcon from 'images/slash_command_icon.jpg';\nimport * as Utils from 'utils/utils';\n\nimport IntegrationOption from './integration_option';\n\ntype Props = {\n    siteName: string | undefined;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableOutgoingOAuthConnections: boolean;\n    team: Team;\n}\n\nexport default class Integrations extends React.PureComponent <Props> {\n    componentDidMount() {\n        this.updateTitle();\n    }\n\n    updateTitle = () => {\n        const currentSiteName = this.props.siteName || '';\n        document.title = Utils.localizeMessage({id: 'admin.sidebar.integrations', defaultMessage: 'Integrations'}) + ' - ' + this.props.team.display_name + ' ' + currentSiteName;\n    };\n\n    render() {\n        const options = [];\n\n        if (this.props.enableIncomingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    key='incomingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='incomingWebhook'\n                        image={IncomingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.title'\n                                defaultMessage='Incoming Webhooks'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.incomingWebhook.description'\n                                defaultMessage='Incoming webhooks allow external integrations to send messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/incoming_webhooks'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableOutgoingWebhooks) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    key='outgoingWebhookPermission'\n                >\n                    <IntegrationOption\n                        key='outgoingWebhook'\n                        image={OutgoingWebhookIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.title'\n                                defaultMessage='Outgoing Webhooks'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.outgoingWebhook.description'\n                                defaultMessage='Outgoing webhooks allow external integrations to receive and respond to messages'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/outgoing_webhooks'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableCommands) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    key='commandPermission'\n                >\n                    <IntegrationOption\n                        key='command'\n                        image={SlashCommandIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.command.title'\n                                defaultMessage='Slash Commands'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.command.description'\n                                defaultMessage='Slash commands send events to an external integration'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/commands'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        if (this.props.enableOAuthServiceProvider) {\n            options.push(\n                <SystemPermissionGate\n                    permissions={[Permissions.MANAGE_OAUTH]}\n                    key='oauth2AppsPermission'\n                >\n                    <IntegrationOption\n                        key='oauth2Apps'\n                        image={OAuthIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.oauthApps.title'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.oauthApps.description'\n                                defaultMessage='Auth 2.0 allows external applications to make authorized requests to the Mattermost API'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/oauth2-apps'}\n                    />\n                </SystemPermissionGate>,\n            );\n        }\n\n        if (this.props.enableOutgoingOAuthConnections) {\n            options.push(\n                <TeamPermissionGate\n                    teamId={this.props.team.id}\n                    permissions={[Permissions.MANAGE_OUTGOING_OAUTH_CONNECTIONS]}\n                    key='outgoingOAuthConnectionsPermission'\n                >\n                    <IntegrationOption\n                        key='outgoingOAuthConnections'\n                        image={OutgoingOAuthConnectionsIcon}\n                        title={\n                            <FormattedMessage\n                                id='integrations.outgoingOAuthConnections.title'\n                                defaultMessage='Outgoing OAuth Connections'\n                            />\n                        }\n                        description={\n                            <FormattedMessage\n                                id='integrations.outgoingOAuthConnections.description'\n                                defaultMessage='Outgoing OAuth Connections allow custom integrations to communicate to external systems'\n                            />\n                        }\n                        link={'/' + this.props.team.name + '/integrations/outgoing-oauth2-connections'}\n                    />\n                </TeamPermissionGate>,\n            );\n        }\n\n        options.push(\n            <SystemPermissionGate\n                permissions={['manage_bots']}\n                key='botsPermissions'\n            >\n                <IntegrationOption\n                    image={BotAccountsIcon}\n                    title={\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    description={\n                        <FormattedMessage\n                            id='bots.manage.description'\n                            defaultMessage='Use bot accounts to integrate with Mattermost through plugins or the API'\n                        />\n                    }\n                    link={'/' + this.props.team.name + '/integrations/bots'}\n                />\n            </SystemPermissionGate>,\n        );\n\n        return (\n            <div className='backstage-content row'>\n                <div className='backstage-header'>\n                    <h1>\n                        <FormattedMessage\n                            id='integrations.header'\n                            defaultMessage='Integrations'\n                        />\n                    </h1>\n                </div>\n                <div className='backstage-list__help'>\n                    <FormattedMessage\n                        id='integrations.help'\n                        defaultMessage='Visit the {appDirectory} to find self-hosted, third-party apps and integrations for Mattermost.'\n                        values={{\n                            appDirectory: (\n                                <ExternalLink\n                                    href='https://mattermost.com/marketplace'\n                                    location='integrations'\n                                >\n                                    <FormattedMessage\n                                        id='integrations.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </div>\n                <div className='integrations-list d-flex flex-wrap'>\n                    {options}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport Integrations from './integrations';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableOutgoingOAuthConnections = config.EnableOutgoingOAuthConnections === 'true';\n\n    return {\n        siteName,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n        enableOutgoingOAuthConnections,\n    };\n}\n\nexport default connect(mapStateToProps)(Integrations);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport type {ChangeEventHandler} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channels: Channel[];\n    onChange?: ChangeEventHandler<HTMLSelectElement>;\n    value?: string;\n    selectOpen: boolean;\n    selectPrivate: boolean;\n    selectDm: boolean;\n};\n\nconst ChannelSelect = ({\n    channels,\n    selectOpen,\n    selectPrivate,\n    selectDm,\n    value,\n    onChange,\n}: Props) => {\n    const intl = useIntl();\n\n    const options = [\n        <option\n            key=''\n            value=''\n        >\n            {intl.formatMessage({\n                id: 'channel_select.placeholder',\n                defaultMessage: '--- Select a channel ---',\n            })}\n        </option>,\n    ];\n\n    channels.forEach((channel: Channel) => {\n        const channelName = channel.display_name || channel.name;\n        if (channel.type === Constants.OPEN_CHANNEL && selectOpen) {\n            options.push(\n                <option\n                    key={channel.id}\n                    value={channel.id}\n                >\n                    {channelName}\n                </option>,\n            );\n        } else if (channel.type === Constants.PRIVATE_CHANNEL && selectPrivate) {\n            options.push(\n                <option\n                    key={channel.id}\n                    value={channel.id}\n                >\n                    {channelName}\n                </option>,\n            );\n        } else if (channel.type === Constants.DM_CHANNEL && selectDm) {\n            options.push(\n                <option\n                    key={channel.id}\n                    value={channel.id}\n                >\n                    {channelName}\n                </option>,\n            );\n        }\n    });\n\n    return (\n        <select\n            className='form-control'\n            value={value}\n            onChange={onChange}\n            id='channelSelect'\n        >\n            {options}\n        </select>\n    );\n};\n\nexport default memo(ChannelSelect);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getMyChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserLocale} from 'mattermost-redux/selectors/entities/i18n';\nimport {sortChannelsByTypeAndDisplayName} from 'mattermost-redux/utils/channel_utils';\n\nimport ChannelSelect from './channel_select';\n\nconst getMyChannelsSorted = createSelector(\n    'getMyChannelsSorted',\n    getMyChannels,\n    getCurrentUserLocale,\n    (channels, locale) => {\n        const activeChannels = channels.filter((channel) => channel.delete_at === 0);\n        return [...activeChannels].sort(sortChannelsByTypeAndDisplayName.bind(null, locale));\n    },\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        channels: getMyChannelsSorted(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelSelect);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport type {ChangeEventHandler, FormEvent, MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {IncomingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ChannelSelect from 'components/channel_select';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\n\ninterface State {\n    displayName: string;\n    description: string;\n    channelId: string;\n    channelLocked: boolean;\n    username: string;\n    iconURL: string;\n    saving: boolean;\n    serverError: string;\n    clientError: JSX.Element | null;\n}\n\ninterface Props {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * The header text to render, has id and defaultMessage\n    */\n    header: MessageDescriptor;\n\n    /**\n    * The footer text to render, has id and defaultMessage\n    */\n    footer: MessageDescriptor;\n\n    /**\n    * The spinner loading text to render, has id and defaultMessage\n    */\n    loading: MessageDescriptor;\n\n    /**\n    * The server error text after a failed action\n    */\n    serverError: string;\n\n    /**\n    * The hook used to set the initial state\n    */\n    initialHook?: IncomingWebhook;\n\n    /**\n    * Whether to allow configuration of the default post username.\n    */\n    enablePostUsernameOverride: boolean;\n\n    /**\n    * Whether to allow configuration of the default post icon.\n    */\n    enablePostIconOverride: boolean;\n\n    /**\n    * The async function to run when the action button is pressed\n    */\n    action: (hook: IncomingWebhook) => Promise<void>;\n}\n\nexport default class AbstractIncomingWebhook extends PureComponent<Props, State> {\n    constructor(props: Props | Readonly<Props>) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook);\n    }\n\n    getStateFromHook = (hook?: IncomingWebhook) => {\n        return {\n            displayName: hook?.display_name || '',\n            description: hook?.description || '',\n            channelId: hook?.channel_id || '',\n            channelLocked: hook?.channel_locked || false,\n            username: hook?.username || '',\n            iconURL: hook?.icon_url || '',\n            saving: false,\n            serverError: '',\n            clientError: null,\n        };\n    };\n\n    handleSubmit = (e: MouseEvent<HTMLElement> | FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: '',\n            clientError: null,\n        });\n\n        if (!this.state.channelId) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_incoming_webhook.channelRequired'\n                        defaultMessage='A valid channel is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            channel_id: this.state.channelId,\n            channel_locked: this.state.channelLocked,\n            display_name: this.state.displayName,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n            id: this.props.initialHook?.id || '',\n            create_at: this.props.initialHook?.create_at || 0,\n            update_at: this.props.initialHook?.update_at || 0,\n            delete_at: this.props.initialHook?.delete_at || 0,\n            team_id: this.props.initialHook?.team_id || '',\n            user_id: this.props.initialHook?.user_id || '',\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    };\n\n    updateDisplayName: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    };\n\n    updateDescription: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    updateChannelId: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    };\n\n    updateChannelLocked: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            channelLocked: e.target.checked,\n        });\n    };\n\n    updateUsername: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    };\n\n    updateIconURL: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    };\n\n    render() {\n        const headerToRender = this.props.header;\n        const footerToRender = this.props.footer;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks`}>\n                        <FormattedMessage\n                            id='incoming_webhooks.header'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={(e) => this.handleSubmit(e)}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the webhook settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={500}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.description.help'\n                                        defaultMessage='Describe your incoming webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                    selectPrivate={true}\n                                    selectDm={false}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channel.help'\n                                        defaultMessage='This is the default public or private channel that receives the webhook payloads. When setting up the webhook, you must belong to the private channel.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelLocked'\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.channelLocked'\n                                    defaultMessage='Lock to this channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='channelLocked'\n                                    type='checkbox'\n                                    checked={this.state.channelLocked}\n                                    onChange={this.updateChannelLocked}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.channelLocked.help'\n                                        defaultMessage='If set, the incoming webhook can post only to the selected channel.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        { this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength={22}\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.username.help'\n                                            defaultMessage='Specify the username this integration will post as. Usernames can be up to 22 characters, and can contain lowercase letters, numbers and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, the name specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        { this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_incoming_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength={1024}\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_incoming_webhook.icon_url.help'\n                                            defaultMessage='Enter the URL of a .png or .jpg file for the profile picture of this integration when posting. The file should be at least 128 pixels by 128 pixels. If left blank, the profile picture specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={`/${this.props.team.name}/integrations/incoming_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_incoming_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={this.props.loading}\n                                onClick={(e) => this.handleSubmit(e)}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useState} from 'react';\nimport {defineMessages} from 'react-intl';\n\nimport type {IncomingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst messages = defineMessages({\n    footer: {\n        id: 'add_incoming_webhook.save',\n        defaultMessage: 'Save',\n    },\n    header: {\n        id: 'integrations.add',\n        defaultMessage: 'Add',\n    },\n    loading: {\n        id: 'add_incoming_webhook.saving',\n        defaultMessage: 'Saving...',\n    },\n});\n\ntype Props = {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * Whether to allow configuration of the default post username.\n    */\n    enablePostUsernameOverride: boolean;\n\n    /**\n    * Whether to allow configuration of the default post icon.\n    */\n    enablePostIconOverride: boolean;\n\n    actions: {\n\n        /**\n        * The function to call to add a new incoming webhook\n        */\n        createIncomingHook: (hook: IncomingWebhook) => Promise<ActionResult<IncomingWebhook>>;\n    };\n};\n\nconst AddIncomingWebhook = ({\n    team,\n    enablePostUsernameOverride,\n    enablePostIconOverride,\n    actions,\n}: Props) => {\n    const [serverError, setServerError] = useState('');\n\n    const addIncomingHook = useCallback(async (hook: IncomingWebhook) => {\n        setServerError('');\n\n        const {data, error} = await actions.createIncomingHook(hook);\n        if (data) {\n            getHistory().push(`/${team.name}/integrations/confirm?type=incoming_webhooks&id=${data.id}`);\n            return;\n        }\n        if (error) {\n            setServerError(error.message);\n        }\n    }, [actions, team.name]);\n\n    return (\n        <AbstractIncomingWebhook\n            team={team}\n            header={messages.header}\n            footer={messages.footer}\n            loading={messages.loading}\n            enablePostUsernameOverride={enablePostUsernameOverride}\n            enablePostIconOverride={enablePostIconOverride}\n            action={addIncomingHook}\n            serverError={serverError}\n        />\n    );\n};\nexport default memo(AddIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {createIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport AddIncomingWebhook from './add_incoming_webhook';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent, FormEvent} from 'react';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport FormError from 'components/form_error';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport SpinnerButton from 'components/spinner_button';\n\ntype Props = {\n\n    /**\n   * The current team\n   */\n    team: Team;\n\n    /**\n   * The header text to render, has id and defaultMessage\n   */\n    header: MessageDescriptor;\n\n    /**\n   * The footer text to render, has id and defaultMessage\n   */\n    footer: MessageDescriptor;\n\n    /**\n   * The spinner loading text to render, has id and defaultMessage\n   */\n    loading: MessageDescriptor;\n\n    /**\n   * Any extra component/node to render\n   */\n    renderExtra?: JSX.Element;\n\n    /**\n    * The server error text after a failed action\n    */\n    serverError: string;\n\n    /**\n   * The OAuthApp used to set the initial state\n   */\n    initialApp?: OAuthApp;\n\n    /**\n    * The async function to run when the action button is pressed\n    */\n    action: (app: OAuthApp) => Promise<void>;\n\n}\n\ntype State = {\n    name: string;\n    description: string;\n    homepage: string;\n    icon_url: string;\n    callbackUrls: string;\n    is_trusted: boolean;\n    has_icon: boolean;\n    saving: boolean;\n    clientError: JSX.Element | null | string;\n};\n\nexport default class AbstractOAuthApp extends React.PureComponent<Props, State> {\n    private image: HTMLImageElement;\n    private icon_url: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.image = new Image();\n        this.image.onload = this.imageLoaded;\n        this.icon_url = React.createRef();\n        this.state = this.getStateFromApp(this.props.initialApp || {} as OAuthApp);\n    }\n\n    getStateFromApp = (app: OAuthApp) => {\n        return {\n            name: app.name || '',\n            description: app.description || '',\n            homepage: app.homepage || '',\n            icon_url: app.icon_url || '',\n            callbackUrls: app.callback_urls ? app.callback_urls.join('\\n') : '',\n            is_trusted: app.is_trusted || false,\n            has_icon: Boolean(app.icon_url),\n            saving: false,\n            clientError: null,\n        };\n    };\n\n    imageLoaded = () => {\n        if (this.icon_url.current?.value) {\n            this.setState({\n                has_icon: true,\n                icon_url: this.icon_url.current.value,\n            });\n        }\n    };\n\n    handleSubmit = (e: FormEvent) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        if (!this.state.name) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.nameRequired'\n                        defaultMessage='Name for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.description) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.descriptionRequired'\n                        defaultMessage='Description for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!this.state.homepage) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.homepageRequired'\n                        defaultMessage='Homepage for the OAuth 2.0 application is required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_oauth_app.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required.'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const app = {\n            name: this.state.name,\n            callback_urls: callbackUrls,\n            homepage: this.state.homepage,\n            description: this.state.description,\n            is_trusted: this.state.is_trusted,\n            icon_url: this.state.icon_url,\n        } as OAuthApp;\n\n        this.props.action(app).then(() => this.setState({saving: false}));\n    };\n\n    updateName = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            name: e.target.value,\n        });\n    };\n\n    updateTrusted = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            is_trusted: e.target.value === 'true',\n        });\n    };\n\n    updateDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    updateHomepage = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            homepage: e.target.value,\n        });\n    };\n\n    updateIconUrl = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            has_icon: false,\n            icon_url: e.target.value,\n        });\n        this.image.src = e.target.value;\n    };\n\n    updateCallbackUrls = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    };\n\n    render() {\n        const headerToRender = this.props.header;\n        const footerToRender = this.props.footer;\n        const renderExtra = this.props.renderExtra;\n\n        let icon;\n        if (this.state.has_icon) {\n            icon = (\n                <div className='integration__icon'>\n                    <img\n                        alt={'integration icon'}\n                        src={this.state.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        const trusted = (\n            <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='is_trusted'\n                    >\n                        <FormattedMessage\n                            id='installed_oauth_apps.trusted'\n                            defaultMessage='Is Trusted'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='true'\n                                name='is_trusted'\n                                checked={this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.yes'\n                                defaultMessage='Yes'\n                            />\n                        </label>\n                        <label className='radio-inline'>\n                            <input\n                                type='radio'\n                                value='false'\n                                name='is_trusted'\n                                checked={!this.state.is_trusted}\n                                onChange={this.updateTrusted}\n                            />\n                            <FormattedMessage\n                                id='installed_oauth_apps.trusted.no'\n                                defaultMessage='No'\n                            />\n                        </label>\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_oauth_app.trusted.help'\n                                defaultMessage='If true, the OAuth 2.0 application is considered trusted by the Mattermost server and does not require the user to accept authorization. If false, a window opens to ask the user to accept or deny the authorization.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/oauth2-apps`}>\n                        <FormattedMessage\n                            id='installed_oauth_apps.header'\n                            defaultMessage='Installed OAuth2 Apps'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    {icon}\n                    <form className='form-horizontal'>\n                        {trusted}\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='name'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.name'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='name'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.name}\n                                    onChange={this.updateName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.name.help'\n                                        defaultMessage='Specify the display name, of up to 64 characters, for your OAuth 2.0 application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={512}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.description.help'\n                                        defaultMessage='Describe your OAuth 2.0 application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='homepage'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.homepage'\n                                    defaultMessage='Homepage'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='homepage'\n                                    type='url'\n                                    maxLength={256}\n                                    className='form-control'\n                                    value={this.state.homepage}\n                                    onChange={this.updateHomepage}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.homepage.help'\n                                        defaultMessage='This is the URL for the homepage of the OAuth 2.0 application. Depending on your server configuration, use HTTP or HTTPS in the URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='icon_url'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.iconUrl'\n                                    defaultMessage='Icon URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='icon_url'\n                                    ref={this.icon_url}\n                                    type='url'\n                                    maxLength={512}\n                                    className='form-control'\n                                    value={this.state.icon_url}\n                                    onChange={this.updateIconUrl}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.icon.help'\n                                        defaultMessage='(Optional) The URL of the image used for your OAuth 2.0 application. Make sure you use HTTP or HTTPS in your URL.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows={3}\n                                    maxLength={1024}\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_oauth_app.callbackUrls.help'\n                                        defaultMessage='The redirect URIs to which the service will redirect users after accepting or denying authorization of your application, and which will handle authorization codes or access tokens. Must be a valid URL and start with http:// or https://.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={`/${this.props.team.name}/integrations/oauth2-apps`}\n                            >\n                                <FormattedMessage\n                                    id='installed_oauth_apps.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={this.props.loading}\n                                onClick={this.handleSubmit}\n                                id='saveOauthApp'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {defineMessages} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions.js';\n\nimport AbstractOAuthApp from '../abstract_oauth_app';\n\nconst messages = defineMessages({\n    footer: {\n        id: 'installed_oauth_apps.save',\n        defaultMessage: 'Save',\n    },\n    header: {\n        id: 'add_oauth_app.header',\n        defaultMessage: 'Add',\n    },\n    loading: {\n        id: 'installed_oauth_apps.saving',\n        defaultMessage: 'Saving...',\n    },\n});\n\nexport type Props = {\n\n    /**\n    * The team data\n    */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add new OAuthApp\n        */\n        addOAuthApp: (app: OAuthApp) => Promise<ActionResult<OAuthApp>>;\n    };\n};\n\nconst AddOAuthApp = ({team, actions}: Props): JSX.Element => {\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const addOAuthApp = async (app: OAuthApp) => {\n        setServerError('');\n\n        const {data, error} = await actions.addOAuthApp(app);\n        if (data) {\n            history.push(`/${team.name}/integrations/confirm?type=oauth2-apps&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractOAuthApp\n            team={team}\n            header={messages.header}\n            footer={messages.footer}\n            loading={messages.loading}\n            action={addOAuthApp}\n            serverError={serverError}\n        />\n    );\n};\n\nexport default AddOAuthApp;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {addOAuthApp} from 'mattermost-redux/actions/integrations';\n\nimport AddOAuthApp from './add_oauth_app';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            addOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEventHandler, FormEvent, MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ChannelSelect from 'components/channel_select';\nimport ExternalLink from 'components/external_link';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\n\nimport {DocLinks} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\ninterface State {\n    callbackUrls: string;\n    channelId: string;\n    clientError: JSX.Element | null;\n    contentType: string;\n    description: string;\n    displayName: string;\n    iconURL: string;\n    saving: boolean;\n    triggerWhen: number;\n    triggerWords: string;\n    username: string;\n}\n\ninterface Props {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    /**\n     * The header text to render, has id and defaultMessage\n     */\n    header: MessageDescriptor;\n\n    /**\n     * The footer text to render, has id and defaultMessage\n     */\n    footer: MessageDescriptor;\n\n    /**\n    * The spinner loading text to render, has id and defaultMessage\n    */\n    loading: MessageDescriptor;\n\n    /**\n     * Any extra component/node to render\n     */\n    renderExtra: React.ReactNode;\n\n    /**\n     * The server error text after a failed action\n     */\n    serverError: string;\n\n    /**\n     * The hook used to set the initial state\n     */\n    initialHook?: OutgoingWebhook;\n\n    /**\n     * The async function to run when the action button is pressed\n     */\n    action: (hook: OutgoingWebhook) => Promise<void>;\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n}\n\nexport default class AbstractOutgoingWebhook extends React.PureComponent<Props, State> {\n    constructor(props: Props | Readonly<Props>) {\n        super(props);\n\n        this.state = this.getStateFromHook(this.props.initialHook);\n    }\n\n    getStateFromHook = (hook?: OutgoingWebhook) => {\n        let triggerWords = '';\n        if (hook?.trigger_words) {\n            let i = 0;\n            for (i = 0; i < hook.trigger_words.length; i++) {\n                triggerWords += hook.trigger_words[i] + '\\n';\n            }\n        }\n\n        let callbackUrls = '';\n        if (hook?.callback_urls) {\n            let i = 0;\n            for (i = 0; i < hook.callback_urls.length; i++) {\n                callbackUrls += hook.callback_urls[i] + '\\n';\n            }\n        }\n\n        return {\n            displayName: hook?.display_name || '',\n            description: hook?.description || '',\n            contentType: hook?.content_type || 'application/x-www-form-urlencoded',\n            channelId: hook?.channel_id || '',\n            triggerWords,\n            triggerWhen: hook?.trigger_when || 0,\n            callbackUrls,\n            saving: false,\n            clientError: null,\n            username: hook?.username || '',\n            iconURL: hook?.icon_url || '',\n        };\n    };\n\n    handleSubmit = (e: MouseEvent<HTMLElement> | FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: null,\n        });\n\n        const triggerWords = [];\n        if (this.state.triggerWords) {\n            for (let triggerWord of this.state.triggerWords.split('\\n')) {\n                triggerWord = triggerWord.trim();\n\n                if (triggerWord.length > 0) {\n                    triggerWords.push(triggerWord);\n                }\n            }\n        }\n\n        if (!this.state.channelId && triggerWords.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.triggerWordsOrChannelRequired'\n                        defaultMessage='A valid channel or a list of trigger words is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const callbackUrls = [];\n        for (let callbackUrl of this.state.callbackUrls.split('\\n')) {\n            callbackUrl = callbackUrl.trim();\n\n            if (callbackUrl.length > 0) {\n                callbackUrls.push(callbackUrl);\n            }\n        }\n\n        if (callbackUrls.length === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_outgoing_webhook.callbackUrlsRequired'\n                        defaultMessage='One or more callback URLs are required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        const hook = {\n            team_id: this.props.team.id,\n            channel_id: this.state.channelId,\n            trigger_words: triggerWords,\n            trigger_when: this.state.triggerWhen,\n            callback_urls: callbackUrls,\n            display_name: this.state.displayName,\n            content_type: this.state.contentType,\n            description: this.state.description,\n            username: this.state.username,\n            icon_url: this.state.iconURL,\n            id: this.props.initialHook?.id || '',\n            create_at: this.props.initialHook?.create_at || 0,\n            update_at: this.props.initialHook?.update_at || 0,\n            delete_at: this.props.initialHook?.delete_at || 0,\n            creator_id: this.props.initialHook?.creator_id || '',\n            token: this.props.initialHook?.token || '',\n        };\n\n        this.props.action(hook).then(() => this.setState({saving: false}));\n    };\n\n    updateDisplayName: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    };\n\n    updateDescription: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    updateContentType: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        this.setState({\n            contentType: e.target.value,\n        });\n    };\n\n    updateChannelId: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        this.setState({\n            channelId: e.target.value,\n        });\n    };\n\n    updateTriggerWords: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n        this.setState({\n            triggerWords: e.target.value,\n        });\n    };\n\n    updateTriggerWhen: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        this.setState({\n            triggerWhen: parseInt(e.target.value, 10),\n        });\n    };\n\n    updateCallbackUrls: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n        this.setState({\n            callbackUrls: e.target.value,\n        });\n    };\n\n    updateUsername: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            username: e.target.value,\n        });\n    };\n\n    updateIconURL: ChangeEventHandler<HTMLInputElement> = (e) => {\n        this.setState({\n            iconURL: e.target.value,\n        });\n    };\n\n    render() {\n        const contentTypeOption1 = 'application/x-www-form-urlencoded';\n        const contentTypeOption2 = 'application/json';\n\n        const headerToRender = this.props.header;\n        const footerToRender = this.props.footer;\n        const renderExtra = this.props.renderExtra;\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks`}>\n                        <FormattedMessage\n                            id='add_outgoing_webhook.header'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    </Link>\n                    <FormattedMessage\n                        id={headerToRender.id}\n                        defaultMessage={headerToRender.defaultMessage}\n                    />\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the webhook settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={500}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.description.help'\n                                        defaultMessage='Describe your outgoing webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='contentType'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.content_Type'\n                                    defaultMessage='Content Type'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.contentType}\n                                    onChange={this.updateContentType}\n                                >\n                                    <option\n                                        value={contentTypeOption1}\n                                    >\n                                        {contentTypeOption1}\n                                    </option>\n                                    <option\n                                        value={contentTypeOption2}\n                                    >\n                                        {contentTypeOption2}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help1'\n                                        defaultMessage='Specify the content type by which to send the request.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help2'\n                                        defaultMessage='For the server to encode the parameters in a URL format in the request body, select application/x-www-form-urlencoded.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.contentType.help3'\n                                        defaultMessage='For the server to format the request body as JSON, select application/json.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='channelId'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.channel'\n                                    defaultMessage='Channel'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <ChannelSelect\n                                    value={this.state.channelId}\n                                    onChange={this.updateChannelId}\n                                    selectOpen={true}\n                                    selectPrivate={false}\n                                    selectDm={false}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.channel.help'\n                                        defaultMessage='This field is optional if you specify at least one trigger word. Specify the public channel that delivers the payload to the webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWords'\n                                    defaultMessage='Trigger Words (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='triggerWords'\n                                    rows={3}\n                                    maxLength={1000}\n                                    className='form-control'\n                                    value={this.state.triggerWords}\n                                    onChange={this.updateTriggerWords}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWords.help'\n                                        defaultMessage='Specify the trigger words that send an HTTP POST request to your application. The trigger can be for the channel, the outgoing webhook, or both. If you select only Channel, trigger words are optional. If you select both, the message must match both values.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='triggerWords'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.triggerWordsTriggerWhen'\n                                    defaultMessage='Trigger When'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    id='triggerWhen'\n                                    className='form-control'\n                                    value={this.state.triggerWhen}\n                                    onChange={this.updateTriggerWhen}\n                                >\n                                    <option\n                                        value='0'\n                                    >\n                                        {localizeMessage({id: 'add_outgoing_webhook.triggerWordsTriggerWhenFullWord', defaultMessage: 'First word matches a trigger word exactly'})}\n                                    </option>\n                                    <option\n                                        value='1'\n                                    >\n                                        {localizeMessage({id: 'add_outgoing_webhook.triggerWordsTriggerWhenStartsWith', defaultMessage: 'First word starts with a trigger word'})}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.triggerWordsTriggerWhen.help'\n                                        defaultMessage='Specify when to trigger the outgoing webhook.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='callbackUrls'\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.callbackUrls'\n                                    defaultMessage='Callback URLs (One Per Line)'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <textarea\n                                    id='callbackUrls'\n                                    rows={3}\n                                    maxLength={1000}\n                                    className='form-control'\n                                    value={this.state.callbackUrls}\n                                    onChange={this.updateCallbackUrls}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.callbackUrls.help'\n                                        defaultMessage='Specify the URL that the messages will be sent to. If the URL is private, add it as a {link}.'\n                                        values={{\n                                            link: (\n                                                <ExternalLink\n                                                    href={DocLinks.TRUSTED_CONNECTION}\n                                                    location='abstract_outgoing_webhook'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_outgoing_webhook.callbackUrls.helpLinkText'\n                                                        defaultMessage='trusted internal connection'\n                                                    />\n                                                </ExternalLink>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {this.props.enablePostUsernameOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='username'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.username'\n                                        defaultMessage='Username'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='username'\n                                        type='text'\n                                        maxLength={22}\n                                        className='form-control'\n                                        value={this.state.username}\n                                        onChange={this.updateUsername}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.username.help'\n                                            defaultMessage='Specify the username this integration will post as. Usernames can be up to 22 characters, and contain lowercase letters, numbers and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, the name specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        {this.props.enablePostIconOverride &&\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                    htmlFor='iconURL'\n                                >\n                                    <FormattedMessage\n                                        id='add_outgoing_webhook.icon_url'\n                                        defaultMessage='Profile Picture'\n                                    />\n                                </label>\n                                <div className='col-md-5 col-sm-8'>\n                                    <input\n                                        id='iconURL'\n                                        type='text'\n                                        maxLength={1024}\n                                        className='form-control'\n                                        value={this.state.iconURL}\n                                        onChange={this.updateIconURL}\n                                    />\n                                    <div className='form__help'>\n                                        <FormattedMessage\n                                            id='add_outgoing_webhook.icon_url.help'\n                                            defaultMessage='Enter the URL of a .png or .jpg file for this integration to use as the profile picture when posting. The file should be at least 128 pixels by 128 pixels. If left blank, the profile picture specified by the webhook creator is used.'\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={`/${this.props.team.name}/integrations/outgoing_webhooks`}\n                            >\n                                <FormattedMessage\n                                    id='add_outgoing_webhook.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={this.props.loading}\n                                onClick={this.handleSubmit}\n                                id='saveWebhook'\n                            >\n                                <FormattedMessage\n                                    id={footerToRender.id}\n                                    defaultMessage={footerToRender.defaultMessage}\n                                />\n                            </SpinnerButton>\n                            {renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {defineMessages} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport type {OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook';\n\nconst messages = defineMessages({\n    footer: {\n        id: 'add_outgoing_webhook.save',\n        defaultMessage: 'Save',\n    },\n    header: {\n        id: 'integrations.add',\n        defaultMessage: 'Add',\n    },\n    loading: {\n        id: 'add_outgoing_webhook.saving',\n        defaultMessage: 'Saving...',\n    },\n});\n\nexport type Props = {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add a new outgoing webhook\n        */\n        createOutgoingHook: (hook: OutgoingWebhook) => Promise<ActionResult<OutgoingWebhook>>;\n    };\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n};\n\nconst AddOutgoingWebhook = ({team, actions, enablePostUsernameOverride, enablePostIconOverride}: Props): JSX.Element => {\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const addOutgoingHook = async (hook: OutgoingWebhook) => {\n        setServerError('');\n\n        const {data, error} = await actions.createOutgoingHook(hook);\n        if (data) {\n            history.push(`/${team.name}/integrations/confirm?type=outgoing_webhooks&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractOutgoingWebhook\n            team={team}\n            header={messages.header}\n            footer={messages.footer}\n            loading={messages.loading}\n            renderExtra={''}\n            action={addOutgoingHook}\n            serverError={serverError}\n            enablePostUsernameOverride={enablePostUsernameOverride}\n            enablePostIconOverride={enablePostIconOverride}\n        />\n    );\n};\n\nexport default AddOutgoingWebhook;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {createOutgoingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddOutgoingWebhook from './add_outgoing_webhook';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    return {\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Bot, BotPatch} from '@mattermost/types/bots';\n\nimport {BotTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {bindClientFunc} from './helpers';\n\nconst BOTS_PER_PAGE_DEFAULT = 20;\n\nexport function createBot(bot: Partial<Bot>) {\n    return bindClientFunc({\n        clientFunc: Client4.createBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            bot,\n        ],\n    });\n}\n\nexport function patchBot(botUserId: string, botPatch: Partial<BotPatch>) {\n    return bindClientFunc({\n        clientFunc: Client4.patchBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            botPatch,\n        ],\n    });\n}\n\nexport function loadBot(botUserId: string) {\n    return bindClientFunc({\n        clientFunc: Client4.getBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function loadBots(page = 0, perPage = BOTS_PER_PAGE_DEFAULT) {\n    return bindClientFunc({\n        clientFunc: Client4.getBotsIncludeDeleted,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNTS,\n        params: [\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function disableBot(botUserId: string) {\n    return bindClientFunc({\n        clientFunc: Client4.disableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function enableBot(botUserId: string) {\n    return bindClientFunc({\n        clientFunc: Client4.enableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function assignBot(botUserId: string, newOwnerId: string) {\n    return bindClientFunc({\n        clientFunc: Client4.assignBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            newOwnerId,\n        ],\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport type {ChangeEvent, ReactNode} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport LoadingScreen from 'components/loading_screen';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport SearchIcon from 'components/widgets/icons/fa_search_icon';\n\nimport './backstage_list.scss';\n\ntype Props = {\n    children?: JSX.Element[] | ((filter: string) => [JSX.Element[], boolean]);\n    header: ReactNode;\n    addLink?: string;\n    addText?: ReactNode;\n    addButtonId?: string;\n    emptyText?: ReactNode;\n    emptyTextSearch?: JSX.Element;\n    helpText?: ReactNode;\n    loading: boolean;\n    searchPlaceholder?: string;\n    nextPage?: () => void;\n    previousPage?: () => void;\n    page?: number;\n    pageSize?: number;\n    total?: number;\n};\n\nconst getPaging = (remainingProps: Props, childCount: number, hasFilter: boolean) => {\n    const page = (hasFilter || !remainingProps.page) ? 0 : remainingProps.page;\n    const pageSize = (hasFilter || !remainingProps.pageSize) ? childCount : remainingProps.pageSize;\n    const total = (hasFilter || !remainingProps.total) ? childCount : remainingProps.total;\n\n    let startCount = (page * pageSize) + 1;\n    let endCount = (page + 1) * pageSize;\n    endCount = endCount > total ? total : endCount;\n    if (endCount === 0) {\n        startCount = 0;\n    }\n\n    const isFirstPage = startCount <= 1;\n    const isLastPage = endCount >= total;\n\n    return {startCount, endCount, total, isFirstPage, isLastPage};\n};\n\nconst BackstageList = (remainingProps: Props) => {\n    const {formatMessage} = useIntl();\n\n    const [filter, setFilter] = useState('');\n    const updateFilter = (e: ChangeEvent<HTMLInputElement>) => setFilter(e.target.value);\n    const filterLowered = filter.toLowerCase();\n\n    let searchPlaceholder;\n    if (remainingProps.searchPlaceholder) {\n        searchPlaceholder = remainingProps.searchPlaceholder;\n    } else {\n        searchPlaceholder = formatMessage({id: 'backstage_list.search', defaultMessage: 'Search'});\n    }\n\n    let children = [];\n    let childCount = 0;\n    if (remainingProps.loading) {\n        children = [\n            <LoadingScreen\n                key='loading'\n            />,\n        ];\n    } else {\n        let hasChildren = true;\n        if (typeof remainingProps.children === 'function') {\n            [children, hasChildren] = remainingProps.children(filterLowered);\n        } else {\n            children = remainingProps.children as JSX.Element[];\n        }\n        children = React.Children.map(children, (child) => {\n            return React.cloneElement(child, {filterLowered});\n        });\n        if (children.length === 0 || !hasChildren) {\n            if (!filterLowered) {\n                if (remainingProps.emptyText) {\n                    children = [(\n                        <div\n                            className='backstage-list__item backstage-list__empty'\n                            key='emptyText'\n                        >\n                            {remainingProps.emptyText}\n                        </div>\n                    )];\n                }\n            } else if (remainingProps.emptyTextSearch) {\n                children = [(\n                    <div\n                        className='backstage-list__item backstage-list__empty'\n                        id='emptySearchResultsMessage'\n                        key='emptyTextSearch'\n                    >\n                        {React.cloneElement(remainingProps.emptyTextSearch, {values: {...remainingProps.emptyTextSearch.props.values, searchTerm: filterLowered}})}\n                    </div>\n                )];\n            }\n        } else {\n            childCount = children.length;\n        }\n    }\n\n    let addLink = null;\n\n    if (remainingProps.addLink && remainingProps.addText) {\n        addLink = (\n            <Link\n                className='add-link'\n                to={remainingProps.addLink}\n            >\n                <button\n                    type='button'\n                    className='btn btn-primary'\n                    id={remainingProps.addButtonId}\n                >\n                    <span>\n                        {remainingProps.addText}\n                    </span>\n                </button>\n            </Link>\n        );\n    }\n\n    const hasFilter = filter.length > 0;\n    const {startCount, endCount, total, isFirstPage, isLastPage} = getPaging(remainingProps, childCount, hasFilter);\n    const childrenToDisplay = childCount > 0 ? children.slice(startCount - 1, endCount) : children;\n\n    let previousPageFn = remainingProps.previousPage;\n    let nextPageFn = remainingProps.nextPage;\n    if (isFirstPage) {\n        previousPageFn = () => {};\n    }\n    if (isLastPage) {\n        nextPageFn = () => {};\n    }\n\n    return (\n        <div className='backstage-content'>\n            <div className='backstage-header'>\n                <h1>\n                    {remainingProps.header}\n                </h1>\n                {addLink}\n            </div>\n            <div className='backstage-filters'>\n                <div className='backstage-filter__search'>\n                    <SearchIcon/>\n                    <input\n                        type='search'\n                        className='form-control'\n                        placeholder={searchPlaceholder}\n                        value={filter}\n                        onChange={updateFilter}\n                        id='searchInput'\n                    />\n                </div>\n            </div>\n            <span className='backstage-list__help'>\n                {remainingProps.helpText}\n            </span>\n            <div className='backstage-list'>\n                {childrenToDisplay}\n            </div>\n            <div className='backstage-footer'>\n                <div className='backstage-footer__cell'>\n                    <FormattedMessage\n                        id='backstage_list.paginatorCount'\n                        defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                        values={{\n                            startCount,\n                            endCount,\n                            total,\n                        }}\n                    />\n                    <button\n                        type='button'\n                        className={'btn btn-quaternary btn-icon btn-sm ml-2 prev ' + (isFirstPage ? 'disabled' : '')}\n                        onClick={previousPageFn}\n                        aria-label={formatMessage({id: 'backstage_list.previousButton.ariaLabel', defaultMessage: 'Previous'})}\n                    >\n                        <PreviousIcon/>\n                    </button>\n                    <button\n                        type='button'\n                        className={'btn btn-quaternary btn-icon btn-sm next ' + (isLastPage ? 'disabled' : '')}\n                        onClick={nextPageFn}\n                        aria-label={formatMessage({id: 'backstage_list.nextButton.ariaLabel', defaultMessage: 'Next'})}\n                    >\n                        <NextIcon/>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BackstageList;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent, SyntheticEvent, ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Bot as BotType} from '@mattermost/types/bots';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile, UserAccessToken} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport Markdown from 'components/markdown';\nimport SaveButton from 'components/save_button';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport * as Utils from 'utils/utils';\n\nexport function matchesFilter(bot: BotType, filter?: string, owner?: UserProfile): boolean {\n    if (!filter) {\n        return true;\n    }\n    const username = bot.username || '';\n    const description = bot.description || '';\n    const displayName = bot.display_name || '';\n\n    let ownerUsername = 'plugin';\n    if (owner && owner.username) {\n        ownerUsername = owner.username;\n    }\n    return !(username.toLowerCase().indexOf(filter) === -1 &&\n        displayName.toLowerCase().indexOf(filter) === -1 &&\n        description.toLowerCase().indexOf(filter) === -1 &&\n        ownerUsername.toLowerCase().indexOf(filter) === -1);\n}\n\ntype Props = {\n\n    /**\n    *  Bot that we are displaying\n    */\n    bot: BotType;\n\n    /**\n    * Owner of the bot we are displaying\n    */\n    owner?: UserProfile;\n\n    /**\n    * User of the bot we are displaying\n    */\n    user: UserProfile;\n\n    /**\n    * The access tokens of the bot user\n    */\n    accessTokens: Record<string, UserAccessToken>;\n\n    /**\n    * String used for filtering bot items\n    */\n    filter?: string;\n\n    /**\n     * Determine whether this bot is managed by the app framework\n     */\n    fromApp: boolean;\n\n    actions: {\n\n        /**\n        * Disable a bot\n        */\n        disableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Enable a bot\n        */\n        enableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Access token managment\n        */\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        enableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        disableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n    };\n\n    /**\n    *  Only used for routing since backstage is team based.\n    */\n    team: Team;\n}\n\ntype State = {\n    confirmingId: string;\n    creatingTokenState: string;\n    token: UserAccessToken | Record<string, any>;\n    error: ReactNode;\n}\n\nexport default class Bot extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            confirmingId: '',\n            creatingTokenState: 'CLOSED',\n            token: {},\n            error: '',\n        };\n    }\n\n    enableBot = (): void => {\n        this.props.actions.enableBot(this.props.bot.user_id);\n    };\n\n    disableBot = (): void => {\n        this.props.actions.disableBot(this.props.bot.user_id);\n    };\n\n    enableUserAccessToken = (id: string): void => {\n        this.props.actions.enableUserAccessToken(id);\n    };\n\n    disableUserAccessToken = (id: string): void => {\n        this.props.actions.disableUserAccessToken(id);\n    };\n\n    confirmRevokeToken = (id: string): void => {\n        this.setState({confirmingId: id});\n    };\n\n    revokeTokenConfirmed = (): void => {\n        this.props.actions.revokeUserAccessToken(this.state.confirmingId);\n        this.closeConfirm();\n    };\n\n    closeConfirm = (): void => {\n        this.setState({confirmingId: ''});\n    };\n\n    openCreateToken = (): void => {\n        this.setState({\n            creatingTokenState: 'OPEN',\n            token: {\n                description: '',\n            },\n        });\n    };\n\n    closeCreateToken = (): void => {\n        this.setState({\n            creatingTokenState: 'CLOSED',\n            token: {\n                description: '',\n            },\n        });\n    };\n\n    handleUpdateDescription = (e: ChangeEvent<HTMLInputElement>): void => {\n        const target = e.target as HTMLInputElement;\n        this.setState({\n            token: Object.assign({}, this.state.token, {description: target.value}),\n        });\n    };\n\n    handleCreateToken = async (e: SyntheticEvent): Promise<void> => {\n        e.preventDefault();\n\n        if (this.state.token.description === '') {\n            this.setState({error: (\n                <FormattedMessage\n                    id='bot.token.error.description'\n                    defaultMessage='Please enter a description.'\n                />\n            )});\n            return;\n        }\n\n        const {data, error} = await this.props.actions.createUserAccessToken(this.props.bot.user_id, this.state.token.description);\n        if (data) {\n            this.setState({creatingTokenState: 'CREATED', token: data});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    };\n\n    public render(): JSX.Element | null {\n        const username = this.props.bot.username || '';\n        const description = this.props.bot.description || '';\n        const displayName = this.props.bot.display_name || '';\n\n        let ownerUsername = 'plugin';\n        if (this.props.fromApp) {\n            ownerUsername = 'Apps Framework';\n        } else if (this.props.owner && this.props.owner.username) {\n            ownerUsername = this.props.owner.username;\n        }\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        if (!matchesFilter(this.props.bot, filter, this.props.owner)) {\n            return null;\n        }\n\n        const tokenList = [];\n        Object.values(this.props.accessTokens).forEach((token) => {\n            let activeLink;\n            let disableClass = '';\n            let disabledText;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.disableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                disableClass = 'light';\n                disabledText = (\n                    <span className='mr-2 light'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.enableUserAccessToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='bot-list__item'\n                >\n                    <div className='item-details__row d-flex justify-content-between'>\n                        <div className={disableClass}>\n                            <div className='whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenDesc'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </b>\n                                {token.description}\n                            </div>\n                            <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                                <b>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.tokenId'\n                                        defaultMessage='Token ID: '\n                                    />\n                                </b>\n                                {token.id}\n                            </div>\n                        </div>\n                        <div>\n                            {disabledText}\n                            {activeLink}\n                            {' - '}\n                            <a\n                                id={token.id + '_delete'}\n                                href='#'\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    this.confirmRevokeToken(token.id);\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.tokens.delete'\n                                    defaultMessage='Delete'\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>,\n            );\n        });\n\n        let options;\n        if (ownerUsername !== 'plugin') {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        id='createToken'\n                        className='style--none color--link'\n                        onClick={this.openCreateToken}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.create_token'\n                            defaultMessage='Create New Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/bots/edit?id=${this.props.bot.user_id}`}>\n                        <FormattedMessage\n                            id='bots.manage.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <button\n                        className='style--none color--link'\n                        onClick={this.disableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.disable'\n                            defaultMessage='Disable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n        if (this.props.bot.delete_at !== 0) {\n            options = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.enableBot}\n                    >\n                        <FormattedMessage\n                            id='bot.manage.enable'\n                            defaultMessage='Enable'\n                        />\n                    </button>\n                </div>\n            );\n        }\n\n        if (this.state.creatingTokenState === 'OPEN') {\n            tokenList.push(\n                <div\n                    key={'create'}\n                    className='bot-list__item'\n                >\n                    <div key={'create'}>\n                        <form\n                            className='form-horizontal'\n                            onSubmit={this.handleCreateToken}\n                        >\n                            <div className='row'>\n                                <label\n                                    className='col-sm-auto control-label'\n                                    htmlFor='botToken'\n                                >\n                                    <FormattedMessage\n                                        id='user.settings.tokens.name'\n                                        defaultMessage='Token Description: '\n                                    />\n                                </label>\n                                <div className='col-sm-4'>\n                                    <input\n                                        id='botToken'\n                                        autoFocus={true}\n                                        className='form-control form-sm'\n                                        type='text'\n                                        maxLength={64}\n                                        value={this.state.token.description}\n                                        onChange={this.handleUpdateDescription}\n                                    />\n                                </div>\n                            </div>\n                            <div>\n                                <div className='pt-2 pb-2'>\n                                    <FormattedMessage\n                                        id='user.settings.tokens.nameHelp'\n                                        defaultMessage='Enter a description for your token to remember what it does.'\n                                    />\n                                </div>\n                                <label\n                                    id='clientError'\n                                    className='has-error is-empty'\n                                >\n                                    {this.state.error}\n                                </label>\n                                <div className='mt-2'>\n                                    <SaveButton\n                                        btnClass='btn-sm btn-primary'\n                                        savingMessage={\n                                            <FormattedMessage\n                                                id='user.settings.tokens.save'\n                                                defaultMessage='Save'\n                                            />\n                                        }\n                                        saving={false}\n                                    />\n                                    <button\n                                        className='btn btn-sm btn-tertiary'\n                                        onClick={this.closeCreateToken}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.tokens.cancel'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>,\n            );\n        } else if (this.state.creatingTokenState === 'CREATED') {\n            tokenList.push(\n                <div\n                    key={'created'}\n                    className='bot-list__item alert alert-warning'\n                >\n                    <div className='mb-2'>\n                        <WarningIcon additionalClassName='mr-2'/>\n                        <FormattedMessage\n                            id='user.settings.tokens.copy'\n                            defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                        />\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.token.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.token.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.token.token}\n                    </strong>\n                    <div className='mt-2'>\n                        <button\n                            className='btn btn-sm btn-primary'\n                            onClick={this.closeCreateToken}\n                        >\n                            <FormattedMessage\n                                id='bot.create_token.close'\n                                defaultMessage='Close'\n                            />\n                        </button>\n                    </div>\n                </div>,\n            );\n        }\n\n        const imageURL = Utils.imageURLForUser(this.props.user.id, this.props.user.last_picture_update);\n\n        return (\n            <div className='backstage-list__item'>\n                <div className={'bot-list-img-container'}>\n                    <img\n                        className={'bot-list-img'}\n                        alt={'bot image'}\n                        src={imageURL}\n                    />\n                </div>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName + ' (@' + username + ')'}\n                        </strong>\n                        {options}\n                    </div>\n                    <div className='bot-details__description'>\n                        <Markdown message={description}/>\n                    </div>\n                    <div className='light small'>\n                        <FormattedMessage\n                            id='bots.managed_by'\n                            defaultMessage='Managed by '\n                        />\n                        {ownerUsername}\n                    </div>\n                    <div className='bot-list is-empty'>\n                        {tokenList}\n                    </div>\n                </div>\n                <ConfirmModal\n                    title={\n                        <FormattedMessage\n                            id='bots.token.delete'\n                            defaultMessage='Delete Token'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='bots.token.confirm_text'\n                            defaultMessage='Are you sure you want to delete the token?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='bots.token.confirm'\n                            defaultMessage='Delete'\n                        />\n                    }\n                    modalClass='integrations-backstage-modal'\n                    show={this.state.confirmingId !== ''}\n                    onConfirm={this.revokeTokenConfirmed}\n                    onCancel={this.closeConfirm}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Bot as BotType} from '@mattermost/types/bots';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile, UserAccessToken} from '@mattermost/types/users';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport Bot, {matchesFilter} from './bot';\n\ntype Props = {\n\n    /**\n    *  Map from botUserId to bot.\n    */\n    bots: Record<string, BotType>;\n\n    /**\n     * List of bot IDs managed by the app framework\n     */\n    appsBotIDs: string[];\n\n    /**\n     * Whether apps framework is enabled\n     */\n    appsEnabled: boolean;\n\n    /**\n    *  Map from botUserId to accessTokens.\n    */\n    accessTokens?: RelationOneToOne<UserProfile, Record<string, UserAccessToken>>;\n\n    /**\n    *  Map from botUserId to owner.\n    */\n    owners: Record<string, UserProfile>;\n\n    /**\n    *  Map from botUserId to user.\n    */\n    users: Record<string, UserProfile>;\n    createBots?: boolean;\n\n    actions: {\n\n        /**\n         * Ensure we have bot accounts\n         */\n        loadBots: (page?: number, perPage?: number) => Promise<ActionResult<BotType[]>>;\n\n        /**\n        * Load access tokens for bot accounts\n        */\n        getUserAccessTokensForUser: (userId: string, page?: number, perPage?: number) => void;\n\n        /**\n        * Access token managment\n        */\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        enableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        disableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n\n        /**\n        * Load owner of bot account\n        */\n        getUser: (userId: string) => void;\n\n        /**\n        * Disable a bot\n        */\n        disableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n        * Enable a bot\n        */\n        enableBot: (userId: string) => Promise<ActionResult>;\n\n        /**\n         * Load bot IDs managed by the apps\n         */\n        fetchAppsBotIDs: () => Promise<ActionResult>;\n    };\n\n    /**\n    *  Only used for routing since backstage is team based.\n    */\n    team: Team;\n}\n\ntype State = {\n    loading: boolean;\n}\n\nexport default class Bots extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.props.actions.loadBots(\n            Constants.Integrations.START_PAGE_NUM,\n            Constants.Integrations.PAGE_SIZE,\n        ).then(\n            (result) => {\n                if (result.data) {\n                    const promises = [];\n\n                    for (const bot of result.data) {\n                        // We don't need to wait for this and we need to accept failure in the case where bot.owner_id is a plugin id\n                        this.props.actions.getUser(bot.owner_id);\n\n                        // We want to wait for these.\n                        promises.push(this.props.actions.getUser(bot.user_id));\n                        promises.push(this.props.actions.getUserAccessTokensForUser(bot.user_id));\n                    }\n\n                    Promise.all(promises).then(() => {\n                        this.setState({loading: false});\n                    });\n                }\n            },\n        );\n        if (this.props.appsEnabled) {\n            this.props.actions.fetchAppsBotIDs();\n        }\n    }\n\n    DisabledSection(props: {hasDisabled: boolean; disabledBots: JSX.Element[]; filter?: string}): JSX.Element | null {\n        if (!props.hasDisabled) {\n            return null;\n        }\n        const botsToDisplay = React.Children.map(props.disabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <>\n                <div className='bot-disabled'>\n                    <FormattedMessage\n                        id='bots.disabled'\n                        defaultMessage='Disabled'\n                    />\n                </div>\n                <div className='bot-list__disabled'>\n                    {botsToDisplay}\n                </div>\n            </>\n        );\n    }\n\n    EnabledSection(props: {enabledBots: JSX.Element[]; filter?: string}): JSX.Element {\n        const botsToDisplay = React.Children.map(props.enabledBots, (child) => {\n            return React.cloneElement(child, {filter: props.filter});\n        });\n        return (\n            <div>\n                {botsToDisplay}\n            </div>\n        );\n    }\n\n    botToJSX = (bot: BotType): JSX.Element => {\n        return (\n            <Bot\n                key={bot.user_id}\n                bot={bot}\n                owner={this.props.owners[bot.user_id]}\n                user={this.props.users[bot.user_id]}\n                accessTokens={(this.props.accessTokens && this.props.accessTokens[bot.user_id]) || {}}\n                actions={this.props.actions}\n                team={this.props.team}\n                fromApp={this.props.appsBotIDs.includes(bot.user_id)}\n            />\n        );\n    };\n\n    bots = (filter?: string): [JSX.Element[], boolean] => {\n        const bots = Object.values(this.props.bots).sort((a, b) => a.username.localeCompare(b.username));\n        const match = (bot: BotType) => matchesFilter(bot, filter, this.props.owners[bot.user_id]);\n        const enabledBots = bots.filter((bot) => bot.delete_at === 0).filter(match).map(this.botToJSX);\n        const disabledBots = bots.filter((bot) => bot.delete_at > 0).filter(match).map(this.botToJSX);\n        const sections = [(\n            <div key='sections'>\n                <this.EnabledSection\n                    enabledBots={enabledBots}\n                />\n                <this.DisabledSection\n                    hasDisabled={disabledBots.length > 0}\n                    disabledBots={disabledBots}\n                />\n            </div>\n        )];\n\n        return [sections, enabledBots.length > 0 || disabledBots.length > 0];\n    };\n\n    public render(): JSX.Element {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='bots.manage.header'\n                        defaultMessage='Bot Accounts'\n                    />\n                }\n                addText={this.props.createBots &&\n                    <FormattedMessage\n                        id='bots.manage.add'\n                        defaultMessage='Add Bot Account'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/bots/add'}\n                addButtonId='addBotAccount'\n                emptyText={\n                    <FormattedMessage\n                        id='bots.manage.empty'\n                        defaultMessage='No bot accounts found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMessage\n                        id='bots.emptySearch'\n                        defaultMessage='No bot accounts match <b>{searchTerm}</b>'\n                        values={{\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                }\n                helpText={\n                    <>\n                        <FormattedMessage\n                            id='bots.manage.help1'\n                            defaultMessage='Use {botAccounts} to integrate with Mattermost through plugins or the API. Bot accounts are available to everyone on your server. '\n                            values={{\n                                botAccounts: (\n                                    <ExternalLink\n                                        href='https://mattermost.com/pl/default-bot-accounts'\n                                        location='bots'\n                                    >\n                                        <FormattedMessage\n                                            id='bots.manage.bot_accounts'\n                                            defaultMessage='Bot Accounts'\n                                        />\n                                    </ExternalLink>\n                                ),\n                            }}\n                        />\n                        <FormattedMessage\n                            id='bots.help2'\n                            defaultMessage={'Enable bot account creation in the <a>System Console</a>.'}\n                            values={{\n                                a: (chunks: string) => <Link to='/admin_console/integrations/bot_accounts'>{chunks}</Link>,\n                            }}\n                        />\n                    </>\n                }\n                searchPlaceholder={Utils.localizeMessage({id: 'bots.manage.search', defaultMessage: 'Search Bot Accounts'})}\n                loading={this.state.loading}\n            >\n                {this.bots}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Bot as BotType} from '@mattermost/types/bots';\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {loadBots, disableBot, enableBot} from 'mattermost-redux/actions/bots';\nimport {getAppsBotIDs as fetchAppsBotIDs} from 'mattermost-redux/actions/integrations';\nimport {createUserAccessToken, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken, getUserAccessTokensForUser, getUser} from 'mattermost-redux/actions/users';\nimport {appsEnabled} from 'mattermost-redux/selectors/entities/apps';\nimport {getExternalBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getAppsBotIDs} from 'mattermost-redux/selectors/entities/integrations';\nimport * as UserSelectors from 'mattermost-redux/selectors/entities/users';\n\nimport Bots from './bots';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const createBots = config.EnableBotAccountCreation === 'true';\n    const bots = getExternalBotAccounts(state);\n    const botValues = Object.values(bots);\n    const owners = botValues.\n        reduce((result: Record<string, UserProfile>, bot: BotType) => {\n            result[bot.user_id] = UserSelectors.getUser(state, bot.owner_id);\n            return result;\n        }, {});\n    const users = botValues.\n        reduce((result: Record<string, UserProfile>, bot: BotType) => {\n            result[bot.user_id] = UserSelectors.getUser(state, bot.user_id);\n            return result;\n        }, {});\n\n    return {\n        createBots,\n        bots,\n        accessTokens: state.entities.admin.userAccessTokensByUser,\n        owners,\n        users,\n        appsBotIDs: getAppsBotIDs(state),\n        appsEnabled: appsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            fetchAppsBotIDs,\n            loadBots,\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            getUser,\n            disableBot,\n            enableBot,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bots);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent, FormEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Bot, BotPatch} from '@mattermost/types/bots';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserAccessToken, UserProfile} from '@mattermost/types/users';\n\nimport {General} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ExternalLink from 'components/external_link';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport WithTooltip from 'components/with_tooltip';\n\nimport BotDefaultIcon from 'images/bot_default_icon.png';\nimport {getHistory} from 'utils/browser_history';\nimport {AcceptedProfileImageTypes, Constants, DeveloperLinks, ValidationErrors} from 'utils/constants';\nimport * as FileUtils from 'utils/file_utils';\nimport * as Utils from 'utils/utils';\n\nconst roleOptionSystemAdmin = 'System Admin';\nconst roleOptionMember = 'Member';\n\nexport type Props = {\n\n    /**\n     *  Only used for routing since backstage is team based.\n     */\n    team: Team;\n\n    /**\n     *  Bot to edit (if editing)\n     */\n    bot?: Bot;\n\n    /**\n     *  Bot user\n     */\n    user?: UserProfile;\n\n    /**\n     *  Roles of the bot to edit (if editing)\n     */\n    roles?: string;\n\n    /**\n     * Maximum upload file size (for bot account profile picture)\n     */\n    maxFileSize: number;\n\n    /**\n     * Editing user has the MANAGE_SYSTEM permission\n     */\n    editingUserHasManageSystem: boolean;\n\n    /**\n     * Bot to edit\n     */\n    actions: {\n\n        /**\n         * Creates a new bot account.\n         */\n        createBot: (bot: Partial<Bot>) => Promise<ActionResult<Bot>>;\n\n        /**\n         * Patches an existing bot account.\n         */\n        patchBot: (botUserId: string, botPatch: Partial<BotPatch>) => Promise<ActionResult<Bot>>;\n\n        /**\n         * Uploads a user profile image\n         */\n        uploadProfileImage: (userId: string, image: File | string) => Promise<ActionResult>;\n\n        /**\n         * Set profile image to default\n         */\n        setDefaultProfileImage: (userId: string) => Promise<ActionResult>;\n\n        /**\n         * For creating default access token\n         */\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n\n        /**\n         * For creating setting bot to system admin or special posting permissions\n         */\n        updateUserRoles: (userId: string, roles: string) => Promise<ActionResult>;\n    };\n};\n\nexport type State = {\n    username: string;\n    displayName: string | undefined;\n    description: string | undefined;\n    role: string;\n    postAll: boolean;\n    postChannels: boolean;\n    error: JSX.Element | string;\n    adding: boolean;\n    image: string;\n    orientationStyles: { transform: string; transformOrigin: string };\n    pictureFile: File | null | string;\n};\n\nexport default class AddBot extends React.PureComponent<Props, State> {\n    previewBlob: string | null = null;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            error: '',\n            username: this.props.bot ? this.props.bot.username : '',\n            displayName: this.props.bot ? this.props.bot.display_name : '',\n            description: this.props.bot ? this.props.bot.description : '',\n            adding: false,\n            image: BotDefaultIcon,\n            role: UserUtils.isSystemAdmin(this.props.roles || '') ? roleOptionSystemAdmin : roleOptionMember,\n            postAll: this.props.bot ? UserUtils.hasPostAllRole(this.props.roles || '') : false,\n            postChannels: this.props.bot ? UserUtils.hasPostAllPublicRole(this.props.roles || '') : false,\n            orientationStyles: {transform: '', transformOrigin: ''},\n            pictureFile: null,\n        };\n    }\n\n    updateUsername = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            username: e.target.value,\n        });\n    };\n\n    updateDisplayName = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    };\n\n    updateDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    updateRole = (e: ChangeEvent<HTMLSelectElement>) => {\n        this.setState({\n            role: e.target.value,\n        });\n    };\n\n    updatePostAll = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            postAll: e.target.checked,\n        });\n    };\n\n    updatePostChannels = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            postChannels: e.target.checked,\n        });\n    };\n\n    updatePicture = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            const pictureFile = e.target.files[0];\n            this.previewBlob = URL.createObjectURL(pictureFile);\n\n            const reader = new FileReader();\n            reader.onload = (e2) => {\n                const orientation = FileUtils.getExifOrientation(e2.target?.result as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob || '',\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(pictureFile);\n            e.target.value = '';\n            this.setState({pictureFile});\n        } else {\n            this.setState({pictureFile: null, image: ''});\n        }\n    };\n\n    setDefault = () => {\n        this.setState({pictureFile: 'default', image: BotDefaultIcon});\n    };\n\n    isFile(file: File | string): file is File {\n        return (file as File).size !== undefined;\n    }\n\n    updateRoles = async (data: Bot) => {\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.role === roleOptionSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.postAll) {\n            roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n        } else if (this.state.postChannels) {\n            roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n        }\n\n        const rolesResult = await this.props.actions.updateUserRoles(data.user_id, roles);\n        if (rolesResult) {\n            return rolesResult.error;\n        }\n\n        return null;\n    };\n\n    handleSubmit = async (e: FormEvent<HTMLButtonElement | HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (this.state.adding) {\n            return;\n        }\n\n        if (!this.state.username || this.state.username.length < 3) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='bots.manage.add.invalid_username'\n                        defaultMessage='Usernames have to begin with a lowercase letter and be 3-22 characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (this.state.pictureFile && this.isFile(this.state.pictureFile)) {\n            if (!AcceptedProfileImageTypes.includes(this.state.pictureFile.type)) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.validImage'\n                            defaultMessage='Only BMP, JPG or PNG images may be used for profile pictures'\n                        />\n                    ),\n                });\n                return;\n            } else if (this.state.pictureFile.size > this.props.maxFileSize) {\n                this.setState({\n                    error: (\n                        <FormattedMessage\n                            id='user.settings.general.imageTooLarge'\n                            defaultMessage='Unable to upload profile image. File is too large.'\n                        />\n                    ),\n                });\n                return;\n            }\n        }\n\n        this.setState({\n            adding: true,\n            error: '',\n        });\n\n        const bot = {\n            username: this.state.username.toLowerCase().trim(),\n            display_name: this.state.displayName,\n            description: this.state.description,\n        };\n\n        let data: Bot | undefined;\n        let error;\n        if (this.props.bot) {\n            const result = await this.props.actions.patchBot(this.props.bot.user_id, bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage({id: 'bot.edit_failed', defaultMessage: 'Failed to edit bot'});\n            }\n\n            if (!error && data) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    const imageResult = await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                    error = imageResult.error;\n                } else if (this.state.pictureFile && this.state.pictureFile === 'default') {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                getHistory().push(`/${this.props.team.name}/integrations/bots`);\n                return;\n            }\n        } else {\n            const usernameError = Utils.isValidBotUsername(bot.username);\n            if (usernameError) {\n                let errObj;\n                if (usernameError.id === ValidationErrors.INVALID_LAST_CHARACTER) {\n                    errObj = {\n                        adding: false,\n                        error: (\n                            <FormattedMessage\n                                id='bots.manage.add.invalid_last_char'\n                                defaultMessage='Bot usernames cannot have a period as the last character'\n                            />\n                        ),\n                    };\n                } else {\n                    errObj = {\n                        adding: false,\n                        error: (\n                            <FormattedMessage\n                                id='bots.manage.add.invalid_username'\n                                defaultMessage='Usernames have to begin with a lowercase letter and be 3-22 characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                            />\n                        ),\n                    };\n                }\n                this.setState(errObj);\n                return;\n            }\n\n            const result = await this.props.actions.createBot(bot);\n            if (result) {\n                data = result.data;\n                error = result.error;\n            } else {\n                error = Utils.localizeMessage({id: 'bot.create_failed', defaultMessage: 'Failed to create bot'});\n            }\n\n            let token = '';\n            if (!error && data) {\n                if (this.state.pictureFile && this.state.pictureFile !== 'default') {\n                    await this.props.actions.uploadProfileImage(data.user_id, this.state.pictureFile);\n                } else {\n                    await this.props.actions.setDefaultProfileImage(data.user_id);\n                }\n                const tokenResult = await this.props.actions.createUserAccessToken(data.user_id,\n                    Utils.localizeMessage({id: 'bot.token.default.description', defaultMessage: 'Default Token'}),\n                );\n\n                // On error just skip the confirmation because we have a bot without a token.\n                if (!tokenResult || tokenResult.error) {\n                    getHistory().push(`/${this.props.team.name}/integrations/bots`);\n                    return;\n                }\n\n                token = tokenResult.data!.token!;\n            }\n\n            if (!error && data) {\n                error = this.updateRoles(data);\n            }\n\n            if (data) {\n                getHistory().push(`/${this.props.team.name}/integrations/confirm?type=bots&id=${data.user_id}&token=${token}`);\n                return;\n            }\n        }\n\n        this.setState({\n            adding: false,\n        });\n\n        if (error) {\n            this.setState({\n                error: error.message,\n            });\n        }\n    };\n\n    render() {\n        let subtitle = (\n            <FormattedMessage\n                id='bots.manage.add.add'\n                defaultMessage='Add'\n            />\n        );\n        let buttonText = (\n            <FormattedMessage\n                id='bots.manage.add.create'\n                defaultMessage='Create Bot Account'\n            />\n        );\n        let buttonActiveText = (\n            <FormattedMessage\n                id='bots.manage.add.creating'\n                defaultMessage='Creating...'\n            />\n        );\n\n        // If we are editing\n        if (this.props.bot) {\n            subtitle = (\n                <FormattedMessage\n                    id='bots.manage.edit'\n                    defaultMessage='Edit'\n                />\n            );\n            buttonText = (\n                <FormattedMessage\n                    id='bots.manage.edit.title'\n                    defaultMessage='Update'\n                />\n            );\n            buttonActiveText = (\n                <FormattedMessage\n                    id='bots.manage.edit.editing'\n                    defaultMessage='Updating...'\n                />\n            );\n        }\n\n        let imageURL = '';\n        let removeImageIcon: JSX.Element | null = (\n            <WithTooltip\n                title={\n                    <FormattedMessage\n                        id='bot.remove_profile_picture'\n                        defaultMessage='Remove Bot Icon'\n                    />\n                }\n            >\n                <a\n                    className={'bot-profile__remove'}\n                    onClick={this.setDefault}\n                >\n                    <span>{'×'}</span>\n                </a>\n            </WithTooltip>\n        );\n        let imageStyles;\n        if (this.props.bot && !this.state.pictureFile) {\n            if (this.props.user) {\n                imageURL = Utils.imageURLForUser(this.props.user.id, this.props.user.last_picture_update);\n            } else {\n                imageURL = Utils.imageURLForUser(this.props.bot.user_id);\n            }\n        } else {\n            imageURL = this.state.image;\n            imageStyles = this.state.orientationStyles;\n            if (this.state.image === BotDefaultIcon) {\n                removeImageIcon = null;\n            }\n        }\n\n        return (\n            <div className='backstage-content'>\n                <BackstageHeader>\n                    <Link to={`/${this.props.team.name}/integrations/bots`}>\n                        <FormattedMessage\n                            id='bots.manage.header'\n                            defaultMessage='Bot Accounts'\n                        />\n                    </Link>\n                    {subtitle}\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.username'\n                                    defaultMessage='Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='username'\n                                    type='text'\n                                    maxLength={22}\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.username.help'\n                                        defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='boticon'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.icon'\n                                    defaultMessage='Bot Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <div className={'bot-img-container'}>\n                                    <img\n                                        className={'bot-img'}\n                                        alt={'bot image'}\n                                        src={imageURL}\n                                        style={imageStyles}\n                                    />\n                                    {removeImageIcon}\n                                </div>\n                                <div\n                                    className='btn btn-primary btn-file'\n                                >\n                                    <FormattedMessage\n                                        id='bots.image.upload'\n                                        defaultMessage='Upload Image'\n                                    />\n                                    <input\n                                        className='btn-file__input'\n                                        accept={Constants.ACCEPT_STATIC_IMAGE}\n                                        type='file'\n                                        onChange={this.updatePicture}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='bots.add.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.display_name.help'\n                                        defaultMessage={'(Optional) You can choose to display your bot\\'s full name rather than its username.'}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={1024}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.description.help'\n                                        defaultMessage='(Optional) Let others know what this bot does.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='role'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.role'\n                                    defaultMessage='Role'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    className='form-control'\n                                    value={this.state.role}\n                                    disabled={!this.props.editingUserHasManageSystem}\n                                    onChange={this.updateRole}\n                                >\n                                    <option\n                                        value={roleOptionMember}\n                                    >\n                                        {Utils.localizeMessage({id: 'bot.add.role.member', defaultMessage: 'Member'})}\n                                    </option>\n                                    <option\n                                        value={roleOptionSystemAdmin}\n                                    >\n                                        {Utils.localizeMessage({id: 'bot.add.role.admin', defaultMessage: 'System Admin'})}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.role.help'\n                                        defaultMessage='Choose what role the bot should have.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='row bot-profile__section'>\n                            <div className='col-md-5 col-sm-8 col-sm-offset-4'>\n                                <FormattedMessage\n                                    id='admin.manage_roles.botAdditionalRoles'\n                                    defaultMessage='Select additional permissions for the account. <link>Read more about roles and permissions</link>.'\n                                    values={{\n                                        link: (msg: React.ReactNode) => (\n                                            <ExternalLink\n                                                href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                                location='add_bot'\n                                            >\n                                                {msg}\n                                            </ExternalLink>\n                                        ),\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postAll'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_all'\n                                    defaultMessage='post:all'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postAll'>\n                                        <input\n                                            id='postAll'\n                                            type='checkbox'\n                                            checked={this.state.postAll || this.state.role === roleOptionSystemAdmin}\n                                            onChange={this.updatePostAll}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_all.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_all.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost channels including direct messages.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='postChannels'\n                            >\n                                <FormattedMessage\n                                    id='bot.add.post_channels'\n                                    defaultMessage='post:channels'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <div className='checkbox no-padding'>\n                                    <label htmlFor='postChannels'>\n                                        <input\n                                            id='postChannels'\n                                            type='checkbox'\n                                            checked={this.state.postChannels || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                            onChange={this.updatePostChannels}\n                                            disabled={!this.props.editingUserHasManageSystem || this.state.role === roleOptionSystemAdmin || this.state.postAll}\n                                        />\n                                        <FormattedMessage\n                                            id='bot.add.post_channels.enabled'\n                                            defaultMessage='Enabled'\n                                        />\n                                    </label>\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='bot.add.post_channels.help'\n                                        defaultMessage='Bot will have access to post to all Mattermost public channels.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.state.error]}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={`/${this.props.team.name}/integrations/bots`}\n                            >\n                                <FormattedMessage\n                                    id='bots.manage.add.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.adding}\n                                spinningText={buttonActiveText}\n                                onClick={this.handleSubmit}\n                                id='saveBot'\n                            >\n                                {buttonText}\n                            </SpinnerButton>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {RouteComponentProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {createBot, patchBot} from 'mattermost-redux/actions/bots';\nimport {updateUserRoles, uploadProfileImage, setDefaultProfileImage, createUserAccessToken} from 'mattermost-redux/actions/users';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddBot from './add_bot';\n\ntype OwnProps = {\n\n    /**\n     * Search query for the bot\n     */\n    location: RouteComponentProps['location'];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const botId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const bots = getBotAccounts(state);\n    const bot = (bots && botId) ? bots[botId] : undefined;\n    const user = bot ? getUser(state, bot.user_id) : undefined;\n    const roles = user ? user.roles : undefined;\n    return {\n        maxFileSize: parseInt(config.MaxFileSize!, 10),\n        bot,\n        roles,\n        editingUserHasManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        user,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createBot,\n            patchBot,\n            uploadProfileImage,\n            setDefaultProfileImage,\n            createUserAccessToken,\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBot);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {OauthIcon, InformationOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\n\nimport {\n    getOutgoingOAuthConnectionsForAudience as fetchOutgoingOAuthConnectionsForAudience,\n    getOutgoingOAuthConnections as fetchOutgoingOAuthConnections,\n} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOutgoingOAuthConnections} from 'mattermost-redux/selectors/entities/integrations';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport LocalizedPlaceholderInput from 'components/localized_placeholder_input';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\ntype Props = {\n    value: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder: MessageDescriptor;\n}\n\nconst OAuthConnectionAudienceInput = (props: Props) => {\n    const mounted = useRef(false);\n    const [matchedConnection, setMatchingOAuthConnection] = useState<OutgoingOAuthConnection | null>(null);\n    const [loadingAudienceMatch, setLoadingAudienceMatch] = useState(false);\n\n    const oauthConnections = useSelector(getOutgoingOAuthConnections);\n    const oauthConnectionsEnabled = useSelector(getConfig).EnableOutgoingOAuthConnections === 'true';\n    const teamId = useSelector(getCurrentTeamId);\n\n    const dispatch = useDispatch();\n\n    const matchConnectionsOnInput = useCallback(async (inputValue: string) => {\n        const res = await dispatch(fetchOutgoingOAuthConnectionsForAudience(teamId, inputValue));\n        setLoadingAudienceMatch(false);\n\n        if (res.data && res.data.length) {\n            setMatchingOAuthConnection(res.data[0]);\n        } else {\n            setMatchingOAuthConnection(null);\n        }\n    }, [dispatch, teamId]);\n\n    const debouncedMatchConnections = useMemo(() => {\n        return debounce((inputValue: string) => matchConnectionsOnInput(inputValue), 1000);\n    }, [matchConnectionsOnInput]);\n\n    useEffect(() => {\n        if (mounted.current) {\n            return;\n        }\n        mounted.current = true;\n\n        if (oauthConnectionsEnabled) {\n            dispatch(fetchOutgoingOAuthConnections(teamId));\n            if (props.value) {\n                setLoadingAudienceMatch(true);\n                matchConnectionsOnInput(props.value);\n            }\n        }\n    }, [oauthConnectionsEnabled, props.value, teamId, matchConnectionsOnInput, dispatch, mounted]);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        props.onChange(e);\n\n        if (oauthConnectionsEnabled) {\n            setLoadingAudienceMatch(true);\n            debouncedMatchConnections(e.target.value);\n        }\n    };\n\n    const connections = Object.values(oauthConnections);\n\n    const input = (\n        <LocalizedPlaceholderInput\n            autoComplete='off'\n            id='url'\n            maxLength={1024}\n            className='form-control'\n            value={props.value}\n            onChange={onChange}\n            placeholder={props.placeholder}\n        />\n    );\n\n    if (!connections.length) {\n        return input;\n    }\n\n    let oauthMessage: React.ReactNode;\n\n    if (loadingAudienceMatch) {\n        oauthMessage = (\n            <span>\n                <LoadingSpinner/>\n            </span>\n        );\n    } else if (matchedConnection) {\n        oauthMessage = (\n            <>\n                <span>\n                    <OauthIcon\n                        size={20}\n                    />\n                </span>\n                <span className='outgoing-oauth-audience-match-message'>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.connected'\n                        defaultMessage='Connected to \"{connectionName}\"'\n                        values={{\n                            connectionName: matchedConnection.name,\n                        }}\n                    />\n                </span>\n            </>\n        );\n    } else {\n        oauthMessage = (\n            <>\n                <span>\n                    <InformationOutlineIcon\n                        size={20}\n                    />\n                </span>\n                <span className='outgoing-oauth-audience-match-message'>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.not_connected'\n                        defaultMessage='Not linked to an OAuth connection'\n                    />\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <>\n            {input}\n            <div className='outgoing-oauth-audience-match-message-container'>\n                {oauthMessage}\n            </div>\n        </>\n    );\n};\n\nexport default OAuthConnectionAudienceInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport {defineMessage, FormattedMessage, type MessageDescriptor} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ExternalLink from 'components/external_link';\nimport FormError from 'components/form_error';\nimport LocalizedPlaceholderInput from 'components/localized_placeholder_input';\nimport SpinnerButton from 'components/spinner_button';\n\nimport {Constants, DeveloperLinks} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport OAuthConnectionAudienceInput from './outgoing_oauth_connections/oauth_connection_audience_input';\n\nconst REQUEST_POST = 'P';\nconst REQUEST_GET = 'G';\n\ntype Props = {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * The header text to render, has id and defaultMessage\n    */\n    header: MessageDescriptor | string;\n\n    /**\n    * The footer text to render, has id and defaultMessage\n    */\n    footer: MessageDescriptor | string;\n\n    /**\n    * The spinner loading text to render, has id and defaultMessage\n    */\n    loading: MessageDescriptor | string;\n\n    /**\n    * Any extra component/node to render\n    */\n    renderExtra?: JSX.Element;\n\n    /**\n    * The server error text after a failed action\n    */\n    serverError: string;\n\n    /**\n    * The Command used to set the initial state\n    */\n    initialCommand?: Partial<Command>;\n\n    /**\n    * The async function to run when the action button is pressed\n    */\n    action: (command: Command) => Promise<void>;\n}\n\ntype State = {\n    saving: boolean;\n    clientError: null | JSX.Element | string;\n    trigger: string;\n    displayName: string;\n    description: string;\n    url: string;\n    method: 'P' | 'G' | '';\n    username: string;\n    iconUrl: string;\n    autocomplete: boolean;\n    autocompleteHint: string;\n    autocompleteDescription: string;\n}\n\nexport default class AbstractCommand extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.getStateFromCommand(this.props.initialCommand || {});\n    }\n\n    getStateFromCommand = (command: Props['initialCommand']): State => {\n        return {\n            displayName: command?.display_name ?? '',\n            description: command?.description ?? '',\n            trigger: command?.trigger ?? '',\n            url: command?.url ?? '',\n            method: command?.method ?? REQUEST_POST,\n            username: command?.username ?? '',\n            iconUrl: command?.icon_url ?? '',\n            autocomplete: command?.auto_complete ?? false,\n            autocompleteHint: command?.auto_complete_hint ?? '',\n            autocompleteDescription: command?.auto_complete_desc ?? '',\n            saving: false,\n            clientError: null,\n        };\n    };\n\n    getBackstageHeader = () => {\n        if (typeof this.props.header === 'string') {\n            return <span>{this.props.header}</span>;\n        }\n\n        return (\n            <FormattedMessage\n                id={this.props.header.id}\n                defaultMessage={this.props.header.defaultMessage}\n            />\n        );\n    };\n\n    getBackstageFooter = () => {\n        if (typeof this.props.footer === 'string') {\n            return <span>{this.props.footer}</span>;\n        }\n\n        return (\n            <FormattedMessage\n                id={this.props.footer.id}\n                defaultMessage={this.props.footer.defaultMessage}\n            />\n        );\n    };\n\n    handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (this.state.saving) {\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            clientError: '',\n        });\n\n        let triggerWord = this.state.trigger.trim().toLowerCase();\n        if (triggerWord.indexOf('/') === 0) {\n            triggerWord = triggerWord.substr(1);\n        }\n\n        const command = {\n            display_name: this.state.displayName,\n            description: this.state.description,\n            trigger: triggerWord,\n            url: this.state.url.trim(),\n            method: this.state.method,\n            username: this.state.username,\n            icon_url: this.state.iconUrl,\n            auto_complete: this.state.autocomplete,\n            team_id: this.props.team.id,\n            auto_complete_desc: '',\n            auto_complete_hint: '',\n            token: '',\n            create_at: 0,\n            update_at: 0,\n            delete_at: 0,\n            id: '',\n            creator_id: '',\n        };\n\n        if (command.auto_complete) {\n            command.auto_complete_desc = this.state.autocompleteDescription ?? '';\n            command.auto_complete_hint = this.state.autocompleteHint ?? '';\n        }\n\n        if (!command.trigger) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerRequired'\n                        defaultMessage='A trigger word is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf('/') === 0) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSlash'\n                        defaultMessage='A trigger word cannot begin with a /'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (command.trigger.indexOf(' ') !== -1) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidSpace'\n                        defaultMessage='A trigger word must not contain spaces'\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (command.trigger.length < Constants.MIN_TRIGGER_LENGTH ||\n            command.trigger.length > Constants.MAX_TRIGGER_LENGTH) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.triggerInvalidLength'\n                        defaultMessage='A trigger word must contain between {min} and {max} characters'\n                        values={{\n                            min: Constants.MIN_TRIGGER_LENGTH,\n                            max: Constants.MAX_TRIGGER_LENGTH,\n                        }}\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        if (!command.url) {\n            this.setState({\n                saving: false,\n                clientError: (\n                    <FormattedMessage\n                        id='add_command.urlRequired'\n                        defaultMessage='A request URL is required'\n                    />\n                ),\n            });\n\n            return;\n        }\n\n        this.props.action(command).then(() => this.setState({saving: false}));\n    };\n\n    updateDisplayName = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            displayName: e.target.value,\n        });\n    };\n\n    updateDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            description: e.target.value,\n        });\n    };\n\n    updateTrigger = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            trigger: e.target.value,\n        });\n    };\n\n    updateUrl = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            url: e.target.value,\n        });\n    };\n\n    updateMethod = (e: ChangeEvent<HTMLSelectElement>) => {\n        const methodValue = e.target.value;\n        if (methodValue === 'P' || methodValue === 'G' || methodValue === '') {\n            this.setState({\n                method: methodValue,\n            });\n        }\n    };\n\n    updateUsername = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            username: e.target.value,\n        });\n    };\n\n    updateIconUrl = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            iconUrl: e.target.value,\n        });\n    };\n\n    updateAutocomplete = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            autocomplete: e.target.checked,\n        });\n    };\n\n    updateAutocompleteHint = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            autocompleteHint: e.target.value,\n        });\n    };\n\n    updateAutocompleteDescription = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            autocompleteDescription: e.target.value,\n        });\n    };\n\n    render() {\n        let autocompleteHint = null;\n        let autocompleteDescription = null;\n\n        if (this.state.autocomplete) {\n            autocompleteHint = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteHint'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteHint'\n                            defaultMessage='Autocomplete Hint'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedPlaceholderInput\n                            id='autocompleteHint'\n                            type='text'\n                            maxLength={1024}\n                            className='form-control'\n                            value={this.state.autocompleteHint}\n                            onChange={this.updateAutocompleteHint}\n                            placeholder={defineMessage({\n                                id: 'add_command.autocompleteHint.placeholder',\n                                defaultMessage: 'Example: [Patient Name]',\n                            })}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteHint.help'\n                                defaultMessage='(Optional) Specify the arguments associated with your slash command. These are displayed as help on the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n\n            autocompleteDescription = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='autocompleteDescription'\n                    >\n                        <FormattedMessage\n                            id='add_command.autocompleteDescription'\n                            defaultMessage='Autocomplete Description'\n                        />\n                    </label>\n                    <div className='col-md-5 col-sm-8'>\n                        <LocalizedPlaceholderInput\n                            id='description'\n                            type='text'\n                            maxLength={128}\n                            className='form-control'\n                            value={this.state.autocompleteDescription}\n                            onChange={this.updateAutocompleteDescription}\n                            placeholder={defineMessage({\n                                id: 'add_command.autocompleteDescription.placeholder',\n                                defaultMessage: 'Example: \"Returns search results for patient records\"',\n                            })}\n                        />\n                        <div className='form__help'>\n                            <FormattedMessage\n                                id='add_command.autocompleteDescription.help'\n                                defaultMessage='(Optional) Describe your slash command for the autocomplete list.'\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-content row'>\n                <BackstageHeader>\n                    <Link to={'/' + this.props.team.name + '/integrations/commands'}>\n                        <FormattedMessage\n                            id='installed_command.header'\n                            defaultMessage='Slash Commands'\n                        />\n                    </Link>\n                    {this.getBackstageHeader()}\n                </BackstageHeader>\n                <div className='backstage-form'>\n                    <form\n                        className='form-horizontal'\n                        onSubmit={this.handleSubmit}\n                    >\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='displayName'\n                            >\n                                <FormattedMessage\n                                    id='add_command.displayName'\n                                    defaultMessage='Title'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='displayName'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.displayName}\n                                    onChange={this.updateDisplayName}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.displayName.help'\n                                        defaultMessage='Specify a title, of up to 64 characters, for the slash command settings page.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='description'\n                            >\n                                <FormattedMessage\n                                    id='add_command.description'\n                                    defaultMessage='Description'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <input\n                                    id='description'\n                                    type='text'\n                                    maxLength={128}\n                                    className='form-control'\n                                    value={this.state.description}\n                                    onChange={this.updateDescription}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.description.help'\n                                        defaultMessage='Describe your slash command.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='trigger'\n                            >\n                                <FormattedMessage\n                                    id='add_command.trigger'\n                                    defaultMessage='Command Trigger Word'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedPlaceholderInput\n                                    id='trigger'\n                                    type='text'\n                                    maxLength={Constants.MAX_TRIGGER_LENGTH}\n                                    className='form-control'\n                                    value={this.state.trigger}\n                                    onChange={this.updateTrigger}\n                                    placeholder={defineMessage({\n                                        id: 'add_command.trigger.placeholder',\n                                        defaultMessage: 'Command trigger e.g. \"hello\" not including the slash',\n                                    })}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.help'\n                                        defaultMessage='Specify a trigger word that is not a built-in command, does not contain spaces, and does not begin with the slash character.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpExamples'\n                                        defaultMessage='Examples: client, employee, patient, weather'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.trigger.helpReserved'\n                                        defaultMessage='Reserved: {link}'\n                                        values={{\n                                            link: (\n                                                <ExternalLink\n                                                    href={DeveloperLinks.CUSTOM_SLASH_COMMANDS}\n                                                    location='abstract_command'\n                                                >\n                                                    <FormattedMessage\n                                                        id='add_command.trigger.helpReservedLinkText'\n                                                        defaultMessage='See built-in slash commands'\n                                                    />\n                                                </ExternalLink>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='url'\n                            >\n                                <FormattedMessage\n                                    id='add_command.url'\n                                    defaultMessage='Request URL'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <OAuthConnectionAudienceInput\n                                    value={this.state.url}\n                                    onChange={this.updateUrl}\n                                    placeholder={defineMessage({\n                                        id: 'add_command.url.placeholder',\n                                        defaultMessage: 'Must start with http:// or https://',\n                                    })}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.url.help'\n                                        defaultMessage='Specify the callback URL to receive the HTTP POST or GET event request when the slash command is run.'\n                                    />\n                                </div>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id={'add_command.outgoing_oauth_connections.help_text'}\n                                        defaultMessage={'You can connect commands to <link>outgoing OAuth connections</link>.'}\n                                        values={{\n                                            link: (text: string) => (\n                                                <a href='https://mattermost.com/pl/outgoing-oauth-connections'>{text}</a>\n                                            ),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='method'\n                            >\n                                <FormattedMessage\n                                    id='add_command.method'\n                                    defaultMessage='Request Method'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <select\n                                    id='method'\n                                    className='form-control'\n                                    value={this.state.method}\n                                    onChange={this.updateMethod}\n                                >\n                                    <option value={REQUEST_POST}>\n                                        {Utils.localizeMessage({id: 'add_command.method.post', defaultMessage: 'POST'})}\n                                    </option>\n                                    <option value={REQUEST_GET}>\n                                        {Utils.localizeMessage({id: 'add_command.method.get', defaultMessage: 'GET'})}\n                                    </option>\n                                </select>\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.method.help'\n                                        defaultMessage='Specify the type of request, either POST or GET, sent to the endpoint that Mattermost hits to reach your application.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='username'\n                            >\n                                <FormattedMessage\n                                    id='add_command.username'\n                                    defaultMessage='Response Username'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedPlaceholderInput\n                                    id='username'\n                                    type='text'\n                                    maxLength={64}\n                                    className='form-control'\n                                    value={this.state.username}\n                                    onChange={this.updateUsername}\n                                    placeholder={defineMessage({\n                                        id: 'add_command.username.placeholder',\n                                        defaultMessage: 'Username',\n                                    })}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.username.help'\n                                        defaultMessage='(Optional) Specify the name to use when posting responses for this slash command. Usernames can be up to 22 characters, and contain lowercase letters, numbers, and the symbols \\\"-\\\", \\\"_\\\", and \\\".\\\". If left blank, your Mattermost username is used.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='iconUrl'\n                            >\n                                <FormattedMessage\n                                    id='add_command.iconUrl'\n                                    defaultMessage='Response Icon'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8'>\n                                <LocalizedPlaceholderInput\n                                    id='iconUrl'\n                                    type='text'\n                                    maxLength={1024}\n                                    className='form-control'\n                                    value={this.state.iconUrl}\n                                    onChange={this.updateIconUrl}\n                                    placeholder={defineMessage({\n                                        id: 'add_command.iconUrl.placeholder',\n                                        defaultMessage: 'https://www.example.com/myicon.png',\n                                    })}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.iconUrl.help'\n                                        defaultMessage='(Optional) Enter the URL of a .png or .jpg file to use as the icon when posting responses to this slash command. The file must be at least 128 pixels by 128 pixels. If left blank, your profile picture is used.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                                htmlFor='autocomplete'\n                            >\n                                <FormattedMessage\n                                    id='add_command.autocomplete'\n                                    defaultMessage='Autocomplete'\n                                />\n                            </label>\n                            <div className='col-md-5 col-sm-8 checkbox'>\n                                <input\n                                    id='autocomplete'\n                                    type='checkbox'\n                                    checked={this.state.autocomplete}\n                                    onChange={this.updateAutocomplete}\n                                />\n                                <div className='form__help'>\n                                    <FormattedMessage\n                                        id='add_command.autocomplete.help'\n                                        defaultMessage='(Optional) Show your slash command on the autocomplete list when someone types \"/\" in the input box.'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {autocompleteHint}\n                        {autocompleteDescription}\n                        <div className='backstage-form__footer'>\n                            <FormError\n                                type='backstage'\n                                errors={[this.props.serverError, this.state.clientError]}\n                            />\n                            <Link\n                                className='btn btn-tertiary'\n                                to={'/' + this.props.team.name + '/integrations/commands'}\n                            >\n                                <FormattedMessage\n                                    id='add_command.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Link>\n                            <SpinnerButton\n                                className='btn btn-primary'\n                                type='submit'\n                                spinning={this.state.saving}\n                                spinningText={this.props.loading}\n                                onClick={this.handleSubmit}\n                                id='saveCommand'\n                            >\n                                {this.getBackstageFooter()}\n                            </SpinnerButton>\n                            {this.props.renderExtra}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions.js';\n\nimport AbstractCommand from '../abstract_command';\n\nexport type Props = {\n\n    /**\n    * The team data\n    */\n    team: Team;\n\n    actions: {\n\n        /**\n        * The function to call to add new command\n        */\n        addCommand: (command: Command) => Promise<ActionResult<Command>>;\n    };\n};\n\nconst AddCommand = ({team, actions}: Props) => {\n    const history = useHistory();\n    const {formatMessage} = useIntl();\n    const headerMessage = formatMessage({id: ('integrations.add'), defaultMessage: 'Add'}) as MessageDescriptor;\n    const footerMessage = formatMessage({id: ('add_command.save'), defaultMessage: 'Save'}) as MessageDescriptor;\n    const loadingMessage = formatMessage({id: ('add_command.saving'), defaultMessage: 'Saving...'}) as MessageDescriptor;\n    const [serverError, setServerError] = useState('');\n\n    const addCommand = async (command: Command) => {\n        setServerError('');\n\n        const {data, error} = await actions.addCommand(command);\n        if (data) {\n            history.push(`/${team.name}/integrations/commands/confirm?type=commands&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractCommand\n            team={team}\n            header={headerMessage}\n            footer={footerMessage}\n            loading={loadingMessage}\n            action={addCommand}\n            serverError={serverError}\n        />\n    );\n};\n\nexport default AddCommand;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {addCommand} from 'mattermost-redux/actions/integrations';\n\nimport AddCommand from './add_command';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            addCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useIntl} from 'react-intl';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport {copyToClipboard} from 'utils/utils';\n\ntype Props = {\n    label: MessageDescriptor;\n    value: string;\n};\n\nconst CopyText = ({\n    label,\n    value,\n}: Props) => {\n    const intl = useIntl();\n\n    const copyText = useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n        copyToClipboard(value);\n    }, [value]);\n\n    if (!document.queryCommandSupported('copy')) {\n        return null;\n    }\n\n    return (\n        <WithTooltip title={label}>\n            <button\n                data-testid='copyText'\n                className='btn btn-link icon-content-copy ml-2'\n                aria-label={intl.formatMessage(label)}\n                onClick={copyText}\n            />\n        </WithTooltip>\n    );\n};\n\nexport default React.memo(CopyText);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {Link, useHistory} from 'react-router-dom';\n\nimport type {Bot} from '@mattermost/types/bots';\nimport type {Command, IncomingWebhook, OAuthApp, OutgoingOAuthConnection, OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport CopyText from 'components/copy_text';\nimport ExternalLink from 'components/external_link';\n\nimport {Constants, DeveloperLinks, ErrorPageTypes} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\n\ntype Props = {\n    team: Team;\n    location: {search: string};\n    commands: IDMappedObjects<Command>;\n    oauthApps: IDMappedObjects<OAuthApp>;\n    incomingHooks: IDMappedObjects<IncomingWebhook>;\n    outgoingHooks: IDMappedObjects<OutgoingWebhook>;\n    bots: Record<string, Bot>;\n    outgoingOAuthConnections: Record<string, OutgoingOAuthConnection>;\n}\n\nconst ConfirmIntegration = ({team, location, commands, oauthApps, incomingHooks, outgoingHooks, bots, outgoingOAuthConnections}: Props): JSX.Element | null => {\n    const history = useHistory();\n\n    const type = (new URLSearchParams(location.search)).get('type') || '';\n    const id = (new URLSearchParams(location.search)).get('id') || '';\n\n    useEffect(() => {\n        window.addEventListener('keypress', handleKeyPress);\n\n        return () => {\n            window.removeEventListener('keypress', handleKeyPress);\n        };\n    });\n\n    const handleKeyPress = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            history.push('/' + team.name + '/integrations/' + type);\n        }\n    };\n\n    let headerText: JSX.Element;\n    let helpText: JSX.Element | JSX.Element[];\n    let tokenText: JSX.Element;\n\n    const command = commands[id];\n    const incomingHook = incomingHooks[id];\n    const outgoingHook = outgoingHooks[id];\n    const oauthApp = oauthApps[id];\n    const outgoingOAuthConnection = outgoingOAuthConnections[id];\n    const bot = bots[id];\n\n    if (type === Constants.Integrations.COMMAND && command) {\n        const commandToken = command.token;\n\n        headerText = (\n            <FormattedMessage\n                id='slash_commands.header'\n                defaultMessage='Slash Commands'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_command.doneHelp'\n                    defaultMessage='Your slash command is set up. The following token will be sent in the outgoing payload. Please use it to verify the request came from your Mattermost team (details at <link>Slash Commands</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_CUSTOM_SLASH_COMMANDS}\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMessage\n                    id='add_command.token'\n                    defaultMessage='<b>Token</b>: {token}'\n                    values={{\n                        token: <code>{commandToken}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyToken}\n                    value={commandToken}\n                />\n            </p>\n        );\n    } else if (type === Constants.Integrations.INCOMING_WEBHOOK && incomingHook) {\n        const incomingHookToken = getSiteURL() + '/hooks/' + incomingHook.id;\n\n        headerText = (\n            <FormattedMessage\n                id={'incoming_webhooks.header'}\n                defaultMessage='Incoming Webhooks'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_incoming_webhook.doneHelp'\n                    defaultMessage='Your incoming webhook is set up. Please send data to the following URL (details at <link>Incoming Webhooks</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_INCOMING_WEBHOOKS}\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMessage\n                    id='add_incoming_webhook.url'\n                    defaultMessage='<b>URL</b>: {url}'\n                    values={{\n                        url: <code>{incomingHookToken}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyToken}\n                    value={incomingHookToken}\n                />\n            </p>\n        );\n    } else if (type === Constants.Integrations.OUTGOING_WEBHOOK && outgoingHook) {\n        const outgoingHookToken = outgoingHook.token;\n\n        headerText = (\n            <FormattedMessage\n                id={'add_outgoing_webhook.header'}\n                defaultMessage='Outgoing Webhooks'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='add_outgoing_webhook.doneHelp'\n                    defaultMessage='Your outgoing webhook is set up. The following token will be sent in the outgoing payload. Please use it to verify that the request came from your Mattermost team (details at <link>Outgoing Webhooks</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_OUTGOING_WEBHOOKS}\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMessage\n                    id='add_outgoing_webhook.token'\n                    defaultMessage='<b>Token</b>: {token}'\n                    values={{\n                        token: <code>{outgoingHookToken}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyToken}\n                    value={outgoingHookToken}\n                />\n            </p>\n        );\n    } else if (type === Constants.Integrations.OAUTH_APP && oauthApp) {\n        const oauthAppToken = oauthApp.id;\n        const oauthAppSecret = oauthApp.client_secret;\n\n        headerText = (\n            <FormattedMessage\n                id={'installed_oauth2_apps.header'}\n                defaultMessage='OAuth 2.0 Applications'\n            />\n        );\n\n        helpText = [];\n        helpText.push(\n            <p key='add_oauth_app.doneHelp'>\n                <FormattedMessage\n                    id='add_oauth_app.doneHelp'\n                    defaultMessage='Your OAuth 2.0 application is set up. Please use the following Client ID and Client Secret when requesting authorization for your application (details at <link>oAuth 2 Applications</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_OAUTH2}\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>,\n        );\n        helpText.push(\n            <p key='add_oauth_app.clientId'>\n                <FormattedMessage\n                    id='add_oauth_app.clientId'\n                    defaultMessage='<b>Client ID</b>: {id}'\n                    values={{\n                        id: <code>{oauthAppToken}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyClientId}\n                    value={oauthAppToken}\n                />\n                <br/>\n                <FormattedMessage\n                    id='add_oauth_app.clientSecret'\n                    defaultMessage='<b>Client Secret</b>: {secret}'\n                    values={{\n                        secret: <code>{oauthAppSecret}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyClientSecret}\n                    value={oauthAppSecret}\n                />\n            </p>,\n        );\n\n        helpText.push(\n            <p key='add_oauth_app.doneUrlHelp'>\n                <FormattedMessage\n                    id='add_oauth_app.doneUrlHelp'\n                    defaultMessage='Here are your authorized redirect URLs.'\n                />\n            </p>,\n        );\n\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMessage\n                    id='add_oauth_app.url'\n                    defaultMessage='<b>URL(s)</b>: {url}'\n                    values={{\n                        url: oauthApp.callback_urls.join(', '),\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n            </p>\n        );\n    } else if (type === Constants.Integrations.OUTGOING_OAUTH_CONNECTIONS && outgoingOAuthConnection) {\n        const clientId = outgoingOAuthConnection.client_id;\n        const clientSecret = outgoingOAuthConnection.client_secret;\n        const username = outgoingOAuthConnection.credentials_username;\n        const password = outgoingOAuthConnection.credentials_password;\n\n        headerText = (\n            <FormattedMessage\n                id='installed_outgoing_oauth_connections.header'\n                defaultMessage='Outgoing OAuth 2.0 Connections'\n            />\n        );\n\n        helpText = [];\n        helpText.push(\n            <p key='add_outgoing_oauth_connection.doneHelp'>\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.doneHelp'\n                    defaultMessage='Your Outgoing OAuth 2.0 Connection is set up. When a request is sent to one of the following Audience URLs, the Client ID and Client Secret will now be used to retrieve a token from the Token URL, before sending the integration request (details at <link>Outgoing OAuth 2.0 Connections</link>).'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_OAUTH2} // TODO: dev docs for outgoing oauth connections feature\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>,\n        );\n        helpText.push(\n            <p key='add_outgoing_oauth_connection.clientId'>\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.clientId'\n                    defaultMessage='<b>Client ID</b>: {id}'\n                    values={{\n                        id: <code>{clientId}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <br/>\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.clientSecret'\n                    defaultMessage='<b>Client Secret</b>: \\*\\*\\*\\*\\*\\*\\*\\*'\n                    values={{\n                        secret: clientSecret,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n            </p>,\n        );\n\n        if (outgoingOAuthConnection.grant_type === 'password') {\n            helpText.push(\n                <p key='add_outgoing_oauth_connection.username'>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.username'\n                        defaultMessage='<b>Username</b>: {username}'\n                        values={{\n                            username,\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                    <CopyText\n                        label={messages.copyUsername}\n                        value={username || ''}\n                    />\n                    <br/>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.password'\n                        defaultMessage='<b>Password</b>: {password}'\n                        values={{\n                            password,\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                </p>,\n            );\n        }\n\n        tokenText = (\n            <>\n                <p className='word-break--all'>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.token_url'\n                        defaultMessage='<b>Token URL</b>: {url}'\n                        values={{\n                            url: <code>{outgoingOAuthConnection.oauth_token_url}</code>,\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                </p>\n                <p className='word-break--all'>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.audience_urls'\n                        defaultMessage='<b>Audience URL(s)</b>: {url}'\n                        values={{\n                            url: <code>{outgoingOAuthConnection.audiences.join(', ')}</code>,\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                </p>\n            </>\n        );\n    } else if (type === Constants.Integrations.BOT && bot) {\n        const botToken = (new URLSearchParams(location.search)).get('token') || '';\n\n        headerText = (\n            <FormattedMessage\n                id='bots.manage.header'\n                defaultMessage='Bot Accounts'\n            />\n        );\n        helpText = (\n            <p>\n                <FormattedMessage\n                    id='bots.manage.created.text'\n                    defaultMessage='Your bot account **{botname}** has been created successfully. Please use the following access token to connect to the bot (see [documentation](https://mattermost.com/pl/default-bot-accounts) for further details).'\n                    values={{\n                        botname: bot.display_name || bot.username,\n                        b: (msg: string) => <b>{msg}</b>,\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href='https://mattermost.com/pl/default-bot-accounts'\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>\n        );\n        tokenText = (\n            <p className='word-break--all'>\n                <FormattedMessage\n                    id='add_outgoing_webhook.token'\n                    defaultMessage='<b>Token</b>: {token}'\n                    values={{\n                        token: <code>{botToken}</code>,\n                        b: (chunks: string) => <b>{chunks}</b>,\n                    }}\n                />\n                <CopyText\n                    label={messages.copyToken}\n                    value={botToken}\n                />\n                <br/>\n                <br/>\n                <FormattedMessage\n                    id='add_outgoing_webhook.token.message'\n                    defaultMessage='Make sure to add this bot account to teams and channels you want it to interact in. See <link>documentation</link> to learn more.'\n                    values={{\n                        link: (msg: string) => (\n                            <ExternalLink\n                                href='https://mattermost.com/pl/default-bot-accounts'\n                                location='confirm_integration'\n                            >\n                                {msg}\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            </p>\n        );\n    } else {\n        history.replace(`/error?type=${ErrorPageTypes.PAGE_NOT_FOUND}`);\n        return null;\n    }\n\n    return (\n        <div className='backstage-content row'>\n            <BackstageHeader>\n                <Link to={'/' + team.name + '/integrations/' + type}>\n                    {headerText}\n                </Link>\n                <FormattedMessage\n                    id='integrations.add'\n                    defaultMessage='Add'\n                />\n            </BackstageHeader>\n            <div className='backstage-form backstage-form__confirmation'>\n                <h4\n                    className='backstage-form__title'\n                    id='formTitle'\n                >\n                    <FormattedMessage\n                        id='integrations.successful'\n                        defaultMessage='Setup Successful'\n                    />\n                </h4>\n                {helpText}\n                {tokenText}\n                <div className='backstage-form__footer'>\n                    <Link\n                        className='btn btn-primary'\n                        type='submit'\n                        to={'/' + team.name + '/integrations/' + type}\n                        id='doneButton'\n                    >\n                        <FormattedMessage\n                            id='integrations.done'\n                            defaultMessage='Done'\n                        />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst messages = defineMessages({\n    copyClientId: {\n        id: 'integrations.copy_client_id',\n        defaultMessage: 'Copy Client Id',\n    },\n    copyClientSecret: {\n        id: 'integrations.copy_client_secret',\n        defaultMessage: 'Copy Client Secret',\n    },\n    copyToken: {\n        id: 'integrations.copy_token',\n        defaultMessage: 'Copy Token',\n    },\n    copyUsername: {\n        id: 'integrations.copy_username',\n        defaultMessage: 'Copy Username',\n    },\n});\n\nexport default ConfirmIntegration;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {getCommands, getOAuthApps, getIncomingHooks, getOutgoingHooks, getOutgoingOAuthConnections} from 'mattermost-redux/selectors/entities/integrations';\n\nimport type {GlobalState} from 'types/store';\n\nimport ConfirmIntegration from './confirm_integration';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        commands: getCommands(state),\n        oauthApps: getOAuthApps(state),\n        incomingHooks: getIncomingHooks(state),\n        outgoingHooks: getOutgoingHooks(state),\n        bots: getBotAccounts(state),\n        outgoingOAuthConnections: getOutgoingOAuthConnections(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ConfirmIntegration);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {getHistory} from 'utils/browser_history';\n\nimport AbstractCommand from '../abstract_command';\n\nconst messages = defineMessages({\n    footer: {\n        id: 'edit_command.update',\n        defaultMessage: 'Update',\n    },\n    header: {\n        id: 'integrations.edit',\n        defaultMessage: 'Edit',\n    },\n    loading: {\n        id: 'edit_command.updating',\n        defaultMessage: 'Updating...',\n    },\n});\n\ntype Props = {\n\n    /**\n    * The current team\n    */\n    team: Team;\n\n    /**\n    * The id of the command to edit\n    */\n    commandId: string | null;\n\n    /**\n    * Installed slash commands to display\n    */\n    commands: RelationOneToOne<Command, Command>;\n    actions: {\n\n        /**\n        * The function to call to fetch team commands\n        */\n        getCustomTeamCommands: (teamId: string) => Promise<ActionResult>;\n\n        /**\n        * The function to call to edit command\n        */\n        editCommand: (command: Command) => Promise<ActionResult>;\n    };\n\n    /**\n    * Whether or not commands are enabled.\n    */\n    enableCommands: boolean;\n}\n\ntype State = {\n    originalCommand: Command | null;\n    showConfirmModal: boolean;\n    serverError: string;\n}\n\nexport default class EditCommand extends React.PureComponent<Props, State> {\n    private newCommand?: Command;\n\n    public constructor(props: Props) {\n        super(props);\n        this.newCommand = undefined;\n\n        this.state = {\n            originalCommand: null,\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    public componentDidMount(): void {\n        if (this.props.enableCommands) {\n            this.props.actions.getCustomTeamCommands(this.props.team.id).then(\n                () => {\n                    this.setState({\n                        originalCommand: Object.values(this.props.commands).filter((command) => command.id === this.props.commandId)[0],\n                    });\n                },\n            );\n        }\n    }\n\n    public editCommand = async (command: Command): Promise<void> => {\n        this.newCommand = command;\n\n        if (this.state.originalCommand?.id) {\n            command.id = this.state.originalCommand.id;\n        }\n\n        if (this.state.originalCommand?.url !== this.newCommand.url ||\n            this.state.originalCommand?.trigger !== this.newCommand.trigger ||\n            this.state.originalCommand?.method !== this.newCommand.method) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitCommand();\n        }\n    };\n\n    public handleConfirmModal = (): void => {\n        this.setState({showConfirmModal: true});\n    };\n\n    public confirmModalDismissed = (): void => {\n        this.setState({showConfirmModal: false});\n    };\n\n    public submitCommand = async (): Promise<void> => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.editCommand(this.newCommand!);\n\n        if (data) {\n            getHistory().push(`/${this.props.team.name}/integrations/commands`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    public renderExtra = (): JSX.Element => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_command.confirm'\n                defaultMessage='Edit Slash Command'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_command.question'\n                defaultMessage='Your changes may break the existing slash command. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                modalClass='integrations-backstage-modal'\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitCommand}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    };\n\n    public render(): JSX.Element {\n        if (!this.state.originalCommand) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractCommand\n                team={this.props.team}\n                header={messages.header}\n                footer={messages.footer}\n                loading={messages.loading}\n                renderExtra={this.renderExtra()}\n                action={this.editCommand}\n                serverError={this.state.serverError}\n                initialCommand={this.state.originalCommand}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {editCommand, getCustomTeamCommands} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\n\nimport EditCommand from './edit_command';\n\ntype Props = {\n    location: Location;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const commandId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commandId,\n        commands: getCommands(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getCustomTeamCommands,\n            editCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCommand);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport CopyText from 'components/copy_text';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\ntype Props = {\n\n    /**\n     * The team data\n     */\n    team: Team;\n\n    /**\n     * Installed slash command to display\n     */\n    command: Command;\n\n    /**\n     * The function to call when Regenerate Token link is clicked\n     */\n    onRegenToken: (command: Command) => void ;\n\n    /**\n     * The function to call when Delete link is clicked\n     */\n    onDelete: (command: Command) => void ;\n\n    /**\n     * Set to filter command, comes from BackstageList\n     */\n    filter?: string;\n\n    /**\n     * The creator user data\n     */\n    creator: UserProfile;\n\n    /**\n     * Set to show edit link\n     */\n    canChange: boolean;\n}\n\nexport function matchesFilter(command: Command, filter?: string) {\n    if (!filter) {\n        return true;\n    }\n\n    return command.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        command.description.toLowerCase().indexOf(filter) !== -1 ||\n        command.trigger.toLowerCase().indexOf(filter) !== -1;\n}\n\nexport default class InstalledCommand extends React.PureComponent<Props> {\n    handleRegenToken = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.command);\n    };\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.command);\n    };\n\n    render() {\n        const command = this.props.command;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(command, filter)) {\n            return null;\n        }\n\n        let name;\n\n        if (command.display_name) {\n            name = command.display_name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_commands.unnamed_command'\n                    defaultMessage='Unnamed Slash Command'\n                />\n            );\n        }\n\n        let description = null;\n        if (command.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {command.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let trigger = '- /' + command.trigger;\n        if (command.auto_complete && command.auto_complete_hint) {\n            trigger += ' ' + command.auto_complete_hint;\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regenerate Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/commands/edit?id=${command.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_commands.delete.confirm'\n                                defaultMessage='This action permanently deletes the slash command and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const commandToken = command.token;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <div className='item-details__name'>\n                            <strong>\n                                {name}\n                            </strong>\n                        </div>\n                        <span className='item-details__trigger'>\n                            {trigger}\n                        </span>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: <code>{commandToken}</code>,\n                                }}\n                            />\n                            <CopyText\n                                label={defineMessage({\n                                    id: 'integrations.copy_token',\n                                    defaultMessage: 'Copy Token',\n                                })}\n                                value={commandToken}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: command.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\n\nimport {DeveloperLinks} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport InstalledCommand, {matchesFilter} from '../installed_command';\n\ntype Props = {\n    team: Team;\n    user: UserProfile;\n    users: RelationOneToOne<UserProfile, UserProfile>;\n\n    // Installed slash commands to display\n    commands: Command[];\n    loading: boolean;\n\n    // Set to allow changes to installed slash commands\n    canManageOthersSlashCommands: boolean;\n    actions: {\n\n        // The function to call when Regenerate Token link is clicked\n        regenCommandToken: (id: string) => Promise<ActionResult>;\n\n        // The function to call when Delete link is clicked\n        deleteCommand: (id: string) => Promise<ActionResult>;\n    };\n}\n\nexport default class InstalledCommands extends React.PureComponent<Props> {\n    public regenCommandToken = (command: Command): void => {\n        this.props.actions.regenCommandToken(command.id);\n    };\n\n    public deleteCommand = (command: Command): void => {\n        this.props.actions.deleteCommand(command.id);\n    };\n\n    private commandCompare(a: Command, b: Command) {\n        let nameA = a.display_name;\n        if (!nameA) {\n            nameA = Utils.localizeMessage({id: 'installed_commands.unnamed_command', defaultMessage: 'Unnamed Slash Command'});\n        }\n\n        let nameB = b.display_name;\n        if (!nameB) {\n            nameB = Utils.localizeMessage({id: 'installed_commands.unnamed_command', defaultMessage: 'Unnamed Slash Command'});\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    public render(): JSX.Element {\n        const commands = (filter: string) => this.props.commands.\n            filter((command) => command.team_id === this.props.team.id).\n            filter((command) => matchesFilter(command, filter)).\n            sort(this.commandCompare).map((command) => {\n                const canChange = this.props.canManageOthersSlashCommands || this.props.user.id === command.creator_id;\n\n                return (\n                    <InstalledCommand\n                        key={command.id}\n                        team={this.props.team}\n                        command={command}\n                        onRegenToken={this.regenCommandToken}\n                        onDelete={this.deleteCommand}\n                        creator={this.props.users[command.creator_id] || {}}\n                        canChange={canChange}\n                    />\n                );\n            });\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_commands.header'\n                        defaultMessage='Installed Slash Commands'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_commands.add'\n                        defaultMessage='Add Slash Command'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/commands/add'}\n                addButtonId='addSlashCommand'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_commands.empty'\n                        defaultMessage='No slash commands found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMessage\n                        id='installed_commands.search.empty'\n                        defaultMessage='No slash commands match <b>{searchTerm}</b>'\n                        values={{\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_commands.help'\n                        defaultMessage='Use slash commands to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <ExternalLink\n                                    href={DeveloperLinks.SETUP_CUSTOM_SLASH_COMMANDS}\n                                    location='installed_commands'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.buildYourOwn'\n                                        defaultMessage='Build Your Own'\n                                    />\n                                </ExternalLink>\n                            ),\n                            appDirectory: (\n                                <ExternalLink\n                                    href='https://mattermost.com/marketplace'\n                                    location='installed_commands'\n                                >\n                                    <FormattedMessage\n                                        id='installed_commands.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage({id: 'installed_commands.search', defaultMessage: 'Search Slash Commands'})}\n                loading={this.props.loading}\n            >\n                {(filter: string) => {\n                    const children = commands(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {deleteCommand, regenCommandToken} from 'mattermost-redux/actions/integrations';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport InstalledCommands from './installed_commands';\n\ntype Props = {\n    team: {\n        id: string;\n    };\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const canManageOthersSlashCommands = haveITeamPermission(state, ownProps.team.id, Permissions.MANAGE_OTHERS_SLASH_COMMANDS);\n\n    return {\n        canManageOthersSlashCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            regenCommandToken,\n            deleteCommand,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledCommands);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport type {Command} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AddCommand from 'components/integrations/add_command';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\nimport EditCommand from 'components/integrations/edit_command';\nimport InstalledCommands from 'components/integrations/installed_commands';\n\ninterface IProps {\n    component: any;\n    extraProps: {\n        loading: boolean;\n        commands: Command[];\n        users?: RelationOneToOne<UserProfile, UserProfile>;\n        team?: Team;\n        user?: UserProfile;\n    };\n    path: string;\n}\n\nconst CommandRoute = ({component: Component, extraProps, ...rest}: IProps) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\ntype Props = {\n\n    /**\n     * The team data needed to pass into child components\n     */\n    team?: Team;\n\n    /**\n     * The user data needed to pass into child components\n     */\n    user?: UserProfile;\n\n    /**\n     * The users collection\n     */\n    users?: RelationOneToOne<UserProfile, UserProfile>;\n\n    /**\n     * Installed slash commands to display\n     */\n    commands: Command[];\n\n    /**\n     * Object from react-router\n     */\n    match: {\n        url: string;\n    };\n\n    actions: {\n\n        /**\n         * The function to call to fetch team commands\n         */\n        loadCommandsAndProfilesForTeam: (teamId: string) => Promise<ActionResult>;\n    };\n\n    /**\n     * Whether or not commands are enabled.\n     */\n    enableCommands?: boolean;\n};\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class CommandsContainer extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableCommands) {\n            this.props.actions.loadCommandsAndProfilesForTeam(this.props.team?.id || '').then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    render() {\n        const extraProps = {\n            loading: this.state.loading,\n            commands: this.props.commands || [],\n            users: this.props.users,\n            team: this.props.team,\n            user: this.props.user,\n        };\n        return (\n            <div>\n                <Switch>\n                    <Route\n                        exact={true}\n                        path={`${this.props.match.url}/`}\n                        render={() => (<Redirect to={`${this.props.match.url}/installed`}/>)}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/installed`}\n                        component={InstalledCommands}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/add`}\n                        component={AddCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/edit`}\n                        component={EditCommand}\n                    />\n                    <CommandRoute\n                        extraProps={extraProps}\n                        path={`${this.props.match.url}/confirm`}\n                        component={ConfirmIntegration}\n                    />\n                </Switch>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCommands} from 'mattermost-redux/selectors/entities/integrations';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadCommandsAndProfilesForTeam} from 'actions/integration_actions';\n\nimport CommandsContainer from './commands_container';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableCommands = config.EnableCommands === 'true';\n\n    return {\n        commands: Object.values(getCommands(state)),\n        users: getUsers(state),\n        enableCommands,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            loadCommandsAndProfilesForTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandsContainer);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessages} from 'react-intl';\n\nimport type {IncomingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AbstractIncomingWebhook from 'components/integrations/abstract_incoming_webhook';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst messages = defineMessages({\n    footer: {\n        id: 'update_incoming_webhook.update',\n        defaultMessage: 'Update',\n    },\n    header: {\n        id: 'integrations.edit',\n        defaultMessage: 'Edit',\n    },\n    loading: {\n        id: 'update_incoming_webhook.updating',\n        defaultMessage: 'Updating...',\n    },\n});\n\ntype Props = {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    /**\n     * The incoming webhook to edit\n     */\n    hook?: IncomingWebhook;\n\n    /**\n     * The id of the incoming webhook to edit\n     */\n    hookId: string;\n\n    /**\n     * Whether or not incoming webhooks are enabled.\n     */\n    enableIncomingWebhooks: boolean;\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n\n    actions: {\n\n        /**\n         * The function to call to update an incoming webhook\n         */\n        updateIncomingHook: (hook: IncomingWebhook) => Promise<ActionResult>;\n\n        /**\n         * The function to call to get an incoming webhook\n         */\n        getIncomingHook: (hookId: string) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    serverError: string;\n};\n\nexport default class EditIncomingWebhook extends React.PureComponent<Props, State> {\n    private newHook?: IncomingWebhook;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableIncomingWebhooks) {\n            this.props.actions.getIncomingHook(this.props.hookId);\n        }\n    }\n\n    editIncomingHook = async (hook: IncomingWebhook) => {\n        this.newHook = hook;\n\n        if (this.props.hook?.id) {\n            hook.id = this.props.hook.id;\n        }\n\n        await this.submitHook();\n    };\n\n    submitHook = async () => {\n        this.setState({serverError: ''});\n\n        if (!this.newHook) {\n            return;\n        }\n\n        const result = await this.props.actions.updateIncomingHook(this.newHook);\n\n        if ('data' in result) {\n            getHistory().push(`/${this.props.team.name}/integrations/incoming_webhooks`);\n            return;\n        }\n\n        if ('error' in result) {\n            const {error} = result;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    render() {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractIncomingWebhook\n                team={this.props.team}\n                header={messages.header}\n                footer={messages.footer}\n                loading={messages.loading}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n                action={this.editIncomingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getIncomingHook, updateIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditIncomingWebhook from './edit_incoming_webhook';\n\ntype Props = {\n    location: Location;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id') || '';\n\n    return {\n        hookId,\n        hook: state.entities.integrations.incomingHooks[hookId],\n        enableIncomingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateIncomingHook,\n            getIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditIncomingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {getHistory} from 'utils/browser_history';\n\nimport AbstractOAuthApp from '../abstract_oauth_app';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_incoming_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_incoming_webhook.updating', defaultMessage: 'Updating...'};\n\ntype Actions = {\n    getOAuthApp: (id: string) => void;\n    editOAuthApp: (app: OAuthApp) => Promise<ActionResult>;\n};\n\ntype Props = {\n    team: Team;\n    oauthAppId: string;\n    oauthApp: OAuthApp;\n    actions: Actions;\n    enableOAuthServiceProvider: boolean;\n};\n\ntype State = {\n    showConfirmModal: boolean;\n    serverError: string;\n};\n\nexport default class EditOAuthApp extends React.PureComponent<Props, State> {\n    newApp: OAuthApp;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n        this.newApp = this.props.oauthApp;\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.getOAuthApp(this.props.oauthAppId);\n        }\n    }\n\n    editOAuthApp = async (app: OAuthApp) => {\n        this.newApp = app;\n\n        if (this.props.oauthApp.id) {\n            app.id = this.props.oauthApp.id;\n        }\n\n        const callbackUrlsSame = (this.props.oauthApp.callback_urls.length === app.callback_urls.length) &&\n            this.props.oauthApp.callback_urls.every((v, i) => v === app.callback_urls[i]);\n\n        if (callbackUrlsSame === false) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitOAuthApp();\n        }\n    };\n\n    handleConfirmModal = () => {\n        this.setState({showConfirmModal: true});\n    };\n\n    confirmModalDismissed = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    submitOAuthApp = async () => {\n        this.setState({serverError: ''});\n\n        const res = await this.props.actions.editOAuthApp(this.newApp);\n\n        if ('data' in res && res.data) {\n            getHistory().push(`/${this.props.team.name}/integrations/oauth2-apps`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if ('error' in res) {\n            const {error: err} = res;\n            this.setState({serverError: err.message});\n        }\n    };\n\n    renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_oauth_app.confirm'\n                defaultMessage='Edit OAuth 2.0 application'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_oauth_app.question'\n                defaultMessage='Your changes may break the existing OAuth 2.0 application. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                modalClass='integrations-backstage-modal'\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitOAuthApp}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    };\n\n    render() {\n        if (!this.props.oauthApp) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOAuthApp\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOAuthApp}\n                serverError={this.state.serverError}\n                initialApp={this.props.oauthApp}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getOAuthApp, editOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditOAuthApp from './edit_oauth_app';\n\ntype Props = {\n    location: Location;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n    const oauthAppId: string = (new URLSearchParams(ownProps.location.search)).get('id') || '';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        oauthAppId,\n        oauthApp: state.entities.integrations.oauthApps[oauthAppId],\n        enableOAuthServiceProvider,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getOAuthApp,\n            editOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport AbstractOutgoingWebhook from 'components/integrations/abstract_outgoing_webhook';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst HEADER = {id: 'integrations.edit', defaultMessage: 'Edit'};\nconst FOOTER = {id: 'update_outgoing_webhook.update', defaultMessage: 'Update'};\nconst LOADING = {id: 'update_outgoing_webhook.updating', defaultMessage: 'Updating...'};\n\nexport interface Props {\n\n    /**\n     * The current team\n     */\n    team: Team;\n\n    /**\n     * The outgoing webhook to edit\n     */\n    hook?: OutgoingWebhook;\n\n    /**\n     * The id of the outgoing webhook to edit\n     */\n    hookId: string;\n    actions: {\n\n        /**\n         * The function to call to update an outgoing webhook\n         */\n        updateOutgoingHook: (hook: OutgoingWebhook) => Promise<ActionResult<OutgoingWebhook>>;\n\n        /**\n         * The function to call to get an outgoing webhook\n         */\n        getOutgoingHook: (hookId: string) => Promise<ActionResult<OutgoingWebhook>>;\n    };\n\n    /**\n     * Whether or not outgoing webhooks are enabled.\n     */\n    enableOutgoingWebhooks?: boolean;\n\n    /**\n     * Whether to allow configuration of the default post username.\n     */\n    enablePostUsernameOverride: boolean;\n\n    /**\n     * Whether to allow configuration of the default post icon.\n     */\n    enablePostIconOverride: boolean;\n}\n\ninterface State {\n    showConfirmModal: boolean;\n    serverError: string;\n}\n\nexport default class EditOutgoingWebhook extends React.PureComponent<Props, State> {\n    private newHook: OutgoingWebhook | undefined;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            serverError: '',\n        };\n    }\n\n    componentDidMount(): void {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.getOutgoingHook(this.props.hookId);\n        }\n    }\n\n    editOutgoingHook = async (hook: OutgoingWebhook): Promise<void> => {\n        this.newHook = hook;\n\n        if (this.props.hook!.id) {\n            hook.id = this.props.hook!.id;\n        }\n\n        if (this.props.hook!.token) {\n            hook.token = this.props.hook!.token;\n        }\n\n        const triggerWordsSame = (this.props.hook!.trigger_words.length === hook!.trigger_words.length) &&\n            this.props.hook!.trigger_words.every((v, i) => v === hook.trigger_words[i]);\n\n        const callbackUrlsSame = (this.props.hook!.callback_urls.length === hook!.callback_urls.length) &&\n            this.props.hook!.callback_urls.every((v, i) => v === hook.callback_urls[i]);\n\n        if (this.props.hook!.content_type !== hook.content_type ||\n            !triggerWordsSame || !callbackUrlsSame) {\n            this.handleConfirmModal();\n        } else {\n            await this.submitHook();\n        }\n    };\n\n    handleConfirmModal = (): void => {\n        this.setState({showConfirmModal: true});\n    };\n\n    confirmModalDismissed = (): void => {\n        this.setState({showConfirmModal: false});\n    };\n\n    submitHook = async (): Promise<void> => {\n        this.setState({serverError: ''});\n\n        const {data, error} = await this.props.actions.updateOutgoingHook(this.newHook!);\n\n        if (data) {\n            getHistory().push(`/${this.props.team.name}/integrations/outgoing_webhooks`);\n            return;\n        }\n\n        this.setState({showConfirmModal: false});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    renderExtra = (): JSX.Element => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_outgoing_webhook.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_outgoing_webhook.confirm'\n                defaultMessage='Edit Outgoing Webhook'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_outgoing_webhook.question'\n                defaultMessage='Your changes may break the existing outgoing webhook. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                modalClass='integrations-backstage-modal'\n                show={this.state.showConfirmModal}\n                onConfirm={this.submitHook}\n                onCancel={this.confirmModalDismissed}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        if (!this.props.hook) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <AbstractOutgoingWebhook\n                team={this.props.team}\n                header={HEADER}\n                footer={FOOTER}\n                loading={LOADING}\n                renderExtra={this.renderExtra()}\n                action={this.editOutgoingHook}\n                serverError={this.state.serverError}\n                initialHook={this.props.hook}\n                enablePostUsernameOverride={this.props.enablePostUsernameOverride}\n                enablePostIconOverride={this.props.enablePostIconOverride}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getOutgoingHook, updateOutgoingHook} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditOutgoingWebhook from './edit_outgoing_webhook';\n\ntype OwnProps = {\n    location: {\n        search: string | string[][] | Record<string, string> | URLSearchParams | undefined;\n    };\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const hookId = (new URLSearchParams(ownProps.location.search)).get('id');\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n    const enablePostIconOverride = config.EnablePostIconOverride === 'true';\n\n    return {\n        hookId: hookId!,\n        hook: state.entities.integrations.outgoingHooks[hookId!],\n        enableOutgoingWebhooks,\n        enablePostUsernameOverride,\n        enablePostIconOverride,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateOutgoingHook,\n            getOutgoingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {IncomingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport CopyText from 'components/copy_text';\n\nimport {getSiteURL} from 'utils/url';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nexport function matchesFilter(incomingWebhook: IncomingWebhook, channel: Channel, filter: string) {\n    if (!filter) {\n        return true;\n    }\n\n    if (incomingWebhook.display_name.toLowerCase().indexOf(filter) !== -1 ||\n        incomingWebhook.description.toLowerCase().indexOf(filter) !== -1) {\n        return true;\n    }\n\n    if (incomingWebhook.channel_id) {\n        if (channel && channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ntype Props = {\n\n    /**\n     * Data used for showing webhook details\n     */\n    incomingWebhook: IncomingWebhook;\n\n    /**\n     * Function to call when webhook delete button is pressed\n     */\n    onDelete: (incomingWebhook: IncomingWebhook) => void;\n\n    /**\n     * String used for filtering webhook item\n     */\n    filter?: string;\n\n    /**\n     * Data used for showing created by details\n     */\n    creator: {\n        username: string;\n    };\n\n    /**\n     *  Set to show available actions on webhook\n     */\n    canChange: boolean;\n\n    /**\n     *  Data used in routing of webhook for modifications\n     */\n    team: Team;\n\n    /**\n     *  Data used for filtering of webhook based on filter prop\n     */\n    channel: Channel;\n}\n\nexport default class InstalledIncomingWebhook extends React.PureComponent<Props> {\n    handleDelete = () => {\n        this.props.onDelete(this.props.incomingWebhook);\n    };\n\n    render() {\n        const incomingWebhook = this.props.incomingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n\n        if (!matchesFilter(incomingWebhook, channel, filter)) {\n            return null;\n        }\n\n        let displayName;\n        if (incomingWebhook.display_name) {\n            displayName = incomingWebhook.display_name;\n        } else if (channel) {\n            displayName = channel.display_name;\n        } else {\n            displayName = (\n                <FormattedMessage\n                    id='installed_incoming_webhooks.unknown_channel'\n                    defaultMessage='A Private Webhook'\n                />\n            );\n        }\n\n        let description = null;\n        if (incomingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {incomingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <Link to={`/${this.props.team.name}/integrations/incoming_webhooks/edit?id=${incomingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_incoming_webhooks.delete.confirm'\n                                defaultMessage='This action permanently deletes the incoming webhook and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        const incomingWebhookId = getSiteURL() + '/hooks/' + incomingWebhook.id;\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__url word-break--all'>\n                            <FormattedMessage\n                                id='installed_integrations.url'\n                                defaultMessage='URL: {url}'\n                                values={{\n                                    url: <code>{incomingWebhookId}</code>,\n                                }}\n                            />\n                            <span>\n                                <CopyText\n                                    label={defineMessage({\n                                        id: 'integrations.copy_url',\n                                        defaultMessage: 'Copy URL',\n                                    })}\n                                    value={incomingWebhookId}\n                                />\n                            </span>\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: incomingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {IncomingWebhook, IncomingWebhooksWithCount} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\nimport InstalledIncomingWebhook, {matchesFilter} from 'components/integrations/installed_incoming_webhook';\n\nimport {DeveloperLinks} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nconst PAGE_SIZE = 200;\n\ntype Props = {\n    team: Team;\n    user: UserProfile;\n    incomingHooks: IncomingWebhook[];\n    incomingHooksTotalCount: number;\n    channels: IDMappedObjects<Channel>;\n    users: IDMappedObjects<UserProfile>;\n    canManageOthersWebhooks: boolean;\n    enableIncomingWebhooks: boolean;\n    actions: {\n        removeIncomingHook: (hookId: string) => Promise<ActionResult>;\n        loadIncomingHooksAndProfilesForTeam: (teamId: string, startPageNumber: number,\n            pageSize: number, includeTotalCount: boolean) => Promise<ActionResult<IncomingWebhook[] | IncomingWebhooksWithCount>>;\n    };\n}\n\ntype State = {\n    page: number;\n    loading: boolean;\n}\n\nexport default class InstalledIncomingWebhooks extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.loadPage(0);\n    }\n\n    deleteIncomingWebhook = (incomingWebhook: IncomingWebhook) => {\n        this.props.actions.removeIncomingHook(incomingWebhook.id);\n    };\n\n    loadPage = async (pageToLoad: number) => {\n        if (this.props.enableIncomingWebhooks) {\n            this.setState({loading: true},\n                async () => {\n                    await this.props.actions.loadIncomingHooksAndProfilesForTeam(\n                        this.props.team.id,\n                        pageToLoad,\n                        PAGE_SIZE,\n                        true,\n                    );\n                    this.setState({page: pageToLoad, loading: false});\n                },\n            );\n        }\n    };\n\n    nextPage = () => {\n        this.loadPage(this.state.page + 1);\n    };\n\n    previousPage = () => {\n        this.loadPage(this.state.page - 1);\n    };\n\n    incomingWebhookCompare = (a: IncomingWebhook, b: IncomingWebhook) => {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = Utils.localizeMessage({id: 'installed_incoming_webhooks.unknown_channel', defaultMessage: 'A Private Webhook'});\n            }\n        }\n\n        const displayNameB = b.display_name;\n        return displayNameA.localeCompare(displayNameB);\n    };\n\n    incomingWebhooks = (filter: string) => this.props.incomingHooks.\n        sort(this.incomingWebhookCompare).\n        filter((incomingWebhook: IncomingWebhook) => matchesFilter(incomingWebhook, this.props.channels[incomingWebhook.channel_id], filter)).\n        map((incomingWebhook: IncomingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === incomingWebhook.user_id;\n            const channel = this.props.channels[incomingWebhook.channel_id];\n            return (\n                <InstalledIncomingWebhook\n                    key={incomingWebhook.id}\n                    incomingWebhook={incomingWebhook}\n                    onDelete={this.deleteIncomingWebhook}\n                    creator={this.props.users[incomingWebhook.user_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.header'\n                        defaultMessage='Installed Incoming Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.add'\n                        defaultMessage='Add Incoming Webhook'\n                    />\n                }\n                addLink={'/' + this.props.team.name + '/integrations/incoming_webhooks/add'}\n                addButtonId='addIncomingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.empty'\n                        defaultMessage='No incoming webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.emptySearch'\n                        defaultMessage='No incoming webhooks match {searchTerm}'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_incoming_webhooks.help'\n                        defaultMessage='Use incoming webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <ExternalLink\n                                    location='installed_incoming_webhooks'\n                                    href={DeveloperLinks.SETUP_INCOMING_WEBHOOKS}\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build Your Own'\n                                    />\n                                </ExternalLink>\n                            ),\n                            appDirectory: (\n                                <ExternalLink\n                                    href='https://mattermost.com/marketplace'\n                                    location='installed_incoming_webhooks'\n                                >\n                                    <FormattedMessage\n                                        id='installed_incoming_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={Utils.localizeMessage({id: 'installed_incoming_webhooks.search', defaultMessage: 'Search Incoming Webhooks'})}\n                loading={this.state.loading}\n                nextPage={this.nextPage}\n                previousPage={this.previousPage}\n                page={this.state.page}\n                pageSize={PAGE_SIZE}\n                total={this.props.incomingHooksTotalCount}\n            >\n                {(filter: string) => {\n                    const children = this.incomingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {removeIncomingHook} from 'mattermost-redux/actions/integrations';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getFilteredIncomingHooks, getIncomingHooksTotalCount} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadIncomingHooksAndProfilesForTeam} from 'actions/integration_actions';\n\nimport InstalledIncomingWebhooks from './installed_incoming_webhooks';\n\nfunction mapStateToProps(state: GlobalState) {\n    const teamId = getCurrentTeamId(state);\n    const incomingHooks = getFilteredIncomingHooks(state);\n    const incomingHooksTotalCount = getIncomingHooksTotalCount(state);\n    const config = getConfig(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, teamId, Permissions.MANAGE_OTHERS_INCOMING_WEBHOOKS);\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n\n    return {\n        incomingHooks,\n        incomingHooksTotalCount,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        canManageOthersWebhooks,\n        enableIncomingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadIncomingHooksAndProfilesForTeam,\n            removeIncomingHook,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledIncomingWebhooks);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport CopyText from 'components/copy_text';\nimport FormError from 'components/form_error';\n\nimport DeleteIntegrationLink from '../delete_integration_link';\n\nconst FAKE_SECRET = '***************';\n\nexport function matchesFilter(oauthApp: OAuthApp, filter?: string | null): boolean {\n    if (!filter) {\n        return true;\n    }\n\n    return oauthApp.name.toLowerCase().includes(filter);\n}\n\nexport type InstalledOAuthAppProps = {\n\n    /**\n     * The team data\n     */\n    team?: Team;\n\n    /**\n     * The oauthApp data\n     */\n    oauthApp: OAuthApp;\n\n    /**\n     * Whether the oauth app is created by an App\n     */\n    fromApp: boolean;\n\n    creatorName: string;\n\n    /**\n     * The function to call when Regenerate Secret link is clicked\n     */\n    onRegenerateSecret: (oauthAppId: string) => Promise<{ error?: { message: string } }>;\n\n    /**\n     * The function to call when Delete link is clicked\n     */\n    onDelete: (oauthApp: OAuthApp) => void;\n\n    /**\n     * Set to filter OAuthApp\n     */\n    filter?: string | null;\n}\n\nexport type InstalleOAuthAppState = {\n    clientSecret: string;\n    error?: string | null;\n}\n\nexport default class InstalledOAuthApp extends React.PureComponent<InstalledOAuthAppProps, InstalleOAuthAppState> {\n    constructor(props: InstalledOAuthAppProps) {\n        super(props);\n\n        this.state = {\n            clientSecret: FAKE_SECRET,\n        };\n    }\n\n    handleShowClientSecret = (e?: React.MouseEvent): void => {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        this.setState({clientSecret: this.props.oauthApp.client_secret});\n    };\n\n    handleHideClientSecret = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        this.setState({clientSecret: FAKE_SECRET});\n    };\n\n    handleRegenerate = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        this.props.onRegenerateSecret(this.props.oauthApp.id).then(\n            ({error}) => {\n                if (error) {\n                    this.setState({error: error.message});\n                } else {\n                    this.setState({error: null});\n                    this.handleShowClientSecret();\n                }\n            },\n        );\n    };\n\n    handleDelete = (): void => {\n        this.props.onDelete(this.props.oauthApp);\n    };\n\n    render(): React.ReactNode {\n        const {oauthApp, creatorName} = this.props;\n        let error;\n\n        if (this.state.error) {\n            error = (\n                <FormError\n                    error={this.state.error}\n                />\n            );\n        }\n\n        if (!matchesFilter(oauthApp, this.props.filter)) {\n            return null;\n        }\n\n        let name;\n        if (oauthApp.name) {\n            name = oauthApp.name;\n        } else {\n            name = (\n                <FormattedMessage\n                    id='installed_integrations.unnamed_oauth_app'\n                    defaultMessage='Unnamed OAuth 2.0 Application'\n                />\n            );\n        }\n\n        let description;\n        if (oauthApp.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {oauthApp.description}\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: oauthApp.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let isTrusted;\n        if (oauthApp.is_trusted) {\n            isTrusted = (\n                <FormattedMessage\n                    id='installed_oauth_apps.trusted.yes'\n                    defaultMessage='Yes'\n                />\n            );\n        } else {\n            isTrusted = (\n                <FormattedMessage\n                    id='installed_oauth_apps.trusted.no'\n                    defaultMessage='No'\n                />\n            );\n        }\n\n        let showHide;\n        let clientSecret;\n        if (this.state.clientSecret === FAKE_SECRET) {\n            showHide = (\n                <button\n                    id='showSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleShowClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.showSecret'\n                        defaultMessage='Show Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: '\n                    />\n                    <strong>{this.state.clientSecret}</strong>\n                </span>\n            );\n        } else {\n            showHide = (\n                <button\n                    id='hideSecretButton'\n                    className='style--none color--link'\n                    onClick={this.handleHideClientSecret}\n                >\n                    <FormattedMessage\n                        id='installed_integrations.hideSecret'\n                        defaultMessage='Hide Secret'\n                    />\n                </button>\n            );\n            clientSecret = (\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_integrations.client_secret'\n                        defaultMessage='Client Secret: '\n                    />\n                    <strong>{this.state.clientSecret}</strong>\n                    <CopyText\n                        label={messages.copyClientSecret}\n                        value={this.state.clientSecret}\n                    />\n                </span>\n            );\n        }\n\n        const regen = (\n            <button\n                id='regenerateSecretButton'\n                className='style--none color--link'\n                onClick={this.handleRegenerate}\n            >\n                <FormattedMessage\n                    id='installed_integrations.regenSecret'\n                    defaultMessage='Regenerate Secret'\n                />\n            </button>\n        );\n\n        let icon;\n        if (oauthApp.icon_url) {\n            icon = (\n                <div className='integration__icon integration-list__icon'>\n                    <img\n                        alt={'get app screenshot'}\n                        src={oauthApp.icon_url}\n                    />\n                </div>\n            );\n        }\n\n        let actions;\n        if (!this.props.fromApp) {\n            actions = (\n                <div className='item-actions'>\n                    {showHide}\n                    {' - '}\n                    {regen}\n                    {' - '}\n                    <Link to={`/${this.props.team?.name}/integrations/oauth2-apps/edit?id=${oauthApp.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_oauth_apps.delete.confirm'\n                                defaultMessage='This action permanently deletes the OAuth 2.0 application and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        let appInfo = (\n            <div className='item-details__row'>\n                <span className='item-details__creation'>\n                    <FormattedMessage\n                        id='installed_integrations.fromApp'\n                        defaultMessage='Managed by Apps Framework'\n                    />\n                </span>\n            </div>\n        );\n        if (!this.props.fromApp) {\n            appInfo = (\n                <>\n                    <div className='item-details__row'>\n                        <span className='item-details__url word-break--all'>\n                            <FormattedMessage\n                                id='installed_oauth_apps.is_trusted'\n                                defaultMessage='Is Trusted: '\n                            />\n                            <strong>{isTrusted}</strong>\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.client_id'\n                                defaultMessage='Client ID: '\n                            />\n                            <strong>{oauthApp.id}</strong>\n                            <CopyText\n                                label={messages.copyClientId}\n                                value={oauthApp.id}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        {clientSecret}\n                    </div>\n                    {urls}\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: creatorName,\n                                    createAt: oauthApp.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                {icon}\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {name}\n                        </strong>\n                        {actions}\n                    </div>\n                    {error}\n                    {description}\n                    {appInfo}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    copyClientId: {\n        id: 'integrations.copy_client_id',\n        defaultMessage: 'Copy Client Id',\n    },\n    copyClientSecret: {\n        id: 'integrations.copy_client_secret',\n        defaultMessage: 'Copy Client Secret',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport InstalledOAuthApp from './installed_oauth_app';\nimport type {InstalledOAuthAppProps} from './installed_oauth_app';\n\nfunction mapStateToProps(state: GlobalState, ownProps: InstalledOAuthAppProps) {\n    const oauthApp = ownProps.oauthApp || {};\n    return {\n        creatorName: getDisplayNameByUser(state, getUser(state, oauthApp.creator_id)),\n    };\n}\n\nexport default connect(mapStateToProps)(InstalledOAuthApp);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\n\nimport {DeveloperLinks} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport InstalledOAuthApp from '../installed_oauth_app';\nimport {matchesFilter} from '../installed_oauth_app/installed_oauth_app';\n\ntype Props = {\n\n    /**\n    * The team data\n    */\n    team?: Team;\n\n    /**\n    * The oauthApps data\n    */\n    oauthApps: {\n        [key: string]: OAuthApp;\n    };\n\n    /**\n     * List of IDs for apps managed by the App Framwork\n     */\n    appsOAuthAppIDs: string[];\n\n    /**\n    * Set if user can manage oath\n    */\n    canManageOauth: boolean;\n\n    /**\n    * Whether or not OAuth applications are enabled.\n    */\n    enableOAuthServiceProvider: boolean;\n\n    actions: ({\n\n        /**\n        * The function to call to fetch OAuth apps\n        */\n        loadOAuthAppsAndProfiles: (page?: number, perPage?: number) => Promise<ActionResult>;\n\n        /**\n        * The function to call when Regenerate Secret link is clicked\n        */\n        regenOAuthAppSecret: (appId: string) => Promise<ActionResult>;\n\n        /**\n        * The function to call when Delete link is clicked\n        */\n        deleteOAuthApp: (appId: string) => Promise<ActionResult>;\n    });\n};\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class InstalledOAuthApps extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount(): void {\n        if (this.props.enableOAuthServiceProvider) {\n            this.props.actions.loadOAuthAppsAndProfiles().then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    deleteOAuthApp = (app: OAuthApp): void => {\n        if (app && app.id) {\n            this.props.actions.deleteOAuthApp(app.id);\n        }\n    };\n\n    oauthAppCompare(a: OAuthApp, b: OAuthApp): number {\n        let nameA = a.name.toString();\n        if (!nameA) {\n            nameA = localizeMessage({id: 'installed_integrations.unnamed_oauth_app', defaultMessage: 'Unnamed OAuth 2.0 Application'});\n        }\n\n        let nameB = b.name.toString();\n        if (!nameB) {\n            nameB = localizeMessage({id: 'installed_integrations.unnamed_oauth_app', defaultMessage: 'Unnamed OAuth 2.0 Application'});\n        }\n\n        return nameA.localeCompare(nameB);\n    }\n\n    oauthApps = (filter?: string) => Object.values(this.props.oauthApps).\n        filter((app) => matchesFilter(app, filter)).\n        sort(this.oauthAppCompare).\n        map((app) => {\n            return (\n                <InstalledOAuthApp\n                    key={app.id}\n                    oauthApp={app}\n                    onRegenerateSecret={this.props.actions.regenOAuthAppSecret}\n                    onDelete={this.deleteOAuthApp}\n                    team={this.props.team}\n                    creatorName=''\n                    fromApp={this.props.appsOAuthAppIDs.includes(app.id)}\n                />\n            );\n        });\n\n    render() {\n        if (!this.props.team) {\n            return null;\n        }\n        const integrationsEnabled = this.props.enableOAuthServiceProvider && this.props.canManageOauth;\n        let props;\n        if (integrationsEnabled) {\n            props = {\n                addLink: '/' + this.props.team.name + '/integrations/oauth2-apps/add',\n                addText: localizeMessage({id: 'installed_oauth_apps.add', defaultMessage: 'Add OAuth 2.0 Application'}),\n                addButtonId: 'addOauthApp',\n            };\n        }\n\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_oauth2_apps.header'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.help'\n                        defaultMessage='Create {oauthApplications} to securely integrate bots and third-party apps with Mattermost. Visit the {appDirectory} to find available self-hosted apps.'\n                        values={{\n                            oauthApplications: (\n                                <ExternalLink\n                                    href={DeveloperLinks.SETUP_OAUTH2}\n                                    location='installed_oauth_apps'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.oauthApplications'\n                                        defaultMessage='OAuth 2.0 applications'\n                                    />\n                                </ExternalLink>\n                            ),\n                            appDirectory: (\n                                <ExternalLink\n                                    href='https://mattermost.com/marketplace/'\n                                    location='installed_oauth_apps'\n                                >\n                                    <FormattedMessage\n                                        id='installed_oauth_apps.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                }\n                emptyText={\n                    <FormattedMessage\n                        id='installed_oauth_apps.empty'\n                        defaultMessage='No OAuth 2.0 Applications found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMessage\n                        id='installed_oauth_apps.emptySearch'\n                        defaultMessage='No OAuth 2.0 Applications match {searchTerm}'\n                    />\n                }\n                searchPlaceholder={localizeMessage({id: 'installed_oauth_apps.search', defaultMessage: 'Search OAuth 2.0 Applications'})}\n                loading={this.state.loading}\n                {...props}\n            >\n                {(filter: string) => {\n                    const children = this.oauthApps(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {regenOAuthAppSecret, deleteOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getAppsOAuthAppIDs, getOAuthApps} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {loadOAuthAppsAndProfiles} from 'actions/integration_actions';\n\nimport InstalledOAuthApps from './installed_oauth_apps';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n\n    return {\n        canManageOauth: haveISystemPermission(state, {permission: Permissions.MANAGE_OAUTH}),\n        oauthApps: getOAuthApps(state),\n        appsOAuthAppIDs: getAppsOAuthAppIDs(state),\n        enableOAuthServiceProvider,\n        team: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadOAuthAppsAndProfiles,\n            regenOAuthAppSecret,\n            deleteOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOAuthApps);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport CopyText from 'components/copy_text';\n\nimport DeleteIntegrationLink from './delete_integration_link';\n\nexport function matchesFilter(outgoingWebhook: OutgoingWebhook, channel: Channel, filter: string) {\n    if (!filter) {\n        return true;\n    }\n\n    const {\n        display_name: displayName,\n        description,\n        trigger_words: triggerWords,\n    } = outgoingWebhook;\n\n    if (\n        (displayName && displayName.toLowerCase().indexOf(filter) !== -1) ||\n        (description && description.toLowerCase().indexOf(filter) !== -1)\n    ) {\n        return true;\n    }\n\n    if (triggerWords) {\n        for (const triggerWord of triggerWords) {\n            if (triggerWord.toLowerCase().indexOf(filter) !== -1) {\n                return true;\n            }\n        }\n    }\n\n    if (channel && channel.name) {\n        if (channel.name.toLowerCase().indexOf(filter) !== -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ntype Props = {\n    outgoingWebhook: OutgoingWebhook;\n    onRegenToken: (outgoingWebhook: OutgoingWebhook) => void;\n    onDelete: (outgoingWebhook: OutgoingWebhook) => void;\n    team: Team;\n    creator: UserProfile;\n    channel: Channel;\n    canChange: boolean;\n    filter?: string;\n}\n\nexport default class InstalledOutgoingWebhook extends React.PureComponent<Props> {\n    handleRegenToken = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        this.props.onRegenToken(this.props.outgoingWebhook);\n    };\n\n    handleDelete = () => {\n        this.props.onDelete(this.props.outgoingWebhook);\n    };\n\n    makeDisplayName(outgoingWebhook: OutgoingWebhook, channel: Channel) {\n        if (outgoingWebhook.display_name) {\n            return outgoingWebhook.display_name;\n        } else if (channel) {\n            return channel.display_name;\n        }\n        return (\n            <FormattedMessage\n                id='installed_outgoing_webhooks.unknown_channel'\n                defaultMessage='A Private Webhook'\n            />\n        );\n    }\n\n    render() {\n        const outgoingWebhook = this.props.outgoingWebhook;\n        const channel = this.props.channel;\n        const filter = this.props.filter ? this.props.filter.toLowerCase() : '';\n        const triggerWordsFull = 0;\n        const triggerWordsStartsWith = 1;\n\n        if (outgoingWebhook && !matchesFilter(outgoingWebhook, channel, filter)) {\n            return null;\n        }\n\n        const displayName = this.makeDisplayName(outgoingWebhook, channel);\n\n        let description = null;\n        if (outgoingWebhook.description) {\n            description = (\n                <div className='item-details__row'>\n                    <span className='item-details__description'>\n                        {outgoingWebhook.description}\n                    </span>\n                </div>\n            );\n        }\n\n        let triggerWords = null;\n        if (outgoingWebhook.trigger_words && outgoingWebhook.trigger_words.length > 0) {\n            triggerWords = (\n                <div className='item-details__row'>\n                    <span className='item-details__trigger-words'>\n                        <FormattedMessage\n                            id='installed_integrations.triggerWords'\n                            defaultMessage='Trigger Words: {triggerWords}'\n                            values={{\n                                triggerWords: outgoingWebhook.trigger_words.join(', '),\n                            }}\n                        />\n                    </span>\n                </div>\n            );\n        }\n\n        const urls = (\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.callback_urls'\n                        defaultMessage='Callback URLs: {urls}'\n                        values={{\n                            urls: outgoingWebhook.callback_urls.join(', '),\n                        }}\n                    />\n                </span>\n            </div>\n        );\n\n        let triggerWhen;\n        if (outgoingWebhook.trigger_when === triggerWordsFull) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenFullWord'\n                    defaultMessage='First word matches a trigger word exactly'\n                />\n            );\n        } else if (outgoingWebhook.trigger_when === triggerWordsStartsWith) {\n            triggerWhen = (\n                <FormattedMessage\n                    id='add_outgoing_webhook.triggerWordsTriggerWhenStartsWith'\n                    defaultMessage='First word starts with a trigger word'\n                />\n            );\n        }\n\n        let actions = null;\n        if (this.props.canChange) {\n            actions = (\n                <div className='item-actions'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleRegenToken}\n                    >\n                        <FormattedMessage\n                            id='installed_integrations.regenToken'\n                            defaultMessage='Regenerate Token'\n                        />\n                    </button>\n                    {' - '}\n                    <Link to={`/${this.props.team.name}/integrations/outgoing_webhooks/edit?id=${outgoingWebhook.id}`}>\n                        <FormattedMessage\n                            id='installed_integrations.edit'\n                            defaultMessage='Edit'\n                        />\n                    </Link>\n                    {' - '}\n                    <DeleteIntegrationLink\n                        modalMessage={\n                            <FormattedMessage\n                                id='installed_outgoing_webhooks.delete.confirm'\n                                defaultMessage='This action permanently deletes the outgoing webhook and breaks any integrations using it. Are you sure you want to delete it?'\n                            />\n                        }\n                        onDelete={this.handleDelete}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div className='backstage-list__item'>\n                <div className='item-details'>\n                    <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                        <strong className='item-details__name'>\n                            {displayName}\n                        </strong>\n                        {actions}\n                    </div>\n                    {description}\n                    <div className='item-details__row'>\n                        <span className='item-details__content_type'>\n                            <FormattedMessage\n                                id='installed_integrations.content_type'\n                                defaultMessage='Content-Type: {contentType}'\n                                values={{\n                                    contentType: outgoingWebhook.content_type || 'application/x-www-form-urlencoded',\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {triggerWords}\n                    <div className='item-details__row'>\n                        <span className='item-details__trigger-when'>\n                            <FormattedMessage\n                                id='installed_integrations.triggerWhen'\n                                defaultMessage='Trigger When: {triggerWhen}'\n                                values={{\n                                    triggerWhen,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_integrations.token'\n                                defaultMessage='Token: {token}'\n                                values={{\n                                    token: <code>{outgoingWebhook.token}</code>,\n                                }}\n                            />\n                            <CopyText\n                                label={defineMessage({\n                                    id: 'integrations.copy_token',\n                                    defaultMessage: 'Copy Token',\n                                })}\n                                value={outgoingWebhook.token}\n                            />\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__creation'>\n                            <FormattedMessage\n                                id='installed_integrations.creation'\n                                defaultMessage='Created by {creator} on {createAt, date, full}'\n                                values={{\n                                    creator: this.props.creator.username,\n                                    createAt: outgoingWebhook.create_at,\n                                }}\n                            />\n                        </span>\n                    </div>\n                    {urls}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {OutgoingWebhook} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {IDMappedObjects} from '@mattermost/types/utilities';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\nimport InstalledOutgoingWebhook, {matchesFilter} from 'components/integrations/installed_outgoing_webhook';\n\nimport {Constants, DeveloperLinks} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nexport type Props = {\n\n    /**\n    *  Data used in passing down as props for webhook modifications\n    */\n    team: Team;\n\n    /**\n    * Data used for checking if webhook is created by current user\n    */\n    user: UserProfile;\n\n    /**\n    *  Data used for checking modification privileges\n    */\n    canManageOthersWebhooks: boolean;\n\n    /**\n    * Data used in passing down as props for showing webhook details\n    */\n    outgoingWebhooks: OutgoingWebhook[];\n\n    /**\n    * Data used in sorting for displaying list and as props channel details\n    */\n    channels: IDMappedObjects<Channel>;\n\n    /**\n    *  Data used in passing down as props for webhook -created by label\n    */\n    users: IDMappedObjects<UserProfile>;\n\n    /**\n    *  Data used in passing as argument for loading webhooks\n    */\n    teamId: string;\n\n    actions: {\n\n        /**\n        * The function to call for removing outgoingWebhook\n        */\n        removeOutgoingHook: (hookId: string) => Promise<ActionResult>;\n\n        /**\n        * The function to call for outgoingWebhook List and for the status of api\n        */\n        loadOutgoingHooksAndProfilesForTeam: (teamId: string, page: number, perPage: number) => Promise<ActionResult>;\n\n        /**\n        * The function to call for regeneration of webhook token\n        */\n        regenOutgoingHookToken: (hookId: string) => Promise<ActionResult>;\n    };\n\n    /**\n    * Whether or not outgoing webhooks are enabled.\n    */\n    enableOutgoingWebhooks: boolean;\n}\n\ntype State = {\n    loading: boolean;\n};\n\nexport default class InstalledOutgoingWebhooks extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOutgoingWebhooks) {\n            this.props.actions.loadOutgoingHooksAndProfilesForTeam(\n                this.props.teamId,\n                Constants.Integrations.START_PAGE_NUM,\n                Constants.Integrations.PAGE_SIZE,\n            ).then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    regenOutgoingWebhookToken = (outgoingWebhook: OutgoingWebhook) => {\n        this.props.actions.regenOutgoingHookToken(outgoingWebhook.id);\n    };\n\n    removeOutgoingHook = (outgoingWebhook: OutgoingWebhook) => {\n        this.props.actions.removeOutgoingHook(outgoingWebhook.id);\n    };\n\n    outgoingWebhookCompare = (a: OutgoingWebhook, b: OutgoingWebhook) => {\n        let displayNameA = a.display_name;\n        if (!displayNameA) {\n            const channelA = this.props.channels[a.channel_id];\n            if (channelA) {\n                displayNameA = channelA.display_name;\n            } else {\n                displayNameA = localizeMessage({id: 'installed_outgoing_webhooks.unknown_channel', defaultMessage: 'A Private Webhook'});\n            }\n        }\n\n        let displayNameB = b.display_name;\n        if (!displayNameB) {\n            const channelB = this.props.channels[b.channel_id];\n            if (channelB) {\n                displayNameB = channelB.display_name;\n            } else {\n                displayNameB = localizeMessage({id: 'installed_outgoing_webhooks.unknown_channel', defaultMessage: 'A Private Webhook'});\n            }\n        }\n        return displayNameA.localeCompare(displayNameB);\n    };\n\n    outgoingWebhooks = (filter: string) => this.props.outgoingWebhooks.\n        sort(this.outgoingWebhookCompare).\n        filter((outgoingWebhook) => matchesFilter(outgoingWebhook, this.props.channels[outgoingWebhook.channel_id], filter)).\n        map((outgoingWebhook) => {\n            const canChange = this.props.canManageOthersWebhooks || this.props.user.id === outgoingWebhook.creator_id;\n            const channel = this.props.channels[outgoingWebhook.channel_id];\n            return (\n                <InstalledOutgoingWebhook\n                    key={outgoingWebhook.id}\n                    outgoingWebhook={outgoingWebhook}\n                    onRegenToken={this.regenOutgoingWebhookToken}\n                    onDelete={this.removeOutgoingHook}\n                    creator={this.props.users[outgoingWebhook.creator_id] || {}}\n                    canChange={canChange}\n                    team={this.props.team}\n                    channel={channel}\n                />\n            );\n        });\n\n    render() {\n        return (\n            <BackstageList\n                header={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.header'\n                        defaultMessage='Installed Outgoing Webhooks'\n                    />\n                }\n                addText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.add'\n                        defaultMessage='Add Outgoing Webhook'\n                    />\n                }\n                addLink={\n                    '/' +\n                    this.props.team.name +\n                    '/integrations/outgoing_webhooks/add'\n                }\n                addButtonId='addOutgoingWebhook'\n                emptyText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.empty'\n                        defaultMessage='No outgoing webhooks found'\n                    />\n                }\n                emptyTextSearch={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.search.empty'\n                        defaultMessage='No outgoing webhooks match <b>{searchTerm}</b>'\n                        values={{\n                            b: (chunks: string) => <b>{chunks}</b>,\n                        }}\n                    />\n                }\n                helpText={\n                    <FormattedMessage\n                        id='installed_outgoing_webhooks.help'\n                        defaultMessage='Use outgoing webhooks to connect external tools to Mattermost. {buildYourOwn} or visit the {appDirectory} to find self-hosted, third-party apps and integrations.'\n                        values={{\n                            buildYourOwn: (\n                                <ExternalLink\n                                    href={DeveloperLinks.SETUP_OUTGOING_WEBHOOKS}\n                                    location='installed_outgoing_webhooks'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.buildYourOwn'\n                                        defaultMessage='Build your own'\n                                    />\n                                </ExternalLink>\n                            ),\n                            appDirectory: (\n                                <ExternalLink\n                                    href='https://mattermost.com/marketplace'\n                                    location='installed_outgoing_webhooks'\n                                >\n                                    <FormattedMessage\n                                        id='installed_outgoing_webhooks.help.appDirectory'\n                                        defaultMessage='App Directory'\n                                    />\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                }\n                searchPlaceholder={localizeMessage({\n                    id: 'installed_outgoing_webhooks.search',\n                    defaultMessage: 'Search Outgoing Webhooks',\n                })}\n                loading={this.state.loading}\n            >\n                {(filter: string) => {\n                    const children = this.outgoingWebhooks(filter);\n                    return [children, children.length > 0];\n                }}\n            </BackstageList>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport * as Actions from 'mattermost-redux/actions/integrations';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOutgoingHooks} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\n\nimport {loadOutgoingHooksAndProfilesForTeam} from 'actions/integration_actions';\n\nimport type {GlobalState} from 'types/store';\n\nimport InstalledOutgoingWebhook from './installed_outgoing_webhooks';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const teamId = getCurrentTeamId(state);\n    const canManageOthersWebhooks = haveITeamPermission(state, teamId, Permissions.MANAGE_OTHERS_OUTGOING_WEBHOOKS);\n    const outgoingHooks = getOutgoingHooks(state);\n    const outgoingWebhooks = Object.keys(outgoingHooks).\n        map((key) => outgoingHooks[key]).\n        filter((outgoingWebhook) => outgoingWebhook.team_id === teamId);\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n\n    return {\n        outgoingWebhooks,\n        channels: getAllChannels(state),\n        users: getUsers(state),\n        teamId,\n        canManageOthersWebhooks,\n        enableOutgoingWebhooks,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadOutgoingHooksAndProfilesForTeam,\n            removeOutgoingHook: Actions.removeOutgoingHook,\n            regenOutgoingHookToken: Actions.regenOutgoingHookToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstalledOutgoingWebhook);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent, FormEvent} from 'react';\nimport React, {useMemo, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useDispatch} from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nimport {AlertOutlineIcon, CheckCircleOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {validateOutgoingOAuthConnection} from 'mattermost-redux/actions/integrations';\n\nimport BackstageHeader from 'components/backstage/components/backstage_header';\nimport ConfirmModal from 'components/confirm_modal';\nimport FormError from 'components/form_error';\nimport SpinnerButton from 'components/spinner_button';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\ntype Props = {\n    team: Team;\n    header: MessageDescriptor;\n    footer: MessageDescriptor;\n    loading: MessageDescriptor;\n    renderExtra?: JSX.Element;\n    serverError: string;\n\n    initialConnection?: OutgoingOAuthConnection;\n\n    submitAction: (connection: OutgoingOAuthConnection) => Promise<void>;\n}\n\ntype State = {\n    name: string;\n    oauthTokenUrl: string;\n    grantType: OutgoingOAuthConnection['grant_type'];\n    clientId: string;\n    clientSecret: string;\n    audienceUrls: string;\n};\n\nenum ValidationStatus {\n    INITIAL = 'initial',\n    DIRTY = 'dirty',\n    VALIDATING = 'validating',\n    VALIDATED = 'validated',\n    ERROR = 'error',\n}\n\nconst useOutgoingOAuthForm = (connection: OutgoingOAuthConnection): [State, (state: Partial<State>) => void] => {\n    const initialState: State = {\n        name: connection.name || '',\n        audienceUrls: connection.audiences ? connection.audiences.join('\\n') : '',\n        oauthTokenUrl: connection.oauth_token_url || '',\n        clientId: connection.client_id || '',\n        clientSecret: connection.client_secret || '',\n        grantType: 'client_credentials',\n    };\n\n    const [state, setState] = useState(initialState);\n\n    return useMemo(() => [state, (newState: Partial<State>) => {\n        setState((oldState) => ({...oldState, ...newState}));\n    }], [state]);\n};\n\nconst initialState: OutgoingOAuthConnection = {\n    id: '',\n    name: '',\n    creator_id: '',\n    create_at: 0,\n    update_at: 0,\n    client_id: '',\n    client_secret: '',\n    oauth_token_url: '',\n    grant_type: 'client_credentials',\n    audiences: [],\n};\n\nexport default function AbstractOutgoingOAuthConnection(props: Props) {\n    const [formState, setFormState] = useOutgoingOAuthForm(props.initialConnection || initialState);\n\n    const [storedError, setError] = useState<React.ReactNode>('');\n    const [validationError, setValidationError] = useState<string>('');\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [validationStatus, setValidationStatus] = useState<ValidationStatus>(ValidationStatus.INITIAL);\n    const [isEditingSecret, setIsEditingSecret] = useState(false);\n\n    const [isValidationModalOpen, setIsValidationModalOpen] = useState(false);\n\n    const intl = useIntl();\n    const dispatch = useDispatch();\n\n    const isNewConnection = !props.initialConnection;\n\n    const parseForm = (requireAudienceUrl: boolean): OutgoingOAuthConnection | undefined => {\n        if (!formState.name) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.name.required'\n                    defaultMessage='Name for the OAuth connection is required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        if (!formState.clientId) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.client_id.required'\n                    defaultMessage='Client Id for the OAuth connection is required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        if ((isNewConnection || isEditingSecret) && !formState.clientSecret) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.client_secret.required'\n                    defaultMessage='Client Secret for the OAuth connection is required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        if (!formState.grantType) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.grant_type.required'\n                    defaultMessage='Grant Type for the OAuth connection is required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        if (!formState.oauthTokenUrl) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.oauth_token_url.required'\n                    defaultMessage='OAuth Token URL for the OAuth connection is required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        const audienceUrls = [];\n        for (let audienceUrl of formState.audienceUrls.split('\\n')) {\n            audienceUrl = audienceUrl.trim();\n\n            if (audienceUrl.length > 0) {\n                audienceUrls.push(audienceUrl);\n            }\n        }\n\n        if (requireAudienceUrl && audienceUrls.length === 0) {\n            setIsSubmitting(false);\n            setError(\n                <FormattedMessage\n                    id='add_outgoing_oauth_connection.audienceUrls.required'\n                    defaultMessage='One or more audience URLs are required.'\n                />,\n            );\n\n            return undefined;\n        }\n\n        const connection = {\n            name: formState.name,\n            audiences: audienceUrls,\n            client_id: formState.clientId,\n            client_secret: formState.clientSecret,\n            grant_type: formState.grantType,\n            oauth_token_url: formState.oauthTokenUrl,\n        } as OutgoingOAuthConnection;\n\n        return connection;\n    };\n\n    const showSkipValidateModal = () => {\n        setIsValidationModalOpen(true);\n    };\n\n    const hideSkipValidateModal = () => {\n        setIsValidationModalOpen(false);\n    };\n\n    const handleSubmitFromButton = (e: FormEvent) => {\n        e.preventDefault();\n        handleSubmit();\n    };\n\n    const handleSubmit = () => {\n        if (isSubmitting) {\n            return;\n        }\n\n        const connection = parseForm(true);\n        if (!connection) {\n            return;\n        }\n\n        setError('');\n\n        if (validationStatus !== ValidationStatus.VALIDATED && !(!isNewConnection && validationStatus === ValidationStatus.INITIAL)) {\n            if (!isValidationModalOpen) {\n                showSkipValidateModal();\n                return;\n            }\n        }\n\n        setIsSubmitting(true);\n\n        const res = props.submitAction(connection);\n        res.then(() => setIsSubmitting(false));\n    };\n\n    const handleValidate = async (e: FormEvent) => {\n        e.preventDefault();\n\n        if (validationStatus === ValidationStatus.VALIDATING) {\n            return;\n        }\n\n        setError('');\n        setValidationStatus(ValidationStatus.VALIDATING);\n\n        const connection = parseForm(false);\n        if (!connection) {\n            // Defer to the form validation error\n            setValidationStatus(ValidationStatus.INITIAL);\n            return;\n        }\n\n        if (props.initialConnection?.id) {\n            connection.id = props.initialConnection.id;\n        }\n\n        const {error} = await dispatch(validateOutgoingOAuthConnection(props.team.id, connection));\n\n        if (error) {\n            setValidationStatus(ValidationStatus.ERROR);\n            setValidationError(error.message);\n        } else {\n            setValidationStatus(ValidationStatus.VALIDATED);\n        }\n    };\n\n    const setUnvalidated = (e?: React.FormEvent) => {\n        e?.preventDefault();\n\n        if (validationStatus !== ValidationStatus.DIRTY) {\n            setValidationStatus(ValidationStatus.DIRTY);\n        }\n\n        if (validationError) {\n            setValidationError('');\n        }\n    };\n\n    const updateName = (e: ChangeEvent<HTMLInputElement>) => {\n        setFormState({\n            name: e.target.value,\n        });\n    };\n\n    const updateClientId = (e: ChangeEvent<HTMLInputElement>) => {\n        setUnvalidated();\n\n        setFormState({\n            clientId: e.target.value,\n        });\n    };\n\n    const updateClientSecret = (e: ChangeEvent<HTMLInputElement>) => {\n        setUnvalidated();\n\n        setFormState({\n            clientSecret: e.target.value,\n        });\n    };\n\n    const updateOAuthTokenURL = (e: ChangeEvent<HTMLInputElement>) => {\n        setUnvalidated();\n\n        setFormState({\n            oauthTokenUrl: e.target.value,\n        });\n    };\n\n    const updateAudienceUrls = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setFormState({\n            audienceUrls: e.target.value,\n        });\n    };\n\n    const startEditingClientSecret = () => {\n        setIsEditingSecret(true);\n    };\n\n    const headerToRender = props.header;\n    const footerToRender = props.footer;\n\n    let clientSecretSection = (\n        <input\n            id='client_secret'\n            type='text'\n            autoComplete='off'\n            className='form-control'\n            value={formState.clientSecret}\n            onChange={updateClientSecret}\n        />\n    );\n\n    if (!isNewConnection && !isEditingSecret) {\n        clientSecretSection = (\n            <>\n                <input\n                    id='client_secret'\n                    disabled={true}\n                    autoComplete='off'\n                    type='text'\n                    className='form-control disabled'\n                    value={'•'.repeat(40)}\n                />\n                <span\n                    onClick={startEditingClientSecret}\n                    className='outgoing-oauth-connections-edit-secret'\n                >\n                    <i className='icon icon-pencil-outline'/>\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <div className='backstage-content'>\n            <BackstageHeader>\n                <Link to={`/${props.team.name}/integrations/outgoing-oauth2-connections`}>\n                    <FormattedMessage\n                        id='add_outgoing_oauth_connection.header'\n                        defaultMessage='Outgoing OAuth Connections'\n                    />\n                </Link>\n                <FormattedMessage\n                    id={headerToRender.id}\n                    defaultMessage={headerToRender.defaultMessage}\n                />\n            </BackstageHeader>\n            <div className='backstage-form'>\n                <form className='form-horizontal'>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                            htmlFor='name'\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.name.label'\n                                defaultMessage='Name'\n                            />\n                        </label>\n                        <div className='col-md-5 col-sm-8'>\n                            <input\n                                id='name'\n                                type='text'\n                                className='form-control'\n                                value={formState.name}\n                                onChange={updateName}\n                            />\n                            <div className='form__help'>\n                                <FormattedMessage\n                                    id='add_outgoing_oauth_connection.name.help'\n                                    defaultMessage='Specify the name for your OAuth connection.'\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                            htmlFor='client_id'\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.client_id.label'\n                                defaultMessage='Client ID'\n                            />\n                        </label>\n                        <div className='col-md-5 col-sm-8'>\n                            <input\n                                id='client_id'\n                                type='text'\n                                autoComplete='off'\n                                className='form-control'\n                                value={formState.clientId}\n                                onChange={updateClientId}\n                            />\n                            <div className='form__help'>\n                                <FormattedMessage\n                                    id='add_outgoing_oauth_connection.client_id.help'\n                                    defaultMessage='Specify the Client ID for your OAuth connection.'\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                            htmlFor='client_secret'\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.client_secret.label'\n                                defaultMessage='Client Secret'\n                            />\n                        </label>\n                        <div className='col-md-5 col-sm-8'>\n                            {clientSecretSection}\n                            <div className='form__help'>\n                                <FormattedMessage\n                                    id='add_outgoing_oauth_connection.client_secret.help'\n                                    defaultMessage='Specify the Client Secret for your OAuth connection.'\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                            htmlFor='oauth_token_url'\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.oauth_token_url.label'\n                                defaultMessage='OAuth Token URL'\n                            />\n                        </label>\n                        <div className='col-md-5 col-sm-8'>\n                            <input\n                                id='token_url'\n                                type='text'\n                                className='form-control'\n                                value={formState.oauthTokenUrl}\n                                onChange={updateOAuthTokenURL}\n                            />\n                            <div className='form__help'>\n                                <FormattedMessage\n                                    id='add_outgoing_oauth_connection.oauth_token_url.help'\n                                    defaultMessage='Specify the OAuth Token URL for your OAuth connection.'\n                                />\n                            </div>\n                            <div className='outgoing-oauth-connection-validate-button-container'>\n                                <ValidateButton\n                                    onClick={handleValidate}\n                                    setUnvalidated={setUnvalidated}\n                                    status={validationStatus}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className='form-group'>\n                        <label\n                            className='control-label col-sm-4'\n                            htmlFor='audienceUrls'\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.audienceUrls.label'\n                                defaultMessage='Audience URLs (One Per Line)'\n                            />\n                        </label>\n                        <div className='col-md-5 col-sm-8'>\n                            <textarea\n                                id='audienceUrls'\n                                rows={3}\n                                className='form-control'\n                                value={formState.audienceUrls}\n                                onChange={updateAudienceUrls}\n                            />\n                            <div className='form__help'>\n                                <FormattedMessage\n                                    id='add_outgoing_oauth_connection.audienceUrls.help'\n                                    defaultMessage='The URLs which will receive requests with the OAuth token, e.g. your custom slash command handler endpoint. Must be a valid URL and start with http:// or https://.'\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div className='backstage-form__footer'>\n                        <FormError\n                            type='backstage'\n                            errors={[props.serverError, storedError]}\n                        />\n                        <Link\n                            className='btn btn-tertiary'\n                            to={`/${props.team.name}/integrations/outgoing-oauth2-connections`}\n                        >\n                            <FormattedMessage\n                                id='add_outgoing_oauth_connection.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Link>\n                        <SpinnerButton\n                            className='btn btn-primary'\n                            type='submit'\n                            spinning={isSubmitting}\n                            spinningText={intl.formatMessage(props.loading)}\n                            onClick={handleSubmitFromButton}\n                            id='saveConnection'\n                        >\n                            <FormattedMessage\n                                id={footerToRender.id}\n                                defaultMessage={footerToRender.defaultMessage}\n                            />\n                        </SpinnerButton>\n                        {props.renderExtra}\n                    </div>\n                </form>\n            </div>\n            <div className='outgoing-oauth-connections-docs-link'>\n                <FormattedMessage\n                    id={'add_outgoing_oauth_connection.documentation_link'}\n                    defaultMessage={'Get help with <link>configuring outgoing OAuth connections</link>.'}\n                    values={{\n                        link: (text: string) => (\n                            <a href='https://mattermost.com/pl/outgoing-oauth-connections'>{text}</a>\n                        ),\n                    }}\n                />\n            </div>\n            <ConfirmModal\n                show={isValidationModalOpen}\n                message={intl.formatMessage({\n                    id: 'add_outgoing_oauth_connection.save_without_validation_warning',\n                    defaultMessage: 'This connection has not been validated, Do you want to save anyway?',\n                })}\n                title={intl.formatMessage({\n                    id: 'add_outgoing_oauth_connection.confirm_save',\n                    defaultMessage: 'Save Outgoing OAuth Connection',\n                })}\n                confirmButtonText={intl.formatMessage({\n                    id: 'add_outgoing_oauth_connection.save_anyway',\n                    defaultMessage: 'Save anyway',\n                })}\n                onExited={hideSkipValidateModal}\n                onCancel={hideSkipValidateModal}\n                onConfirm={handleSubmit}\n            />\n        </div>\n    );\n}\n\ntype ValidateButtonProps = {\n    status: ValidationStatus;\n    onClick: (e: FormEvent) => void;\n    setUnvalidated: (e: FormEvent) => void;\n}\n\nconst ValidateButton = ({status, onClick, setUnvalidated}: ValidateButtonProps) => {\n    if (status === ValidationStatus.ERROR) {\n        return (\n            <span\n                className='outgoing-oauth-connection-validation-message validation-error'\n            >\n                <AlertOutlineIcon size={20}/>\n                <FormattedMessage\n                    id={'add_outgoing_oauth_connection.validation_error'}\n                    defaultMessage={'Connection not validated. Please check the server logs for details or <link>try again</link>.'}\n                    values={{\n                        link: (text: string) => <a onClick={setUnvalidated}>{text}</a>,\n                    }}\n                />\n            </span>\n        );\n    }\n\n    if (status === ValidationStatus.VALIDATED) {\n        return (\n            <span\n                className='outgoing-oauth-connection-validation-message validation-success'\n            >\n                <CheckCircleOutlineIcon size={20}/>\n                <FormattedMessage\n                    id={'add_outgoing_oauth_connection.validated_connection'}\n                    defaultMessage={'Validated connection'}\n                />\n            </span>\n        );\n    }\n\n    if (status === ValidationStatus.VALIDATING) {\n        return (\n            <span\n                className='outgoing-oauth-connection-validation-message'\n            >\n                <LoadingSpinner\n                    text={(\n                        <FormattedMessage\n                            id={'add_outgoing_oauth_connection.validating'}\n                            defaultMessage={'Validating...'}\n                        />\n                    )}\n                />\n            </span>\n        );\n    }\n\n    const validateButton = (\n        <button\n            className='btn btn-tertiary btn-sm'\n            type='button'\n            onClick={onClick}\n            id='validateConnection'\n        >\n            <FormattedMessage\n                id={'add_outgoing_oauth_connection.validate'}\n                defaultMessage={'Validate Connection'}\n            />\n        </button>\n    );\n\n    return validateButton;\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\nimport {defineMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {addOutgoingOAuthConnection} from 'mattermost-redux/actions/integrations';\n\nimport AbstractOutgoingOAuthConnection from './abstract_outgoing_oauth_connection';\n\nconst HEADER = defineMessage({id: 'add_outgoing_oauth_connection.add', defaultMessage: 'Add'});\nconst FOOTER = defineMessage({id: 'add_outgoing_oauth_connection.save', defaultMessage: 'Save'});\nconst LOADING = defineMessage({id: 'add_outgoing_oauth_connection.saving', defaultMessage: 'Saving...'});\n\nexport type Props = {\n    team: Team;\n};\n\nconst AddOutgoingOAuthConnection = ({team}: Props): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    const [serverError, setServerError] = useState('');\n\n    const submit = async (connection: OutgoingOAuthConnection) => {\n        setServerError('');\n\n        const {data, error} = (await dispatch(addOutgoingOAuthConnection(team.id, connection))) as unknown as {data: OutgoingOAuthConnection; error: Error};\n        if (data) {\n            history.push(`/${team.name}/integrations/confirm?type=outgoing-oauth2-connections&id=${data.id}`);\n            return;\n        }\n\n        if (error) {\n            setServerError(error.message);\n        }\n    };\n\n    return (\n        <AbstractOutgoingOAuthConnection\n            team={team}\n            header={HEADER}\n            footer={FOOTER}\n            loading={LOADING}\n            submitAction={submit}\n            serverError={serverError}\n        />\n    );\n};\n\nexport default AddOutgoingOAuthConnection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage, defineMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {editOutgoingOAuthConnection, getOutgoingOAuthConnection} from 'mattermost-redux/actions/integrations';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOutgoingOAuthConnections} from 'mattermost-redux/selectors/entities/integrations';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {getHistory} from 'utils/browser_history';\n\nimport AbstractOutgoingOAuthConnection from './abstract_outgoing_oauth_connection';\n\nconst HEADER = defineMessage({id: 'integrations.edit', defaultMessage: 'Edit'});\nconst FOOTER = defineMessage({id: 'edit_outgoing_oauth_connection.update', defaultMessage: 'Update'});\nconst LOADING = defineMessage({id: 'edit_outgoing_oauth_connection.updating', defaultMessage: 'Updating...'});\n\ntype Props = {\n    team: Team;\n    location: Location;\n};\n\nconst getConnectionIdFromSearch = (search: string): string => {\n    return (new URLSearchParams(search)).get('id') || '';\n};\n\nconst EditOutgoingOAuthConnection = (props: Props) => {\n    const connectionId = getConnectionIdFromSearch(props.location.search);\n    const connections = useSelector(getOutgoingOAuthConnections);\n    const existingConnection = connections[connectionId];\n\n    const [newConnection, setNewConnection] = useState(existingConnection);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const [serverError, setServerError] = useState('');\n\n    const enableOAuthServiceProvider = useSelector(getConfig).EnableOAuthServiceProvider;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (enableOAuthServiceProvider) {\n            dispatch(getOutgoingOAuthConnection(props.team.id, connectionId));\n        }\n    }, [connectionId, enableOAuthServiceProvider, props.team, dispatch]);\n\n    const handleInitialSubmit = async (connection: OutgoingOAuthConnection) => {\n        setNewConnection(connection);\n\n        if (existingConnection.id) {\n            connection.id = existingConnection.id;\n        }\n\n        const audienceUrlsSame = (existingConnection.audiences.length === connection.audiences.length) &&\n            existingConnection.audiences.every((v, i) => v === connection.audiences[i]);\n\n        if (audienceUrlsSame) {\n            await createOutgoingOAuthConnection(connection);\n        } else {\n            handleConfirmModal();\n        }\n    };\n\n    const handleConfirmModal = () => {\n        setShowConfirmModal(true);\n    };\n\n    const confirmModalDismissed = () => {\n        setShowConfirmModal(false);\n    };\n\n    const createOutgoingOAuthConnection = async (connection: OutgoingOAuthConnection) => {\n        setServerError('');\n\n        const res = await dispatch(editOutgoingOAuthConnection(props.team.id, connection));\n\n        if ('data' in res && res.data) {\n            getHistory().push(`/${props.team.name}/integrations/outgoing-oauth2-connections`);\n            return;\n        }\n\n        confirmModalDismissed();\n\n        if ('error' in res) {\n            const {error: err} = res as {error: Error};\n            setServerError(err.message);\n        }\n    };\n\n    const renderExtra = () => {\n        const confirmButton = (\n            <FormattedMessage\n                id='update_command.update'\n                defaultMessage='Update'\n            />\n        );\n\n        const confirmTitle = (\n            <FormattedMessage\n                id='update_outgoing_oauth_connection.confirm'\n                defaultMessage='Edit Outgoing OAuth Connection'\n            />\n        );\n\n        const confirmMessage = (\n            <FormattedMessage\n                id='update_outgoing_oauth_connection.question'\n                defaultMessage='Your changes may break any existing integrations using this connection. Are you sure you would like to update it?'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                title={confirmTitle}\n                message={confirmMessage}\n                confirmButtonText={confirmButton}\n                modalClass='integrations-backstage-modal'\n                show={showConfirmModal}\n                onConfirm={() => createOutgoingOAuthConnection(newConnection)}\n                onCancel={confirmModalDismissed}\n            />\n        );\n    };\n\n    if (!existingConnection) {\n        return <LoadingScreen/>;\n    }\n\n    return (\n        <AbstractOutgoingOAuthConnection\n            team={props.team}\n            header={HEADER}\n            footer={FOOTER}\n            loading={LOADING}\n            renderExtra={renderExtra()}\n            submitAction={handleInitialSubmit}\n            serverError={serverError}\n            initialConnection={existingConnection}\n        />\n    );\n};\n\nexport default EditOutgoingOAuthConnection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport DeleteIntegrationLink from '../delete_integration_link';\n\nexport function matchesFilter(outgoingOAuthConnection: OutgoingOAuthConnection, filter?: string | null): boolean {\n    if (!filter) {\n        return true;\n    }\n\n    return outgoingOAuthConnection.name.toLowerCase().includes(filter);\n}\n\nexport type InstalledOutgoingOAuthConnectionProps = {\n    team: Partial<Team>;\n    outgoingOAuthConnection: OutgoingOAuthConnection;\n    creatorName: string;\n    filter?: string | null;\n\n    onDelete: (outgoingOAuthConnection: OutgoingOAuthConnection) => void;\n}\n\nexport type InstalledOutgoingOAuthConnectionState = {\n    clientSecret: string;\n    error?: string | null;\n}\n\nconst InstalledOutgoingOAuthConnection = (props: InstalledOutgoingOAuthConnectionProps) => {\n    const handleDelete = (): void => {\n        props.onDelete(props.outgoingOAuthConnection);\n    };\n\n    const {outgoingOAuthConnection, creatorName} = props;\n\n    if (!matchesFilter(outgoingOAuthConnection, props.filter)) {\n        return null;\n    }\n\n    let name;\n    if (outgoingOAuthConnection.name) {\n        name = outgoingOAuthConnection.name;\n    } else {\n        name = (\n            <FormattedMessage\n                id='installed_integrations.unnamed_outgoing_oauth_connection'\n                defaultMessage='Unnamed Outgoing OAuth Connection'\n            />\n        );\n    }\n\n    const urls = (\n        <>\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.audience_urls'\n                        defaultMessage='Audience URLs: {urls}'\n                        values={{\n                            urls: <code>{outgoingOAuthConnection.audiences.join(', ')}</code>,\n                        }}\n                    />\n                </span>\n            </div>\n            <div className='item-details__row'>\n                <span className='item-details__url word-break--all'>\n                    <FormattedMessage\n                        id='installed_integrations.token_url'\n                        defaultMessage='Token URL: {url}'\n                        values={{\n                            url: <code>{outgoingOAuthConnection.oauth_token_url}</code>,\n                        }}\n                    />\n                </span>\n            </div>\n        </>\n    );\n\n    const actions = (\n        <div className='item-actions'>\n            <Link to={`/${props.team.name}/integrations/outgoing-oauth2-connections/edit?id=${outgoingOAuthConnection.id}`}>\n                <FormattedMessage\n                    id='installed_integrations.edit'\n                    defaultMessage='Edit'\n                />\n            </Link>\n            {' - '}\n            <DeleteIntegrationLink\n                subtitleText={\n                    <FormattedMessage\n                        id='installed_outgoing_oauth_connections.delete.confirm'\n                        defaultMessage='Are you sure you want to delete {connectionName}?'\n                        values={{\n                            connectionName: (\n                                <strong>\n                                    {props.outgoingOAuthConnection.name}\n                                </strong>\n                            ),\n                        }}\n                    />\n                }\n                modalMessage={\n                    <FormattedMessage\n                        id='installed_outgoing_oauth_connections.delete.wanring'\n                        defaultMessage='Deleting this connection will break any integrations using it'\n                    />\n                }\n                onDelete={handleDelete}\n            />\n        </div>\n    );\n\n    const connectionInfo = (\n        <>\n            <div className='item-details__row'>\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_integrations.client_id'\n                        defaultMessage='Client ID: '\n                    />\n                    <strong><code>{outgoingOAuthConnection.client_id}</code></strong>\n                </span>\n            </div>\n            <div className='item-details__row'>\n                <span className='item-details__token'>\n                    <FormattedMessage\n                        id='installed_outgoing_oauth_connections.client_secret'\n                        defaultMessage='Client Secret: ********'\n                    />\n                </span>\n            </div>\n            {outgoingOAuthConnection.grant_type === 'password' && (\n                <>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_outgoing_oauth_connections.username'\n                                defaultMessage='Username: '\n                            />\n                            <strong>{outgoingOAuthConnection.credentials_username}</strong>\n                        </span>\n                    </div>\n                    <div className='item-details__row'>\n                        <span className='item-details__token'>\n                            <FormattedMessage\n                                id='installed_outgoing_oauth_connections.password'\n                                defaultMessage='Password: ********'\n                            />\n                        </span>\n                    </div>\n                </>\n            )}\n\n            {urls}\n            <div className='item-details__row'>\n                <span className='item-details__creation'>\n                    <FormattedMessage\n                        id='installed_integrations.creation'\n                        defaultMessage='Created by {creator} on {createAt, date, full}'\n                        values={{\n                            creator: creatorName,\n                            createAt: outgoingOAuthConnection.create_at,\n                        }}\n                    />\n                </span>\n            </div>\n        </>\n    );\n\n    return (\n        <div className='backstage-list__item' >\n            <div className='item-details' >\n                <div className='item-details__row d-flex flex-column flex-md-row justify-content-between'>\n                    <strong className='item-details__name'>\n                        {name}\n                    </strong>\n                    {actions}\n                </div>\n                {connectionInfo}\n            </div>\n        </div >\n    );\n};\n\nexport default InstalledOutgoingOAuthConnection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {OutgoingOAuthConnection} from '@mattermost/types/integrations';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {deleteOutgoingOAuthConnection} from 'mattermost-redux/actions/integrations';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getOutgoingOAuthConnections} from 'mattermost-redux/selectors/entities/integrations';\nimport {haveITeamPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {loadOutgoingOAuthConnectionsAndProfiles} from 'actions/integration_actions';\n\nimport BackstageList from 'components/backstage/components/backstage_list';\nimport ExternalLink from 'components/external_link';\n\nimport {DeveloperLinks} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport InstalledOutgoingOAuthConnection, {matchesFilter} from './installed_outgoing_oauth_connection';\n\ntype Props = {\n    team: Team;\n};\n\nconst InstalledOutgoingOAuthConnections = (props: Props) => {\n    const [loading, setLoading] = useState(true);\n    const canManageOutgoingOAuthConnections = useSelector((state: GlobalState) => haveITeamPermission(state, props.team.id, Permissions.MANAGE_OUTGOING_OAUTH_CONNECTIONS));\n    const enableOutgoingOAuthConnections = (useSelector(getConfig).EnableOutgoingOAuthConnections === 'true');\n    const connections = useSelector(getOutgoingOAuthConnections);\n\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    useEffect(() => {\n        if (canManageOutgoingOAuthConnections) {\n            (dispatch(loadOutgoingOAuthConnectionsAndProfiles(props.team.id)) as unknown as Promise<void>).then(\n                () => setLoading(false),\n            );\n        }\n    }, [canManageOutgoingOAuthConnections, props.team, dispatch]);\n\n    const deleteOutgoingOAuthConnectionLocal = (connection: OutgoingOAuthConnection): void => {\n        if (connection && connection.id) {\n            dispatch(deleteOutgoingOAuthConnection(connection.id));\n        }\n    };\n\n    const outgoingOauthConnectionCompare = (a: OutgoingOAuthConnection, b: OutgoingOAuthConnection): number => {\n        let nameA = a.name.toString();\n        if (!nameA) {\n            nameA = intl.formatMessage({id: 'installed_integrations.unnamed_outgoing_oauth_connection', defaultMessage: 'Unnamed Outgoing OAuth Connection'});\n        }\n\n        let nameB = b.name.toString();\n        if (!nameB) {\n            nameB = intl.formatMessage({id: 'installed_integrations.unnamed_outgoing_oauth_connection', defaultMessage: 'Unnamed Outgoing OAuth Connection'});\n        }\n\n        return nameA.localeCompare(nameB);\n    };\n\n    const outgoingOauthConnections = (filter?: string) => {\n        const values = Object.values(connections);\n        const filtered = values.filter((connection) => matchesFilter(connection, filter));\n        const sorted = filtered.sort(outgoingOauthConnectionCompare);\n        const mapped = sorted.map((connection) => {\n            return (\n                <InstalledOutgoingOAuthConnection\n                    key={connection.id}\n                    outgoingOAuthConnection={connection}\n                    onDelete={deleteOutgoingOAuthConnectionLocal}\n                    team={props.team}\n                    creatorName=''\n                />\n            );\n        });\n\n        return mapped;\n    };\n\n    const integrationsEnabled = enableOutgoingOAuthConnections && canManageOutgoingOAuthConnections;\n    let childProps;\n    if (integrationsEnabled) {\n        childProps = {\n            addLink: '/' + props.team.name + '/integrations/outgoing-oauth2-connections/add',\n            addText: intl.formatMessage({id: 'installed_outgoing_oauth_connections.add', defaultMessage: 'Add Outgoing OAuth Connection'}),\n            addButtonId: 'addOutgoingOauthConnection',\n        };\n    }\n\n    return (\n        <BackstageList\n            header={\n                <FormattedMessage\n                    id='installed_outgoing_oauth_connections.header'\n                    defaultMessage='Outgoing OAuth Connections'\n                />\n            }\n            helpText={\n                <FormattedMessage\n                    id='installed_outgoing_oauth_connections.help'\n                    defaultMessage='Create {outgoingOauthConnections} to securely integrate bots and third-party apps with Mattermost.'\n                    values={{\n                        outgoingOauthConnections: (\n                            <ExternalLink\n                                href={DeveloperLinks.SETUP_OAUTH2}\n                                location='installed_outgoing_oauth_connections'\n                            >\n                                <FormattedMessage\n                                    id='installed_outgoing_oauth_connections.help.outgoingOauthConnections'\n                                    defaultMessage='Outgoing OAuth Connections'\n                                />\n                            </ExternalLink>\n                        ),\n                    }}\n                />\n            }\n            emptyText={\n                <FormattedMessage\n                    id='installed_outgoing_oauth_connections.empty'\n                    defaultMessage='No Outgoing OAuth Connections found'\n                />\n            }\n            emptyTextSearch={\n                <FormattedMessage\n                    id='installed_outgoing_oauth_connections.emptySearch'\n                    defaultMessage='No Outgoing OAuth Connections match {searchTerm}'\n                />\n            }\n            searchPlaceholder={intl.formatMessage({id: 'installed_outgoing_oauth_connections.search', defaultMessage: 'Search Outgoing OAuth Connections'})}\n            loading={loading}\n            {...childProps}\n        >\n            {(filter: string) => {\n                const children = outgoingOauthConnections(filter);\n                return [children, children.length > 0];\n            }}\n        </BackstageList>\n    );\n};\n\nexport default InstalledOutgoingOAuthConnections;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {Route, NavLink} from 'react-router-dom';\n\ntype Props = {\n    name: string;\n    title: ReactNode;\n    icon: string;\n    parentLink?: string;\n    children?: ReactNode[];\n}\n\nconst BackstageCategory = ({name, title, icon, parentLink, children = []}: Props) => {\n    const link = parentLink + '/' + name;\n\n    return (\n        <li className='backstage-sidebar__category'>\n            <NavLink\n                to={link}\n                className='category-title'\n                activeClassName='category-title--active'\n            >\n                <i className={classNames('fa ', icon)}/>\n                <span className='category-title__text'>\n                    {title}\n                </span>\n            </NavLink>\n            {\n                children && children.length > 0 &&\n                    <Route\n                        path={link}\n                        render={() => (\n                            <ul className='sections'>\n                                {\n                                    React.Children.map(children, (child) => {\n                                        if (!child) {\n                                            return child;\n                                        }\n\n                                        return React.cloneElement(child as JSX.Element, {\n                                            parentLink: link,\n                                        });\n                                    })\n                                }\n                            </ul>\n                        )}\n                    />\n            }\n        </li>\n    );\n};\n\nexport default BackstageCategory;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {NavLink} from 'react-router-dom';\n\ntype Props = {\n    name: string;\n    title: ReactNode;\n    subsection?: boolean;\n    parentLink?: string;\n    children?: JSX.Element[];\n    id?: string;\n}\n\nconst BackstageSection = ({name, title, subsection = false, parentLink = '', children = [], id}: Props) => {\n    const link = parentLink + '/' + name;\n\n    let clonedChildren = null;\n    if (children.length > 0) {\n        clonedChildren = (\n            <ul className='subsections'>\n                {\n                    React.Children.map(children, (child) => {\n                        return React.cloneElement(child, {\n                            parentLink: link,\n                            subsection: true,\n                        });\n                    })\n                }\n            </ul>\n        );\n    }\n\n    const className = subsection ? 'subsection' : 'section';\n\n    return (\n        <li\n            className={className}\n            id={id}\n        >\n            <NavLink\n                className={`${className}-title`}\n                activeClassName={`${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {title}\n                </span>\n            </NavLink>\n            {clonedChildren}\n        </li>\n    );\n};\n\nexport default BackstageSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\n\nimport BackstageCategory from './backstage_category';\nimport BackstageSection from './backstage_section';\n\ntype Props = {\n    team: Team;\n    enableCustomEmoji: boolean;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableOutgoingOAuthConnections: boolean;\n    canCreateOrDeleteCustomEmoji: boolean;\n    canManageIntegrations: boolean;\n}\n\nexport default class BackstageSidebar extends React.PureComponent<Props> {\n    renderCustomEmoji() {\n        if (!this.props.enableCustomEmoji || !this.props.canCreateOrDeleteCustomEmoji) {\n            return null;\n        }\n\n        return (\n            <BackstageCategory\n                name='emoji'\n                parentLink={'/' + this.props.team.name}\n                icon='fa-smile-o'\n                title={\n                    <FormattedMessage\n                        id='backstage_sidebar.emoji'\n                        defaultMessage='Custom Emoji'\n                    />\n                }\n            />\n        );\n    }\n\n    renderIntegrations() {\n        if (!this.props.canManageIntegrations) {\n            return null;\n        }\n\n        let incomingWebhooks;\n        if (this.props.enableIncomingWebhooks) {\n            incomingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_INCOMING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='incoming_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.incoming_webhooks'\n                                defaultMessage='Incoming Webhooks'\n                            />\n                        )}\n                        id='incomingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let outgoingWebhooks: JSX.Element | null = null;\n        if (this.props.enableOutgoingWebhooks) {\n            outgoingWebhooks = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_OUTGOING_WEBHOOKS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='outgoing_webhooks'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.outgoing_webhooks'\n                                defaultMessage='Outgoing Webhooks'\n                            />\n                        )}\n                        id='outgoingWebhooks'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let commands: JSX.Element | null = null;\n        if (this.props.enableCommands) {\n            commands = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_SLASH_COMMANDS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='commands'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={(\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.commands'\n                                defaultMessage='Slash Commands'\n                            />\n                        )}\n                        id='slashCommands'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        let oauthApps: JSX.Element | null = null;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthApps = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_OAUTH]}>\n                    <BackstageSection\n                        name='oauth2-apps'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.oauthApps'\n                                defaultMessage='OAuth 2.0 Applications'\n                            />\n                        }\n                        id='oauthApps'\n                    />\n                </SystemPermissionGate>\n            );\n        }\n\n        // Note that we allow managing bot accounts even if bot account creation is disabled: only\n        // a permissions check is required.\n        const botAccounts = (\n            <SystemPermissionGate permissions={['manage_bots', 'manage_others_bots']}>\n                <BackstageSection\n                    name='bots'\n                    parentLink={'/' + this.props.team.name + '/integrations'}\n                    title={\n                        <FormattedMessage\n                            id='backstage_sidebar.bots'\n                            defaultMessage='Bot Accounts'\n                        />\n                    }\n                    id='botAccounts'\n                />\n            </SystemPermissionGate>\n        );\n\n        let outgoingOAuthConnections: JSX.Element | null = null;\n        if (this.props.enableOutgoingOAuthConnections) {\n            outgoingOAuthConnections = (\n                <TeamPermissionGate\n                    permissions={[Permissions.MANAGE_OUTGOING_OAUTH_CONNECTIONS]}\n                    teamId={this.props.team.id}\n                >\n                    <BackstageSection\n                        name='outgoing-oauth2-connections'\n                        parentLink={'/' + this.props.team.name + '/integrations'}\n                        title={\n                            <FormattedMessage\n                                id='backstage_sidebar.integrations.outgoingOauthConnections'\n                                defaultMessage='Outgoing OAuth 2.0 Connections'\n                            />\n                        }\n                        id='outgoingOauthConnections'\n                    />\n                </TeamPermissionGate>\n            );\n        }\n\n        return (\n            <BackstageCategory\n                name='integrations'\n                icon='fa-link'\n                parentLink={'/' + this.props.team.name}\n                title={\n                    <FormattedMessage\n                        id='backstage_sidebar.integrations'\n                        defaultMessage='Integrations'\n                    />\n                }\n            >\n                {incomingWebhooks}\n                {outgoingWebhooks}\n                {commands}\n                {oauthApps}\n                {botAccounts}\n                {outgoingOAuthConnections}\n            </BackstageCategory>\n        );\n    }\n\n    render() {\n        return (\n            <div className='backstage-sidebar'>\n                <ul>\n                    {this.renderCustomEmoji()}\n                    {this.renderIntegrations()}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useRef} from 'react';\nimport type {ComponentType} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport type {match} from 'react-router-dom';\nimport {createGlobalStyle} from 'styled-components';\n\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport Emoji from 'components/emoji';\nimport AddEmoji from 'components/emoji/add_emoji';\nimport Integrations from 'components/integrations';\nimport AddIncomingWehook from 'components/integrations/add_incoming_webhook';\nimport AddOauthApp from 'components/integrations/add_oauth_app';\nimport AddOutgoingWebhook from 'components/integrations/add_outgoing_webhook';\nimport Bots from 'components/integrations/bots';\nimport AddBot from 'components/integrations/bots/add_bot';\nimport CommandsContainer from 'components/integrations/commands_container';\nimport ConfirmIntegration from 'components/integrations/confirm_integration';\nimport EditIncomingWebhook from 'components/integrations/edit_incoming_webhook';\nimport EditOauthApp from 'components/integrations/edit_oauth_app';\nimport EditOutgoingWebhook from 'components/integrations/edit_outgoing_webhook';\nimport InstalledIncomingWebhooks from 'components/integrations/installed_incoming_webhooks';\nimport InstalledOauthApps from 'components/integrations/installed_oauth_apps';\nimport InstalledOutgoingWebhooks from 'components/integrations/installed_outgoing_webhooks';\nimport AddOutgoingOAuthConnection from 'components/integrations/outgoing_oauth_connections/add_outgoing_oauth_connection';\nimport EditOutgoingOAuthConnection from 'components/integrations/outgoing_oauth_connections/edit_outgoing_oauth_connection';\nimport InstalledOutgoingOAuthConnections from 'components/integrations/outgoing_oauth_connections/installed_outgoing_oauth_connections';\n\nimport Pluggable from 'plugins/pluggable';\n\nimport BackstageNavbar from './components/backstage_navbar';\nimport BackstageSidebar from './components/backstage_sidebar';\n\ntype ExtraProps = Pick<Props, 'user' | 'team'> & {scrollToTop: () => void}\n\ntype BackstageRouteProps = {\n    component: ComponentType<any>;\n    extraProps: ExtraProps;\n    path: string;\n    exact?: boolean;\n}\n\nconst BackstageRoute = ({component: Component, extraProps, ...rest}: BackstageRouteProps) => (\n    <Route\n        {...rest}\n        render={(props) => (\n            <Component\n                {...extraProps}\n                {...props}\n            />\n        )}\n    />\n);\n\ntype Props = {\n\n    /**\n     * Current user.\n     */\n    user: UserProfile;\n\n    /**\n     * Current team.\n     */\n    team?: Team;\n\n    /**\n     * Object from react-router\n     */\n    match: match<{url: string}>;\n\n    siteName?: string;\n    enableCustomEmoji: boolean;\n    enableIncomingWebhooks: boolean;\n    enableOutgoingWebhooks: boolean;\n    enableCommands: boolean;\n    enableOAuthServiceProvider: boolean;\n    enableOutgoingOAuthConnections: boolean;\n    canCreateOrDeleteCustomEmoji: boolean;\n    canManageIntegrations: boolean;\n}\n\nconst BackstageController = (props: Props) => {\n    const listRef = useRef<HTMLDivElement>(null);\n\n    const scrollToTop = () => {\n        if (listRef.current) {\n            listRef.current.scrollTop = 0;\n        }\n    };\n\n    if (!props.team || !props.user) {\n        return null;\n    }\n    const extraProps = {\n        team: props.team,\n        user: props.user,\n        scrollToTop,\n    };\n    return (\n        <>\n            <BackstageNavbar\n                team={props.team}\n                siteName={props.siteName}\n            />\n            <div\n                className='backstage-body'\n                ref={listRef}\n            >\n                <Pluggable pluggableName='Root'/>\n                <BackstageSidebar\n                    team={props.team}\n                    enableCustomEmoji={props.enableCustomEmoji}\n                    enableIncomingWebhooks={props.enableIncomingWebhooks}\n                    enableOutgoingWebhooks={props.enableOutgoingWebhooks}\n                    enableCommands={props.enableCommands}\n                    enableOAuthServiceProvider={props.enableOAuthServiceProvider}\n                    enableOutgoingOAuthConnections={props.enableOutgoingOAuthConnections}\n                    canCreateOrDeleteCustomEmoji={props.canCreateOrDeleteCustomEmoji}\n                    canManageIntegrations={props.canManageIntegrations}\n                />\n                <Switch>\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={'/:team/integrations'}\n                        component={Integrations}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/incoming_webhooks`}\n                        component={InstalledIncomingWebhooks}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/incoming_webhooks/add`}\n                        component={AddIncomingWehook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/incoming_webhooks/edit`}\n                        component={EditIncomingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/outgoing_webhooks`}\n                        component={InstalledOutgoingWebhooks}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/outgoing_webhooks/add`}\n                        component={AddOutgoingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/outgoing_webhooks/edit`}\n                        component={EditOutgoingWebhook}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/commands`}\n                        component={CommandsContainer}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/oauth2-apps`}\n                        component={InstalledOauthApps}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/oauth2-apps/add`}\n                        component={AddOauthApp}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/oauth2-apps/edit`}\n                        component={EditOauthApp}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/outgoing-oauth2-connections`}\n                        component={InstalledOutgoingOAuthConnections}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/outgoing-oauth2-connections/add`}\n                        component={AddOutgoingOAuthConnection}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={`${props.match.url}/outgoing-oauth2-connections/edit`}\n                        component={EditOutgoingOAuthConnection}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/confirm`}\n                        component={ConfirmIntegration}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        exact={true}\n                        path={'/:team/emoji'}\n                        component={Emoji}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/add`}\n                        component={AddEmoji}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots/add`}\n                        component={AddBot}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots/edit`}\n                        component={AddBot}\n                    />\n                    <BackstageRoute\n                        extraProps={extraProps}\n                        path={`${props.match.url}/bots`}\n                        component={Bots}\n                    />\n                </Switch>\n            </div>\n            <BackstageGlobalStyle/>\n        </>\n    );\n};\n\nexport default BackstageController;\n\nconst BackstageGlobalStyle = createGlobalStyle`\n    #root {\n        > #global-header,\n        > .team-sidebar,\n        > .main-wrapper .sidebar--right,\n        > .app-bar {\n            display: none;\n        }\n    }\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {haveITeamPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getMyTeams, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport BackstageController from './backstage_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const user = getCurrentUser(state);\n    const team = getCurrentTeam(state);\n\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enableCustomEmoji = config.EnableCustomEmoji === 'true';\n    const enableIncomingWebhooks = config.EnableIncomingWebhooks === 'true';\n    const enableOutgoingWebhooks = config.EnableOutgoingWebhooks === 'true';\n    const enableCommands = config.EnableCommands === 'true';\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableOutgoingOAuthConnections = config.EnableOutgoingOAuthConnections === 'true';\n\n    let canCreateOrDeleteCustomEmoji = (haveISystemPermission(state, {permission: Permissions.CREATE_EMOJIS}) || haveISystemPermission(state, {permission: Permissions.DELETE_EMOJIS}));\n    if (!canCreateOrDeleteCustomEmoji) {\n        for (const t of getMyTeams(state)) {\n            if (haveITeamPermission(state, t.id, Permissions.CREATE_EMOJIS) || haveITeamPermission(state, t.id, Permissions.DELETE_EMOJIS)) {\n                canCreateOrDeleteCustomEmoji = true;\n                break;\n            }\n        }\n    }\n\n    const canManageTeamIntegrations = (haveITeamPermission(state, team?.id, Permissions.MANAGE_SLASH_COMMANDS) || haveITeamPermission(state, team?.id, Permissions.MANAGE_OAUTH) || haveITeamPermission(state, team?.id, Permissions.MANAGE_INCOMING_WEBHOOKS) || haveITeamPermission(state, team?.id, Permissions.MANAGE_OUTGOING_WEBHOOKS));\n    const canManageSystemBots = (haveISystemPermission(state, {permission: Permissions.MANAGE_BOTS}) || haveISystemPermission(state, {permission: Permissions.MANAGE_OTHERS_BOTS}));\n    const canManageIntegrations = canManageTeamIntegrations || canManageSystemBots;\n\n    return {\n        user,\n        team,\n        siteName,\n        enableCustomEmoji,\n        enableIncomingWebhooks,\n        enableOutgoingWebhooks,\n        enableCommands,\n        enableOAuthServiceProvider,\n        enableOutgoingOAuthConnections,\n        canCreateOrDeleteCustomEmoji,\n        canManageIntegrations,\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(BackstageController));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport const TYPE_MODAL = 'modal';\nexport const TYPE_BACKSTAGE = 'backstage';\n\n// accepts either a single error or an array of errors\ntype Props = {\n    type?: React.ReactNode;\n    error?: React.ReactNode;\n    textClassName?: string;\n    iconClassName?: string;\n    margin?: boolean;\n    errors?: React.ReactNode[];\n};\n\nconst EMPTY_ERROR_LIST: React.ReactNode[] = [];\n\nconst FormError: React.FC<Props> = ({\n    error = null,\n    errors = EMPTY_ERROR_LIST,\n    iconClassName,\n    margin,\n    textClassName,\n    type,\n}) => {\n    if (!error && errors.length === 0) {\n        return null;\n    }\n\n    // look for the first truthy error to display\n    let message = error;\n\n    if (!message) {\n        for (const err of errors) {\n            if (err) {\n                message = err;\n            }\n        }\n    }\n\n    if (!message) {\n        return null;\n    }\n\n    if (type === TYPE_MODAL) {\n        return (\n            <div className='form-group'>\n                <label className='col-sm-12 has-error'>{message}</label>\n            </div>\n        );\n    }\n\n    if (type === TYPE_BACKSTAGE) {\n        return (\n            <div className='pull-left has-error'>\n                <label className='control-label'>{message}</label>\n            </div>\n        );\n    }\n\n    if (margin) {\n        return (\n            <div className='form-group has-error'>\n                <label className='control-label'>{message}</label>\n            </div>\n        );\n    }\n\n    return (\n        <div className={`col-sm-12 ${textClassName || 'has-error'}`}>\n            <label className='control-label'>\n                <i\n                    className={`fa ${iconClassName || 'fa-exclamation-circle'}`}\n                />{' '}\n                {message}\n            </label>\n        </div>\n    );\n};\n\nexport default React.memo(FormError);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl, type MessageDescriptor} from 'react-intl';\n\ntype Props = {\n    placeholder: MessageDescriptor;\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'placeholder'>;\n\nconst LocalizedPlaceholderInput = React.forwardRef<HTMLInputElement, Props>(({placeholder, ...otherProps}, ref) => {\n    const intl = useIntl();\n\n    return (\n        <input\n            ref={ref}\n            placeholder={intl.formatMessage(placeholder)}\n            {...otherProps}\n        />\n    );\n});\n\nLocalizedPlaceholderInput.displayName = 'LocalizedPlaceholderInput';\n\nexport default LocalizedPlaceholderInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    additionalClassName?: string;\n}\n\nconst NextIcon = ({additionalClassName}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <i\n            className={classNames('icon icon-chevron-right', additionalClassName)}\n            title={formatMessage({\n                id: 'generic_icons.next',\n                defaultMessage: 'Next Icon',\n            })}\n        />\n    );\n};\n\nexport default React.memo(NextIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    additionalClassName?: string;\n}\n\nconst PreviousIcon = ({additionalClassName}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <i\n            className={classNames('icon icon-chevron-left', additionalClassName)}\n            title={formatMessage({id: 'generic_icons.previous', defaultMessage: 'Previous Icon'})}\n        />\n    );\n};\n\nexport default React.memo(PreviousIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function SearchIcon() {\n    const {formatMessage} = useIntl();\n\n    return (\n        <i\n            className='fa fa-search'\n            title={formatMessage({id: 'generic_icons.search', defaultMessage: 'Search Icon'})}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    additionalClassName?: string;\n}\n\nconst WarningIcon = ({additionalClassName}: Props) => {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className={classNames('fa fa-warning', additionalClassName)}\n            title={formatMessage({id: 'generic_icons.warning', defaultMessage: 'Warning Icon'})}\n        />\n    );\n};\n\nexport default React.memo(WarningIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Bot} from '@mattermost/types/bots';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getUsers} from 'mattermost-redux/selectors/entities/common';\n\nexport const ExternalBotAccountNames: string[] = ['mattermost-advisor'];\n\nexport function getBotAccounts(state: GlobalState) {\n    return state.entities.bots.accounts;\n}\n\nexport const getExternalBotAccounts: (state: GlobalState) => Record<string, Bot> = createSelector(\n    'getExternalBotAccounts',\n    getBotAccounts,\n    getUsers,\n    (botAccounts, userProfiles) => {\n        const nextState: Record<string, Bot> = {};\n        Object.values(botAccounts).forEach((botAccount) => {\n            const botUser = userProfiles[botAccount.user_id];\n            if (botUser && !ExternalBotAccountNames.includes(botUser.username)) {\n                nextState[botAccount.user_id] = botAccount;\n            }\n        });\n\n        return nextState;\n    },\n);\n"],"names":["BackIcon","formatMessage","useIntl","React","className","title","id","defaultMessage","BackstageNavbar","_ref","team","siteName","teamExists","delete_at","BlockableLink","to","concat","name","FormattedMessage","values","propTypes","_pt","DeleteIntegrationLink","props","confirmButtonText","linkText","modalMessage","modalTitle","onDelete","openModal","onClick","useCallback","modalId","dialogProps","confirmButtonClass","modalClass","message","subtitleText","WarningIcon","additionalClassName","onConfirm","dialogType","ConfirmModalRedux","isRequired","mapDispatchToProps","connect","DeleteEmojiButton","DELETE_PERMISSION","Permissions","DELETE_EMOJIS","DELETE_OTHER_PERMISSION","DELETE_OTHERS_EMOJIS","EmojiListItem","actions","deleteCustomEmoji","emoji","creatorUsername","currentUserId","creatorDisplayName","emoticonStyle","useMemo","backgroundImage","Client4","getCustomEmojiImageUrl","handleDelete","displayName","deleteButton","creator_id","AnyTeamPermissionGate","permissions","style","emojiId","state","ownProps","entities","emojis","customEmoji","creator","getUser","getDisplayNameByUser","username","getCurrentUserId","currentTeam","getCurrentTeam","dispatch","bindActionCreators","EmojiList","constructor","super","_defineProperty","e","preventDefault","next","this","page","setState","nextLoading","getCustomEmojis","Emoji","SORT_BY_NAME","then","data","length","missingPages","scrollToTop","target","term","value","clearTimeout","searchTimeout","setTimeout","async","trim","searchEmojis","loading","searchCustomEmojis","map","em","index","indexOf","newSearchEmojis","splice","componentDidMount","EMOJI_PER_PAGE","_ref2","render","nextButton","previousButton","push","key","colSpan","LoadingScreen","emojiIds","forEach","deleteFromSearch","pageStart","pageEnd","slice","buttonContents","NextIcon","SaveButton","btnClass","extraClasses","nextPage","saving","disabled","savingMessage","previousPage","PreviousIcon","SearchIcon","LocalizedPlaceholderInput","type","placeholder","defineMessage","onChange","onSearchChange","search","flexGrow","flexShrink","getCustomEmojiIdsSortedByName","CREATE_EMOJIS_PERMISSIONS","CREATE_EMOJIS","ROLES","EmojiPage","teamDisplayName","teamName","currentTheme","intl","useEffect","updateTitle","loadRolesIfNeeded","Utils","document","Link","display_name","general","config","SiteName","getTheme","children","childrenElements","child","AddEmoji","handleSubmit","emojiMap","user","image","error","toLowerCase","startsWith","endsWith","substring","test","hasSystemEmoji","has","size","response","createCustomEmoji","getHistory","responseError","genericError","files","imageUrl","reader","FileReader","onload","result","readAsDataURL","filename","preview","htmlFor","BackstageHeader","onSubmit","handleFormSubmit","maxLength","updateName","accept","Constants","ACCEPT_EMOJI_IMAGE","multiple","updateImage","FormError","SpinnerButton","spinning","spinningText","handleSaveButtonClick","getEmojiMap","IntegrationOption","description","link","alt","src","Integrations","arguments","currentSiteName","options","enableIncomingWebhooks","TeamPermissionGate","teamId","MANAGE_INCOMING_WEBHOOKS","IncomingWebhookIcon","enableOutgoingWebhooks","MANAGE_OUTGOING_WEBHOOKS","OutgoingWebhookIcon","enableCommands","MANAGE_SLASH_COMMANDS","SlashCommandIcon","enableOAuthServiceProvider","SystemPermissionGate","MANAGE_OAUTH","OAuthIcon","enableOutgoingOAuthConnections","MANAGE_OUTGOING_OAUTH_CONNECTIONS","OutgoingOAuthConnectionsIcon","BotAccountsIcon","appDirectory","ExternalLink","href","location","getConfig","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableCommands","EnableOAuthServiceProvider","EnableOutgoingOAuthConnections","ChannelSelect","channels","selectOpen","selectPrivate","selectDm","channel","channelName","OPEN_CHANNEL","PRIVATE_CHANNEL","DM_CHANNEL","memo","getMyChannelsSorted","createSelector","getMyChannels","getCurrentUserLocale","locale","filter","sort","sortChannelsByTypeAndDisplayName","bind","AbstractIncomingWebhook","PureComponent","hook","channelId","channel_id","channelLocked","channel_locked","iconURL","icon_url","serverError","clientError","_this$props$initialHo","_this$props$initialHo2","_this$props$initialHo3","_this$props$initialHo4","_this$props$initialHo5","_this$props$initialHo6","initialHook","create_at","update_at","team_id","user_id","action","checked","getStateFromHook","headerToRender","header","footerToRender","footer","updateDisplayName","updateDescription","updateChannelId","updateChannelLocked","enablePostUsernameOverride","updateUsername","enablePostIconOverride","updateIconURL","errors","messages","defineMessages","AddIncomingWebhook","setServerError","useState","addIncomingHook","createIncomingHook","EnablePostUsernameOverride","EnablePostIconOverride","r","t","i","Symbol","toPrimitive","call","TypeError","String","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","AbstractOAuthApp","app","homepage","callbackUrls","callback_urls","join","is_trusted","has_icon","Boolean","_this$icon_url$curren","current","callbackUrl","split","Image","imageLoaded","getStateFromApp","initialApp","renderExtra","icon","trusted","MANAGE_SYSTEM","updateTrusted","updateHomepage","ref","updateIconUrl","rows","updateCallbackUrls","AddOAuthApp","history","useHistory","addOAuthApp","AbstractOutgoingWebhook","triggerWords","trigger_words","contentType","content_type","triggerWhen","trigger_when","triggerWord","token","parseInt","contentTypeOption1","contentTypeOption2","updateContentType","updateTriggerWords","updateTriggerWhen","localizeMessage","DocLinks","TRUSTED_CONNECTION","AddOutgoingWebhook","createOutgoingHook","createBot","bot","bindClientFunc","clientFunc","onSuccess","BotTypes","RECEIVED_BOT_ACCOUNT","params","patchBot","botUserId","botPatch","loadBots","undefined","perPage","getBotsIncludeDeleted","RECEIVED_BOT_ACCOUNTS","disableBot","enableBot","remainingProps","setFilter","filterLowered","searchPlaceholder","childCount","hasChildren","emptyTextSearch","_objectSpread","searchTerm","emptyText","addLink","addText","addButtonId","hasFilter","startCount","endCount","total","isFirstPage","isLastPage","getPaging","pageSize","childrenToDisplay","previousPageFn","nextPageFn","helpText","matchesFilter","owner","ownerUsername","Bot","enableUserAccessToken","disableUserAccessToken","confirmingId","revokeUserAccessToken","closeConfirm","creatingTokenState","assign","createUserAccessToken","fromApp","tokenList","accessTokens","activeLink","disabledText","disableClass","is_active","confirmRevokeToken","openCreateToken","handleCreateToken","autoFocus","handleUpdateDescription","closeCreateToken","imageURL","last_picture_update","Markdown","ConfirmModal","show","revokeTokenConfirmed","onCancel","Bots","owners","users","appsBotIDs","includes","bots","a","b","localeCompare","match","enabledBots","botToJSX","disabledBots","EnabledSection","DisabledSection","hasDisabled","START_PAGE_NUM","PAGE_SIZE","promises","owner_id","getUserAccessTokensForUser","Promise","all","appsEnabled","fetchAppsBotIDs","botsToDisplay","BackstageList","createBots","chunks","botAccounts","EnableBotAccountCreation","getExternalBotAccounts","botValues","reduce","UserSelectors","admin","userAccessTokensByUser","getAppsBotIDs","roleOptionSystemAdmin","roleOptionMember","AddBot","role","postAll","postChannels","pictureFile","previewBlob","URL","createObjectURL","e2","_e2$target","orientation","FileUtils","orientationStyles","readAsArrayBuffer","BotDefaultIcon","roles","General","SYSTEM_USER_ROLE","SYSTEM_ADMIN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","rolesResult","updateUserRoles","adding","isFile","AcceptedProfileImageTypes","maxFileSize","uploadProfileImage","setDefaultProfileImage","updateRoles","usernameError","errObj","ValidationErrors","INVALID_LAST_CHARACTER","tokenResult","UserUtils","transform","transformOrigin","file","subtitle","buttonText","buttonActiveText","imageStyles","removeImageIcon","WithTooltip","setDefault","ACCEPT_STATIC_IMAGE","updatePicture","editingUserHasManageSystem","updateRole","msg","DeveloperLinks","PERSONAL_ACCESS_TOKENS","updatePostAll","updatePostChannels","botId","URLSearchParams","get","getBotAccounts","MaxFileSize","haveISystemPermission","permission","OAuthConnectionAudienceInput","mounted","useRef","matchedConnection","setMatchingOAuthConnection","loadingAudienceMatch","setLoadingAudienceMatch","oauthConnections","useSelector","getOutgoingOAuthConnections","oauthConnectionsEnabled","getCurrentTeamId","useDispatch","matchConnectionsOnInput","res","fetchOutgoingOAuthConnectionsForAudience","inputValue","debouncedMatchConnections","debounce","fetchOutgoingOAuthConnections","connections","input","autoComplete","oauthMessage","LoadingSpinner","OauthIcon","connectionName","InformationOutlineIcon","AbstractCommand","command","_command$display_name","_command$description","_command$trigger","_command$url","_command$method","_command$username","_command$icon_url","_command$auto_complet","_command$auto_complet2","_command$auto_complet3","trigger","url","method","iconUrl","autocomplete","auto_complete","autocompleteHint","auto_complete_hint","autocompleteDescription","auto_complete_desc","substr","_this$state$autocompl","_this$state$autocompl2","MIN_TRIGGER_LENGTH","MAX_TRIGGER_LENGTH","min","max","methodValue","getStateFromCommand","initialCommand","updateAutocompleteHint","updateAutocompleteDescription","getBackstageHeader","updateTrigger","CUSTOM_SLASH_COMMANDS","updateUrl","text","updateMethod","updateAutocomplete","getBackstageFooter","AddCommand","headerMessage","footerMessage","loadingMessage","addCommand","CopyText","label","copyText","copyToClipboard","queryCommandSupported","ConfirmIntegration","commands","oauthApps","incomingHooks","outgoingHooks","outgoingOAuthConnections","window","addEventListener","handleKeyPress","removeEventListener","headerText","tokenText","incomingHook","outgoingHook","oauthApp","outgoingOAuthConnection","COMMAND","commandToken","SETUP_CUSTOM_SLASH_COMMANDS","copyToken","INCOMING_WEBHOOK","incomingHookToken","getSiteURL","SETUP_INCOMING_WEBHOOKS","OUTGOING_WEBHOOK","outgoingHookToken","SETUP_OUTGOING_WEBHOOKS","OAUTH_APP","oauthAppToken","oauthAppSecret","client_secret","SETUP_OAUTH2","copyClientId","secret","copyClientSecret","OUTGOING_OAUTH_CONNECTIONS","clientId","client_id","clientSecret","credentials_username","password","credentials_password","grant_type","copyUsername","oauth_token_url","audiences","BOT","replace","ErrorPageTypes","PAGE_NOT_FOUND","botToken","botname","getCommands","getOAuthApps","getIncomingHooks","getOutgoingHooks","EditCommand","_this$state$originalC","_this$state$originalC2","_this$state$originalC3","_this$state$originalC4","newCommand","originalCommand","handleConfirmModal","submitCommand","showConfirmModal","editCommand","confirmButton","confirmTitle","confirmMessage","confirmModalDismissed","getCustomTeamCommands","commandId","InstalledCommand","onRegenToken","canChange","handleRegenToken","createAt","InstalledCommands","regenCommandToken","deleteCommand","commandCompare","nameA","nameB","canManageOthersSlashCommands","buildYourOwn","haveITeamPermission","MANAGE_OTHERS_SLASH_COMMANDS","CommandRoute","component","Component","extraProps","rest","_objectWithoutProperties","_excluded","Route","path","CommandsContainer","_this$props$team","loadCommandsAndProfilesForTeam","Switch","exact","Redirect","getUsers","EditIncomingWebhook","_this$props$hook","newHook","submitHook","updateIncomingHook","getIncomingHook","hookId","editIncomingHook","integrations","HEADER","FOOTER","LOADING","EditOAuthApp","newApp","every","v","submitOAuthApp","editOAuthApp","err","getOAuthApp","oauthAppId","EditOutgoingWebhook","triggerWordsSame","callbackUrlsSame","updateOutgoingHook","getOutgoingHook","editOutgoingHook","incomingWebhook","InstalledIncomingWebhook","incomingWebhookId","InstalledIncomingWebhooks","removeIncomingHook","loadIncomingHooksAndProfilesForTeam","pageToLoad","loadPage","displayNameA","channelA","displayNameB","incomingWebhookCompare","canManageOthersWebhooks","deleteIncomingWebhook","incomingHooksTotalCount","incomingWebhooks","getFilteredIncomingHooks","getIncomingHooksTotalCount","MANAGE_OTHERS_INCOMING_WEBHOOKS","getAllChannels","FAKE_SECRET","InstalledOAuthApp","onRegenerateSecret","handleShowClientSecret","creatorName","urls","isTrusted","showHide","handleHideClientSecret","regen","handleRegenerate","appInfo","InstalledOAuthApps","deleteOAuthApp","oauthAppCompare","regenOAuthAppSecret","appsOAuthAppIDs","loadOAuthAppsAndProfiles","toString","canManageOauth","oauthApplications","getAppsOAuthAppIDs","outgoingWebhook","InstalledOutgoingWebhook","makeDisplayName","InstalledOutgoingWebhooks","regenOutgoingHookToken","removeOutgoingHook","channelB","outgoingWebhooks","outgoingWebhookCompare","regenOutgoingWebhookToken","loadOutgoingHooksAndProfilesForTeam","MANAGE_OTHERS_OUTGOING_WEBHOOKS","keys","Actions","ownKeys","getOwnPropertySymbols","o","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","ValidationStatus","initialState","AbstractOutgoingOAuthConnection","formState","setFormState","connection","audienceUrls","oauthTokenUrl","grantType","newState","oldState","useOutgoingOAuthForm","initialConnection","storedError","setError","validationError","setValidationError","isSubmitting","setIsSubmitting","validationStatus","setValidationStatus","INITIAL","isEditingSecret","setIsEditingSecret","isValidationModalOpen","setIsValidationModalOpen","isNewConnection","parseForm","requireAudienceUrl","audienceUrl","hideSkipValidateModal","VALIDATED","submitAction","setUnvalidated","DIRTY","clientSecretSection","repeat","startEditingClientSecret","ValidateButton","_props$initialConnect","VALIDATING","validateOutgoingOAuthConnection","ERROR","status","onExited","AlertOutlineIcon","CheckCircleOutlineIcon","addOutgoingOAuthConnection","connectionId","existingConnection","newConnection","setNewConnection","setShowConfirmModal","getOutgoingOAuthConnection","createOutgoingOAuthConnection","editOutgoingOAuthConnection","InstalledOutgoingOAuthConnection","connectionInfo","setLoading","canManageOutgoingOAuthConnections","loadOutgoingOAuthConnectionsAndProfiles","deleteOutgoingOAuthConnectionLocal","deleteOutgoingOAuthConnection","outgoingOauthConnectionCompare","childProps","outgoingOauthConnections","parentLink","NavLink","activeClassName","classNames","subsection","clonedChildren","BackstageSidebar","renderCustomEmoji","enableCustomEmoji","canCreateOrDeleteCustomEmoji","BackstageCategory","renderIntegrations","canManageIntegrations","BackstageSection","BackstageRoute","BackstageGlobalStyle","createGlobalStyle","withRouter","getCurrentUser","EnableCustomEmoji","getMyTeams","canManageTeamIntegrations","canManageSystemBots","MANAGE_BOTS","MANAGE_OTHERS_BOTS","listRef","scrollTop","Pluggable","pluggableName","AddIncomingWehook","InstalledOauthApps","AddOauthApp","EditOauthApp","InstalledOutgoingOAuthConnections","AddOutgoingOAuthConnection","EditOutgoingOAuthConnection","TYPE_BACKSTAGE","EMPTY_ERROR_LIST","iconClassName","margin","textClassName","otherProps","ExternalBotAccountNames","accounts","userProfiles","nextState","botAccount","botUser"],"sourceRoot":""}