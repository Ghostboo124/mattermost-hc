{"version":3,"file":"4292.acb4facfc5623da1109a.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/audit_table/holders.ts","webpack://mattermost-webapp/./src/components/audit_table/audit_row/audit_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/channel_row/channel_create_direct_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/channel_row/channel_default_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/channel_row/channel_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/user_row/user_update_active_session_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/user_row/user_row.tsx","webpack://mattermost-webapp/./src/components/audit_table/format_audit.tsx","webpack://mattermost-webapp/./src/components/audit_table/audit_table.tsx","webpack://mattermost-webapp/./src/components/audit_table/index.ts","webpack://mattermost-webapp/./src/components/color_input.tsx","webpack://mattermost-webapp/./src/components/form_error.tsx","webpack://mattermost-webapp/./src/components/localized_placeholder_textarea.tsx","webpack://mattermost-webapp/./src/components/setting_item.tsx","webpack://mattermost-webapp/./src/components/setting_item_max.tsx","webpack://mattermost-webapp/./src/components/setting_item_min.tsx","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_desktop_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_mobile_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_denied_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_never_granted_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_unsupported_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_desktop_denied_section_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_title_tag/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_notification_sounds_setting/index.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/utils/notify_props.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/manage_auto_responder/manage_auto_responder.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/send_test_notification_notice.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/user_settings_notifications.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_edit_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/fa_warning_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/modals/components/base_setting_item.tsx","webpack://mattermost-webapp/./src/components/widgets/modals/components/react_select_item.tsx","webpack://mattermost-webapp/./src/utils/password.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {defineMessages} from 'react-intl';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: 'audit_table.sessionRevoked',\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: 'audit_table.channelCreated',\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: 'audit_table.establishedDM',\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: 'audit_table.nameUpdated',\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: 'audit_table.headerUpdated',\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: 'audit_table.channelDeleted',\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: 'audit_table.userAdded',\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: 'audit_table.userRemoved',\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: 'audit_table.attemptedRegisterApp',\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: 'audit_table.attemptedAllowOAuthAccess',\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: 'audit_table.successfullOAuthAccess',\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: 'audit_table.failedOAuthAccess',\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: 'audit_table.attemptedOAuthToken',\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: 'audit_table.successfullOAuthToken',\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: 'audit_table.oauthTokenFailed',\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: 'audit_table.attemptedLogin',\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: 'audit_table.authenticated',\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: 'audit_table.successfullLogin',\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: 'audit_table.failedLogin',\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: 'audit_table.updatePicture',\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: 'audit_table.updateGeneral',\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: 'audit_table.attemptedPassword',\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: 'audit_table.successfullPassword',\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: 'audit_table.failedPassword',\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: 'audit_table.updatedRol',\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: 'audit_table.member',\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: 'audit_table.accountActive',\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: 'audit_table.accountInactive',\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: 'audit_table.by',\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: 'audit_table.byAdmin',\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: 'audit_table.sentEmail',\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: 'audit_table.attemptedReset',\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: 'audit_table.successfullReset',\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: 'audit_table.updateGlobalNotifications',\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: 'audit_table.attemptedWebhookCreate',\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: 'audit_table.successfullWebhookCreate',\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: 'audit_table.failedWebhookCreate',\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: 'audit_table.attemptedWebhookDelete',\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: 'audit_table.successfullWebhookDelete',\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: 'audit_table.failedWebhookDelete',\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: 'audit_table.logout',\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: 'audit_table.verified',\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: 'audit_table.revokedAll',\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: 'audit_table.loginAttempt',\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: 'audit_table.loginFailure',\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: 'audit_table.attemptedLicenseAdd',\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: 'audit_table.successfullLicenseAdd',\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: 'audit_table.failedExpiredLicenseAdd',\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: 'audit_table.failedInvalidLicenseAdd',\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: 'audit_table.licenseRemoved',\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport default holders;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedTime, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport holders from '../holders';\n\nexport type Props = {\n    audit: Audit;\n    actionURL: string;\n    desc?: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function AuditRow({\n    actionURL,\n    audit,\n    desc: aDesc,\n    showUserId,\n    showIp,\n    showSession,\n}: Props) {\n    const intl = useIntl();\n    let desc = aDesc;\n    if (!desc) {\n        /* Currently not called anywhere */\n        if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n            desc = intl.formatMessage(holders.revokedAll);\n        } else {\n            let actionDesc = '';\n            if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                actionDesc = toTitleCase(actionDesc);\n            }\n\n            let extraInfoDesc = '';\n            if (audit.extra_info) {\n                extraInfoDesc = audit.extra_info;\n\n                if (extraInfoDesc.indexOf('=') !== -1) {\n                    extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                }\n            }\n            desc = actionDesc + ' ' + extraInfoDesc;\n        }\n    }\n\n    const date = new Date(audit.create_at);\n    const timestamp = (\n        <div>\n            <div>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n            </div>\n            <div>\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </div>\n        </div>\n    );\n\n    const ip = audit.ip_address;\n    const sessionId = audit.session_id;\n\n    const auditProfile = useSelector((state: GlobalState) => getUser(state, audit.user_id));\n    const userId = auditProfile ? auditProfile.email : audit.user_id;\n    let uContent;\n    if (showUserId) {\n        uContent = <td className='word-break--all'>{userId}</td>;\n    }\n\n    let iContent;\n    if (showIp) {\n        iContent = (\n            <td className='whitespace--nowrap word-break--all'>\n                {ip}\n            </td>\n        );\n    }\n\n    let sContent;\n    if (showSession) {\n        sContent = (\n            <td className='whitespace--nowrap word-break--all'>\n                {sessionId}\n            </td>\n        );\n    }\n\n    let descStyle = '';\n    if (desc.toLowerCase().indexOf('fail') !== -1) {\n        descStyle = ' color--error';\n    }\n\n    return (\n        <tr key={audit.id}>\n            <td className='whitespace--nowrap word-break--all'>\n                {timestamp}\n            </td>\n            {uContent}\n            <td className={'word-break--all' + descStyle}>{desc}</td>\n            {iContent}\n            {sContent}\n        </tr>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getDirectTeammate} from 'mattermost-redux/selectors/entities/channels';\n\nimport type {GlobalState} from 'types/store';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    channelObj?: Channel | null;\n}\n\nexport default function ChannelCreateDirectRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    channelObj,\n}: Props) {\n    const intl = useIntl();\n\n    const channelId = channelObj?.id ?? '';\n\n    const desc = intl.formatMessage(holders.establishedDM, {\n        username: useSelector((state: GlobalState) =>\n            getDirectTeammate(state, channelId),\n        )?.username,\n    });\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    channelInfo: string[];\n    channelName: string;\n    channelURL: string;\n};\n\nexport default function ChannelDefaultRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    channelInfo,\n    channelName,\n    channelURL,\n}: Props) {\n    const intl = useIntl();\n\n    let userIdField = [];\n    let userId = '';\n    let username = '';\n\n    if (channelInfo[1]) {\n        userIdField = channelInfo[1].split('=');\n\n        if (userIdField.indexOf('user_id') >= 0) {\n            userId = userIdField[userIdField.indexOf('user_id') + 1];\n        }\n    }\n\n    const profile = useSelector((state: GlobalState) => getUser(state, userId));\n    if (profile) {\n        username = profile.username;\n    }\n\n    let desc = '';\n    if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n        desc = intl.formatMessage(holders.channelDeleted, {url: channelURL});\n    } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n        desc = intl.formatMessage(holders.userAdded, {username, channelName});\n    } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n        desc = intl.formatMessage(holders.userRemoved, {\n            username,\n            channelName,\n        });\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport ChannelCreateDirectRow from './channel_create_direct_row';\nimport ChannelDefaultRow from './channel_default_row';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function ChannelRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n}: Props): JSX.Element {\n    const props = {\n        showUserId,\n        showIp,\n        showSession,\n    };\n    const intl = useIntl();\n\n    const channelInfo = audit.extra_info.split(' ');\n    const channelNameField = channelInfo[0].split('=');\n\n    const channelURL = channelNameField.indexOf('name') >= 0 ? channelNameField[channelNameField.indexOf('name') + 1] : '';\n    const channelObj = useSelector((state: GlobalState) => getChannelByName(state, channelURL));\n    const channelName = channelObj?.display_name ?? channelURL;\n\n    switch (actionURL) {\n    case '/channels/create':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.channelCreated, {channelName})}\n                {...props}\n            />\n        );\n    case '/channels/create_direct':\n        return (\n            <ChannelCreateDirectRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n                channelObj={channelObj}\n            />\n        );\n    case '/channels/update':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.nameUpdated, {channelName})}\n                {...props}\n            />\n        );\n    case '/channels/update_desc': // support the old path\n    case '/channels/update_header':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.headerUpdated, {channelName})}\n                {...props}\n            />\n        );\n    default: {\n        return (\n            <ChannelDefaultRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n                channelInfo={channelInfo}\n                channelName={channelName}\n                channelURL={channelURL}\n            />\n        );\n    }\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getCurrentUser, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {isSystemAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n    updateField: string;\n    userInfo: string[];\n}\n\nexport default function UserUpdateActiveSessionRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n    updateField,\n    userInfo,\n}: Props): JSX.Element {\n    const intl = useIntl();\n\n    let desc = '';\n\n    if (updateField === 'true') {\n        desc = intl.formatMessage(holders.accountActive);\n    } else if (updateField === 'false') {\n        desc = intl.formatMessage(holders.accountInactive);\n    }\n\n    const actingUserInfo = userInfo[1].split('=');\n    const isSessionUser = actingUserInfo[0] === 'session_user';\n    const actingUser = useSelector((state: GlobalState) => getUser(state, isSessionUser ? actingUserInfo[1] : ''));\n    const user = useSelector((state: GlobalState) => getCurrentUser(state));\n    if (isSessionUser) {\n        if (user && actingUser && isSystemAdmin(user.roles)) {\n            desc += intl.formatMessage(holders.by, {\n                username: actingUser.username,\n            });\n        } else if (user && actingUser) {\n            desc += intl.formatMessage(holders.byAdmin);\n        }\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            actionURL={actionURL}\n            desc={desc}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Audit} from '@mattermost/types/audits';\n\nimport UserUpdateActiveSessionRow from './user_update_active_session_row';\n\nimport AuditRow from '../audit_row/audit_row';\nimport holders from '../holders';\n\ntype Props = {\n    audit: Audit;\n    actionURL: string;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function UserRow({\n    audit,\n    actionURL,\n    showUserId,\n    showIp,\n    showSession,\n}: Props): JSX.Element {\n    const props = {\n        showUserId,\n        showIp,\n        showSession,\n    };\n    const intl = useIntl();\n\n    const userInfo = audit.extra_info.split(' ');\n\n    let desc = '';\n    switch (actionURL) {\n    case '/users/login':\n        if (userInfo[0] === 'attempt') {\n            desc = intl.formatMessage(holders.attemptedLogin);\n        } else if (userInfo[0] === 'success') {\n            desc = intl.formatMessage(holders.successfullLogin);\n        } else if (userInfo[0] === 'authenticated') {\n            desc = intl.formatMessage(holders.authenticated);\n        } else if (userInfo[0]) {\n            desc = intl.formatMessage(holders.failedLogin);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    case '/users/revoke_session':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.sessionRevoked, {\n                    sessionId: userInfo[0].split('=')[1],\n                })}\n                {...props}\n            />\n        );\n    case '/users/newimage':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updatePicture)}\n                {...props}\n            />\n        );\n    case '/users/update':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGeneral)}\n                {...props}\n            />\n        );\n    case '/users/newpassword':\n        if (userInfo[0] === 'attempted') {\n            desc = intl.formatMessage(holders.attemptedPassword);\n        } else if (userInfo[0] === 'completed') {\n            desc = intl.formatMessage(holders.successfullPassword);\n        } else if (\n            userInfo[0] ===\n                'failed - tried to update user password who was logged in through oauth'\n        ) {\n            desc = intl.formatMessage(holders.failedPassword);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGeneral)}\n                {...props}\n            />\n        );\n    case '/users/update_roles': {\n        const userRoles = userInfo[0].split('=')[1];\n\n        desc = intl.formatMessage(holders.updatedRol);\n        if (userRoles.trim()) {\n            desc += userRoles;\n        } else {\n            desc += intl.formatMessage(holders.member);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    }\n    case '/users/update_active': {\n        const updateType = userInfo[0].split('=')[0];\n        const updateField = userInfo[0].split('=')[1];\n\n        /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n        if (updateType === 'active') {\n            return (\n                <UserUpdateActiveSessionRow\n                    audit={audit}\n                    actionURL={actionURL}\n                    showUserId={showUserId}\n                    showIp={showIp}\n                    showSession={showSession}\n                    updateField={updateField}\n                    userInfo={userInfo}\n                />\n            );\n        } else if (updateType === 'session_id') {\n            desc = intl.formatMessage(holders.sessionRevoked, {\n                sessionId: updateField,\n            });\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    }\n    case '/users/send_password_reset':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.sentEmail, {\n                    email: userInfo[0].split('=')[1],\n                })}\n                {...props}\n            />\n        );\n    case '/users/reset_password':\n        if (userInfo[0] === 'attempt') {\n            desc = intl.formatMessage(holders.attemptedReset);\n        } else if (userInfo[0] === 'success') {\n            desc = intl.formatMessage(holders.successfullReset);\n        }\n\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                {...props}\n            />\n        );\n    case '/users/update_notify':\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={intl.formatMessage(holders.updateGlobalNotifications)}\n                {...props}\n            />\n        );\n    default:\n        return (\n            <AuditRow\n                audit={audit}\n                actionURL={actionURL}\n                desc={desc}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Audit} from '@mattermost/types/audits';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport AuditRow from './audit_row/audit_row';\nimport ChannelRow from './channel_row/channel_row';\nimport holders from './holders';\nimport UserRow from './user_row/user_row';\n\nexport type Props = {\n    audit: Audit;\n    showUserId: boolean;\n    showIp: boolean;\n    showSession: boolean;\n}\n\nexport default function FormatAudit({\n    audit,\n    showUserId,\n    showIp,\n    showSession,\n}: Props) {\n    const intl = useIntl();\n    const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n\n    if (actionURL.indexOf('/channels') === 0) {\n        return (\n            <ChannelRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n\n    if (actionURL.indexOf('/users') === 0) {\n        return (\n            <UserRow\n                audit={audit}\n                actionURL={actionURL}\n                showUserId={showUserId}\n                showIp={showIp}\n                showSession={showSession}\n            />\n        );\n    }\n\n    const {formatMessage} = intl;\n    let auditDesc = '';\n\n    if (actionURL.indexOf('/oauth') === 0) {\n        const oauthInfo = audit.extra_info.split(' ');\n\n        switch (actionURL) {\n        case '/oauth/register': {\n            const clientIdField = oauthInfo[0].split('=');\n\n            if (clientIdField[0] === 'client_id') {\n                auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n            }\n\n            break;\n        }\n        case '/oauth/allow':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthAccess);\n            } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                auditDesc = formatMessage(holders.failedOAuthAccess);\n            }\n\n            break;\n        case '/oauth/access_token':\n            if (oauthInfo[0] === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedOAuthToken);\n            } else if (oauthInfo[0] === 'success') {\n                auditDesc = formatMessage(holders.successfullOAuthToken);\n            } else {\n                const oauthTokenFailure = oauthInfo[0].split('-');\n\n                if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                    auditDesc = formatMessage(holders.oauthTokenFailed, {token: oauthTokenFailure[1].trim()});\n                }\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/hooks') === 0) {\n        const webhookInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/hooks/incoming/create':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookCreate);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n            } else if (webhookInfo === 'fail - bad channel permissions') {\n                auditDesc = formatMessage(holders.failedWebhookCreate);\n            }\n\n            break;\n        case '/hooks/incoming/delete':\n            if (webhookInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedWebhookDelete);\n            } else if (webhookInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullWebhookDelete);\n            } else if (webhookInfo === 'fail - inappropriate conditions') {\n                auditDesc = formatMessage(holders.failedWebhookDelete);\n            }\n\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/license') === 0) {\n        const licenseInfo = audit.extra_info;\n\n        switch (actionURL) {\n        case '/license/add':\n            if (licenseInfo === 'attempt') {\n                auditDesc = formatMessage(holders.attemptedLicenseAdd);\n            } else if (licenseInfo === 'success') {\n                auditDesc = formatMessage(holders.successfullLicenseAdd);\n            } else if (licenseInfo === 'failed - expired or non-started license') {\n                auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n            } else if (licenseInfo === 'failed - invalid license') {\n                auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n            }\n\n            break;\n        case '/license/remove':\n            auditDesc = formatMessage(holders.licenseRemoved);\n            break;\n        default:\n            break;\n        }\n    } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n        auditDesc = toTitleCase(audit.extra_info);\n    } else {\n        switch (actionURL) {\n        case '/logout':\n            auditDesc = formatMessage(holders.logout);\n            break;\n        case '/verify_email':\n            auditDesc = formatMessage(holders.verified);\n            break;\n        default:\n            break;\n        }\n    }\n\n    return (\n        <AuditRow\n            audit={audit}\n            desc={auditDesc}\n            actionURL={actionURL}\n            showUserId={showUserId}\n            showIp={showIp}\n            showSession={showSession}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Audit} from '@mattermost/types/audits';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport FormatAudit from './format_audit';\n\ntype Props = {\n    intl: IntlShape;\n    audits: Audit[];\n    showUserId?: boolean;\n    showIp?: boolean;\n    showSession?: boolean;\n    currentUser: UserProfile;\n    actions: {\n        getMissingProfilesByIds: (userIds: string[]) => void;\n    };\n};\n\nexport class AuditTable extends React.PureComponent<Props> {\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const {audits, showUserId, showIp, showSession} = this.props;\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody data-testid='auditTableBody'>\n                    {audits.map((audit) => (\n                        <FormatAudit\n                            key={audit.id}\n                            audit={audit}\n                            showUserId={Boolean(this.props.showUserId)}\n                            showIp={Boolean(this.props.showIp)}\n                            showSession={Boolean(this.props.showSession)}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport AuditTable from './audit_table';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker} from 'react-color';\nimport type {ColorResult} from 'react-color';\nimport tinycolor from 'tinycolor2';\n\ntype Props = {\n    id: string;\n    onChange: (color: string) => void;\n    value: string;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    focused: boolean;\n    isOpened: boolean;\n    value: string;\n}\n\nexport default class ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n\n        this.state = {\n            focused: false,\n            isOpened: false,\n            value: props.value,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (!state.focused && props.value !== state.value) {\n            return {\n                value: props.value,\n            };\n        }\n\n        return null;\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick, {capture: true});\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        this.setState({focused: false});\n        this.props.onChange(newColorData.hex);\n    };\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n        }\n\n        this.setState({value});\n    };\n\n    private onFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n        this.setState({\n            focused: true,\n        });\n\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    };\n\n    private onBlur = () => {\n        const value = this.state.value;\n\n        const color = tinycolor(value);\n        const normalizedColor = '#' + color.toHex();\n\n        if (color.isValid()) {\n            this.props.onChange(normalizedColor);\n\n            this.setState({\n                value: normalizedColor,\n            });\n        } else {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n\n        this.setState({\n            focused: false,\n        });\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    public render() {\n        const {id} = this.props;\n        const {isOpened, value} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={value}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    maxLength={7}\n                    disabled={this.props.isDisabled}\n                    data-testid='color-inputColorValue'\n\n                />\n                {!this.props.isDisabled &&\n                    <span\n                        id={`${id}-squareColorIcon`}\n                        className='input-group-addon color-pad'\n                        onClick={this.togglePicker}\n                    >\n                        <i\n                            id={`${id}-squareColorIconValue`}\n                            className='color-icon'\n                            style={{\n                                backgroundColor: value,\n                            }}\n                        />\n                    </span>\n                }\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={value}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport const TYPE_MODAL = 'modal';\nexport const TYPE_BACKSTAGE = 'backstage';\n\n// accepts either a single error or an array of errors\ntype Props = {\n    type?: React.ReactNode;\n    error?: React.ReactNode;\n    textClassName?: string;\n    iconClassName?: string;\n    margin?: boolean;\n    errors?: React.ReactNode[];\n};\n\nconst EMPTY_ERROR_LIST: React.ReactNode[] = [];\n\nconst FormError: React.FC<Props> = ({\n    error = null,\n    errors = EMPTY_ERROR_LIST,\n    iconClassName,\n    margin,\n    textClassName,\n    type,\n}) => {\n    if (!error && errors.length === 0) {\n        return null;\n    }\n\n    // look for the first truthy error to display\n    let message = error;\n\n    if (!message) {\n        for (const err of errors) {\n            if (err) {\n                message = err;\n            }\n        }\n    }\n\n    if (!message) {\n        return null;\n    }\n\n    if (type === TYPE_MODAL) {\n        return (\n            <div className='form-group'>\n                <label className='col-sm-12 has-error'>{message}</label>\n            </div>\n        );\n    }\n\n    if (type === TYPE_BACKSTAGE) {\n        return (\n            <div className='pull-left has-error'>\n                <label className='control-label'>{message}</label>\n            </div>\n        );\n    }\n\n    if (margin) {\n        return (\n            <div className='form-group has-error'>\n                <label className='control-label'>{message}</label>\n            </div>\n        );\n    }\n\n    return (\n        <div className={`col-sm-12 ${textClassName || 'has-error'}`}>\n            <label className='control-label'>\n                <i\n                    className={`fa ${iconClassName || 'fa-exclamation-circle'}`}\n                />{' '}\n                {message}\n            </label>\n        </div>\n    );\n};\n\nexport default React.memo(FormError);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl, type MessageDescriptor} from 'react-intl';\n\ntype Props = {\n    placeholder: MessageDescriptor;\n} & Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'placeholder'>;\n\nconst LocalizedPlaceholderTextarea = React.forwardRef<HTMLTextAreaElement, Props>(({placeholder, ...otherProps}, ref) => {\n    const intl = useIntl();\n\n    return (\n        <textarea\n            ref={ref}\n            placeholder={intl.formatMessage(placeholder)}\n            {...otherProps}\n        />\n    );\n});\n\nLocalizedPlaceholderTextarea.displayName = 'LocalizedPlaceholderTextarea';\n\nexport default LocalizedPlaceholderTextarea;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React, {useRef} from 'react';\n\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport useDidUpdate from './common/hooks/useDidUpdate';\n\ntype Props = {\n\n    /**\n     * Whether this setting item is currently open\n     */\n    active: boolean;\n\n    /**\n     * Whether all sections in the panel are currently closed\n     */\n    areAllSectionsInactive: boolean;\n\n    /**\n     * The identifier of this section\n     */\n    section: string;\n\n    /**\n     * The setting UI when it is maximized (open)\n     */\n    max?: ReactNode;\n\n    // Props to pass through for SettingItemMin\n    updateSection: (section: string) => void;\n    title?: ReactNode;\n    isDisabled?: boolean;\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nconst SettingItem = ({\n    active,\n    areAllSectionsInactive,\n    section,\n    max,\n    updateSection,\n    title,\n    isDisabled,\n    describe,\n    collapsedEditButtonWhenDisabled,\n}: Props) => {\n    const minRef = useRef<SettingItemMinComponent>(null);\n\n    useDidUpdate(() => {\n        // We want to bring back focus to the edit button when the section is opened and then closed along with all sections are closed\n\n        if (!active && areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    }, [active]);\n\n    if (active) {\n        return <>{max}</>;\n    }\n\n    return (\n        <SettingItemMin\n            ref={minRef}\n            title={title}\n            updateSection={updateSection}\n            describe={describe}\n            section={section}\n            isDisabled={isDisabled}\n            collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n        />\n    );\n};\n\nexport default React.memo(SettingItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SaveButton from 'components/save_button';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {a11yFocus} from 'utils/utils';\n\ntype Props = {\n\n    // Array of inputs selection\n    inputs?: ReactNode;\n    containerStyle?: string;\n    serverError?: ReactNode;\n\n    /**\n     * Settings extra information\n     */\n    extraInfo?: ReactNode;\n\n    /**\n     * Info position\n     */\n    infoPosition?: string;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n    updateSection?: (section: string) => void;\n    setting?: string;\n    submit?: ((setting?: string) => void) | null;\n    disableEnterSubmit?: boolean;\n    submitExtra?: ReactNode;\n    saving?: boolean;\n    title?: ReactNode;\n    extraContentBeforeSettingList?: ReactNode;\n    isFullWidth?: boolean;\n    cancelButtonText?: ReactNode;\n    shiftEnter?: boolean;\n    saveButtonText?: string;\n    saveButtonClassName?: string;\n    isValid?: boolean;\n}\nexport default class SettingItemMax extends React.PureComponent<Props> {\n    settingList: React.RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.settingList = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.settingList.current) {\n            const focusableElements: NodeListOf<HTMLElement> = this.settingList.current.querySelectorAll('.btn:not(.save-button):not(.btn-tertiary), input.form-control, input[type=\"radio\"][checked], input[type=\"checkbox\"], select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n            if (focusableElements.length > 0) {\n                a11yFocus(focusableElements[0]);\n            } else {\n                a11yFocus(this.settingList.current);\n            }\n        }\n\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        if (this.props.shiftEnter && isKeyPressed(e, Constants.KeyCodes.ENTER) && e.shiftKey) {\n            return;\n        }\n        if (this.props.disableEnterSubmit !== true &&\n            isKeyPressed(e, Constants.KeyCodes.ENTER) &&\n            this.props.submit &&\n            target.tagName !== 'SELECT' &&\n            target.parentElement &&\n            target.parentElement.className !== 'react-select__input' &&\n            !target.classList.contains('btn-tertiary') &&\n            this.settingList.current &&\n            this.settingList.current.contains(target)) {\n            this.handleSubmit(e);\n        }\n    };\n\n    handleSubmit = (e: React.MouseEvent | KeyboardEvent) => {\n        e.preventDefault();\n\n        if (this.props.setting && this.props.submit) {\n            this.props.submit(this.props.setting);\n        } else if (this.props.submit) {\n            this.props.submit();\n        }\n    };\n\n    handleUpdateSection = (e: React.MouseEvent) => {\n        if (this.props.updateSection) {\n            this.props.updateSection(this.props.section);\n        }\n        e.preventDefault();\n    };\n\n    render() {\n        let serverError = null;\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group'>\n                    <label\n                        className='col-sm-12 has-error'\n                    >\n                        <i\n                            className='icon icon-alert-circle-outline'\n                            role='presentation'\n                        />\n                        <span className='sr-only'>\n                            <FormattedMessage\n                                id='setting_item_max.error'\n                                defaultMessage='Error'\n                            />\n                        </span>\n                        <span id='serverError'>\n                            {this.props.serverError}\n                        </span>\n                    </label>\n                </div>\n            );\n        }\n\n        let extraInfo = null;\n        let hintClass = 'setting-list__hint';\n        if (this.props.infoPosition === 'top') {\n            hintClass = 'pb-3';\n        }\n\n        if (this.props.extraInfo) {\n            extraInfo = (\n                <div\n                    id='extraInfo'\n                    className={hintClass}\n                >\n                    {this.props.extraInfo}\n                </div>\n            );\n        }\n\n        let submit: JSX.Element | null = null;\n        if (this.props.submit) {\n            submit = (\n                <SaveButton\n                    defaultMessage={this.props.saveButtonText}\n                    saving={this.props.saving}\n                    disabled={this.props.saving || this.props.isValid === false}\n                    onClick={this.handleSubmit}\n                    btnClass={this.props.saveButtonClassName}\n                />\n            );\n        }\n\n        const inputs = this.props.inputs;\n\n        let title;\n        if (this.props.title) {\n            title = (\n                <h4\n                    id='settingTitle'\n                    className='col-sm-12 section-title'\n                >\n                    {this.props.title}\n                </h4>\n            );\n        }\n\n        let listContent = (\n            <div className='setting-list-item'>\n                {inputs}\n                {extraInfo}\n            </div>\n        );\n\n        if (this.props.infoPosition === 'top') {\n            listContent = (\n                <div>\n                    {extraInfo}\n                    {inputs}\n                </div>\n            );\n        }\n\n        let cancelButtonText;\n        if (this.props.cancelButtonText) {\n            cancelButtonText = this.props.cancelButtonText;\n        } else {\n            cancelButtonText = (\n                <FormattedMessage\n                    id='setting_item_max.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        return (\n            <section\n                className={`section-max form-horizontal ${this.props.containerStyle}`}\n                ref={this.settingList}\n            >\n                {title}\n                {this.props.extraContentBeforeSettingList}\n                <div\n                    className={classNames('sectionContent', {\n                        'col-sm-12': this.props.isFullWidth,\n                        'col-sm-10 col-sm-offset-2': !this.props.isFullWidth,\n                    })}\n                >\n                    <div\n                        tabIndex={-1}\n                        className='setting-list'\n                    >\n                        {listContent}\n                        <div className='setting-list-item'>\n                            <hr/>\n                            {this.props.submitExtra}\n                            <div\n                                role='alert'\n                            >\n                                {serverError}\n                            </div>\n                            {submit}\n                            <button\n                                id={'cancelSetting'}\n                                className='btn btn-tertiary'\n                                onClick={this.handleUpdateSection}\n                            >\n                                {cancelButtonText}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {type ReactNode, type MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\n\nimport {a11yFocus} from 'utils/utils';\n\ninterface Props {\n\n    /**\n     * Settings title\n     */\n    title: ReactNode;\n\n    /**\n     * Option to disable opening the setting\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n\n    /**\n     * Function to update section\n     */\n    updateSection: (section: string) => void;\n\n    /**\n     * Settings description\n     */\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nexport default class SettingItemMin extends React.PureComponent<Props> {\n    private edit: HTMLButtonElement | null = null;\n\n    focus() {\n        a11yFocus(this.edit);\n    }\n\n    private getEdit = (node: HTMLButtonElement) => {\n        this.edit = node;\n    };\n\n    handleClick = (e: MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n        if (this.props.isDisabled) {\n            return;\n        }\n\n        e.preventDefault();\n        this.props.updateSection(this.props.section);\n    };\n\n    render() {\n        let editButtonComponent: ReactNode;\n\n        if (this.props.isDisabled) {\n            if (this.props.collapsedEditButtonWhenDisabled) {\n                editButtonComponent = this.props.collapsedEditButtonWhenDisabled;\n            } else {\n                editButtonComponent = null;\n            }\n        } else {\n            editButtonComponent = (\n                <button\n                    ref={this.getEdit}\n                    id={this.props.section + 'Edit'}\n                    className='color--link style--none section-min__edit'\n                    onClick={this.handleClick}\n                    aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    aria-expanded={false}\n                >\n                    <EditIcon/>\n                    <FormattedMessage\n                        id='setting_item_min.edit'\n                        defaultMessage='Edit'\n                    />\n                </button>\n            );\n        }\n\n        return (\n            <div\n                className={classNames('section-min', {isDisabled: this.props.isDisabled})}\n                onClick={this.handleClick}\n            >\n                <div\n                    className='secion-min__header'\n                >\n                    <h4\n                        id={this.props.section + 'Title'}\n                        className={classNames('section-min__title', {isDisabled: this.props.isDisabled})}\n                    >\n                        {this.props.title}\n                    </h4>\n                    {editButtonComponent}\n                </div>\n                <div\n                    id={this.props.section + 'Desc'}\n                    className={classNames('section-min__describe', {isDisabled: this.props.isDisabled})}\n                >\n                    {this.props.describe}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\n\nimport './setting_desktop_header.scss';\n\ninterface Props {\n    id?: string;\n    text: ReactNode;\n    info?: ReactNode;\n}\n\nexport default function SettingDesktopHeader(props: Props) {\n    return (\n        <div className='userSettingDesktopHeader'>\n            <h3\n                id={props.id}\n                className='tab-header'\n            >\n                {props.text}\n            </h3>\n            {props.info && <div className='userSettingDesktopHeaderInfo'>{props.info}</div>}\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    text: ReactNode;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\nconst SettingMobileHeader = ({\n    text,\n    closeModal,\n    collapseModal,\n}: Props) => {\n    const intl = useIntl();\n\n    return (\n        <div className='modal-header'>\n            <button\n                id='closeButton'\n                type='button'\n                className='close'\n                data-dismiss='modal'\n                onClick={closeModal}\n            >\n                <span aria-hidden='true'>{'×'}</span>\n            </button>\n            <h4 className='modal-title'>\n                <div className='modal-back'>\n                    <i\n                        className='fa fa-angle-left'\n                        aria-label={\n                            intl.formatMessage({\n                                id: 'generic_icons.collapse',\n                                defaultMessage: 'Collapse Icon',\n                            })\n                        }\n                        onClick={collapseModal}\n                    />\n                </div>\n                {text}\n            </h4>\n        </div>\n    );\n};\n\nexport default SettingMobileHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport default function NotificationPermissionDeniedSectionNotice() {\n    const intl = useIntl();\n\n    const handleClick = useCallback(() => {\n        window.open('https://mattermost.com/pl/manage-notifications', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.title',\n                    defaultMessage: 'Browser notification permission was denied',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. To start receiving notifications, please enable notifications for Mattermost in your browser settings.',\n                })}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.button',\n                        defaultMessage: 'How to enable notifications',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nimport {requestNotificationPermission} from 'utils/notifications';\n\ntype Props = {\n    onCtaButtonClick: (permission: NotificationPermission) => void;\n}\n\nexport default function NotificationPermissionNeverGrantedSectionNotice(props: Props) {\n    const intl = useIntl();\n\n    const handleClick = useCallback(async () => {\n        const permission = await requestNotificationPermission();\n        if (permission) {\n            props.onCtaButtonClick(permission);\n        }\n    }, [props.onCtaButtonClick]);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.title',\n                    defaultMessage: 'Browser notifications are disabled',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. Mattermost notifications are disabled by this browser.',\n                })}\n                primaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionNeverGranted.button',\n                        defaultMessage: 'Enable notifications',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport default function NotificationPermissionUnsupportedSectionNotice() {\n    const intl = useIntl();\n\n    const handleClick = useCallback(async () => {\n        window.open('https://mattermost.com/pl/pc-web-requirements', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.title',\n                    defaultMessage: 'Browser notifications unsupported',\n                })}\n                text={intl.formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.message',\n                    defaultMessage: 'You\\'re missing important message and call notifications from Mattermost. To start receiving notifications, please update to a supported browser.',\n                })}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionUnsupported.button',\n                        defaultMessage: 'Update your browser',\n                    }),\n                    onClick: handleClick,\n                }}\n            />\n        </div>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nimport {NotificationPermissionDenied} from 'utils/notifications';\n\ninterface Props {\n    requestDesktopNotificationPermission: () => Promise<NotificationPermission>;\n}\n\nexport default function NotificationPermissionDesktopDeniedSectionNotice(props: Props) {\n    const intl = useIntl();\n\n    const [checkedPermissionDenied, setCheckedPermissionDenied] = useState(false);\n\n    async function handleCheckPermissionButtonClick() {\n        const permission = await props.requestDesktopNotificationPermission();\n        if (permission === NotificationPermissionDenied) {\n            setCheckedPermissionDenied(true);\n        }\n    }\n\n    const handleInstructionButtonClick = useCallback(() => {\n        window.open('https://mattermost.com/pl/manage-notifications', '_blank', 'noopener,noreferrer');\n    }, []);\n\n    const title = checkedPermissionDenied ? intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.titleDenied',\n        defaultMessage: 'Desktop notifications permission was denied',\n    }) : intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.title',\n        defaultMessage: 'Desktop notifications permission required',\n    });\n\n    const text = checkedPermissionDenied ? intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.messageDenied',\n        defaultMessage: 'Notifications for this Mattermost server are blocked. To receive notifications, please enable them manually.',\n    }) : intl.formatMessage({\n        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.message',\n        defaultMessage: \"You're missing important message and call notifications from Mattermost. To start receiving them, please enable them manually.\",\n    });\n\n    return (\n        <div className='extraContentBeforeSettingList'>\n            <SectionNotice\n                type='danger'\n                title={title}\n                text={text}\n                primaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDeniedDesktop.checkPermissionButton',\n                        defaultMessage: 'Check permission',\n                    }),\n                    onClick: handleCheckPermissionButtonClick,\n                    disabled: checkedPermissionDenied,\n                }}\n                tertiaryButton={{\n                    text: intl.formatMessage({\n                        id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionDenied.instructionButton',\n                        defaultMessage: 'How to enable notifications',\n                    }),\n                    onClick: handleInstructionButtonClick,\n                }}\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\n\nimport {useDesktopAppNotificationPermission} from 'components/common/hooks/use_desktop_notification_permission';\nimport NotificationPermissionDeniedNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_denied_section_notice';\nimport NotificationPermissionNeverGrantedNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_never_granted_section_notice';\nimport NotificationPermissionUnsupportedSectionNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice/notification_permission_unsupported_section_notice';\n\nimport {getNotificationPermission, isNotificationAPISupported, NotificationPermissionDenied, NotificationPermissionNeverGranted} from 'utils/notifications';\n\nimport NotificationPermissionDesktopDeniedSectionNotice from './notification_permission_desktop_denied_section_notice';\n\nexport default function NotificationPermissionSectionNotice() {\n    const isNotificationSupported = isNotificationAPISupported();\n\n    const [notificationPermission, setNotificationPermission] = useState(getNotificationPermission());\n\n    const [desktopNotificationPermission, requestDesktopNotificationPermission] = useDesktopAppNotificationPermission();\n\n    function handleRequestNotificationClicked(permission: NotificationPermission) {\n        setNotificationPermission(permission);\n    }\n\n    if (!isNotificationSupported) {\n        return <NotificationPermissionUnsupportedSectionNotice/>;\n    }\n\n    if (desktopNotificationPermission === NotificationPermissionDenied) {\n        return <NotificationPermissionDesktopDeniedSectionNotice requestDesktopNotificationPermission={requestDesktopNotificationPermission}/>;\n    }\n\n    if (isNotificationSupported && notificationPermission === NotificationPermissionNeverGranted) {\n        return <NotificationPermissionNeverGrantedNotice onCtaButtonClick={handleRequestNotificationClicked}/>;\n    }\n\n    if (isNotificationSupported && notificationPermission === NotificationPermissionDenied) {\n        return <NotificationPermissionDeniedNotice/>;\n    }\n\n    return null;\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {useDesktopAppNotificationPermission} from 'components/common/hooks/use_desktop_notification_permission';\nimport Tag from 'components/widgets/tag/tag';\n\nimport {\n    getNotificationPermission,\n    isNotificationAPISupported,\n    NotificationPermissionDenied,\n    NotificationPermissionNeverGranted,\n} from 'utils/notifications';\n\nexport default function NotificationPermissionTitleTag() {\n    const {formatMessage} = useIntl();\n\n    const [desktopNotificationPermission] = useDesktopAppNotificationPermission();\n\n    if (!isNotificationAPISupported()) {\n        return (\n            <Tag\n                size='sm'\n                variant='danger'\n                icon='alert-outline'\n                text={formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.noPermissionIssueTag',\n                    defaultMessage: 'Not supported',\n                })}\n            />\n        );\n    }\n\n    if (\n        getNotificationPermission() === NotificationPermissionNeverGranted ||\n        getNotificationPermission() === NotificationPermissionDenied ||\n        desktopNotificationPermission === NotificationPermissionDenied\n    ) {\n        return (\n            <Tag\n                size='sm'\n                variant='dangerDim'\n                icon='alert-outline'\n                text={formatMessage({\n                    id: 'user.settings.notifications.desktopAndMobile.notificationSection.permissionIssueTag',\n                    defaultMessage: 'Permission required',\n                })}\n            />\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Fragment, useCallback, useEffect, useMemo, useRef, memo} from 'react';\nimport type {ChangeEvent, ReactNode} from 'react';\nimport {FormattedMessage, useIntl, defineMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {OnChangeValue, Options} from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport NotificationPermissionSectionNotice from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_section_notice';\nimport NotificationPermissionTitleTag from 'components/user_settings/notifications/desktop_and_mobile_notification_setting/notification_permission_title_tag';\nimport {getOptionLabel, type SelectOption} from 'components/widgets/modals/components/react_select_item';\n\nimport Constants, {NotificationLevels, UserSettingsNotificationSections} from 'utils/constants';\nimport {formatAsComponent} from 'utils/i18n';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    desktopActivity: UserNotifyProps['desktop'];\n    sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction DesktopAndMobileNotificationSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    isCollapsedThreadsEnabled,\n    desktopActivity,\n    sendPushNotifications,\n    pushActivity,\n    pushStatus,\n    desktopThreads,\n    pushThreads,\n    desktopAndMobileSettingsDifferent,\n}: Props) {\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n    const intl = useIntl();\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForSendDesktopNotificationsRadio = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        setParentState('desktopActivity', value);\n    }, [setParentState]);\n\n    const handleChangeForDesktopThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('desktopThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForDifferentMobileNotificationsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked;\n        setParentState('desktopAndMobileSettingsDifferent', value);\n    }, [setParentState]);\n\n    const handleChangeForSendMobileNotificationsSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushActivity', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForMobileThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('pushThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForTriggerMobileNotificationsSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushStatus', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingsInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const sendDesktopNotificationsSection = (\n            <fieldset\n                id='sendDesktopNotificationsSection'\n                key='sendDesktopNotificationsSection'\n            >\n                <legend className='form-legend'>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.sendDesktopNotificationFor'\n                        defaultMessage='Send notifications for:'\n                    />\n                </legend>\n                {optionsOfSendNotifications.map((optionOfSendNotifications) => (\n                    <div\n                        key={optionOfSendNotifications.value}\n                        className='radio'\n                    >\n                        <label>\n                            <input\n                                type='radio'\n                                checked={desktopActivity === optionOfSendNotifications.value}\n                                value={optionOfSendNotifications.value}\n                                onChange={handleChangeForSendDesktopNotificationsRadio}\n                            />\n                            {formatAsComponent(optionOfSendNotifications.label)}\n                        </label>\n                    </div>\n                ))}\n            </fieldset>\n        );\n        maximizedSettingInputs.push(sendDesktopNotificationsSection);\n\n        if (shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled, desktopActivity)) {\n            const desktopThreadNotificationSection = (\n                <Fragment key='desktopThreadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForDesktopThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForDesktopthreads'\n                                defaultMessage={'Notify me about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(desktopThreadNotificationSection);\n        }\n\n        if (sendPushNotifications) {\n            const differentMobileNotificationsSection = (\n                <Fragment key='differentMobileNotificationsSection'>\n                    <hr/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopAndMobileSettingsDifferent}\n                                onChange={handleChangeForDifferentMobileNotificationsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.differentMobileNotificationsTitle'\n                                defaultMessage='Use different settings for my mobile devices'\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(differentMobileNotificationsSection);\n        }\n\n        if (shouldShowSendMobileNotificationsSection(sendPushNotifications, desktopAndMobileSettingsDifferent)) {\n            const sendMobileNotificationsSection = (\n                <React.Fragment key='sendMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='sendMobileNotificationsLabel'\n                        htmlFor='sendMobileNotificationsSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.sendMobileNotificationsFor'\n                            defaultMessage='Send mobile notifications for:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='sendMobileNotificationsSelectInput'\n                        aria-labelledby='sendMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendNotifications}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationForSelect(pushActivity)}\n                        onChange={handleChangeForSendMobileNotificationsSelect}\n                        getOptionLabel={(option) => getOptionLabel(option, intl)}\n\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(sendMobileNotificationsSection);\n        }\n\n        if (shouldShowMobileThreadsSection(sendPushNotifications, isCollapsedThreadsEnabled, desktopAndMobileSettingsDifferent, pushActivity)) {\n            const threadNotificationSection = (\n                <Fragment key='threadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={pushThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForMobileThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForMobilethreads'\n                                defaultMessage={'Notify me on mobile about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(threadNotificationSection);\n        }\n\n        if (shouldShowTriggerMobileNotificationsSection(sendPushNotifications, desktopActivity, pushActivity, desktopAndMobileSettingsDifferent)) {\n            const triggerMobileNotificationsSection = (\n                <React.Fragment key='triggerMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='pushMobileNotificationsLabel'\n                        htmlFor='pushMobileNotificationSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.pushNotification'\n                            defaultMessage='Trigger mobile notifications when I am:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='pushMobileNotificationSelectInput'\n                        aria-labelledby='pushMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendMobileNotificationsWhenSelect}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationWhenSelect(pushStatus)}\n                        onChange={handleChangeForTriggerMobileNotificationsSelect}\n                        getOptionLabel={(option) => getOptionLabel(option, intl)}\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(triggerMobileNotificationsSection);\n        }\n\n        if (!sendPushNotifications) {\n            const disabledPushNotificationsSection = (\n                <>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.pushNotificationsDisabled'\n                        defaultMessage={'Mobile push notifications haven\\'t been enabled by your system administrator.'}\n                    />\n                </>\n            );\n            maximizedSettingInputs.push(disabledPushNotificationsSection);\n        }\n\n        return maximizedSettingInputs;\n    },\n    [\n        desktopActivity,\n        handleChangeForSendDesktopNotificationsRadio,\n        isCollapsedThreadsEnabled,\n        desktopThreads,\n        handleChangeForDesktopThreadsCheckbox,\n        sendPushNotifications,\n        desktopAndMobileSettingsDifferent,\n        handleChangeForDifferentMobileNotificationsCheckbox,\n        pushActivity,\n        handleChangeForSendMobileNotificationsSelect,\n        pushThreads,\n        handleChangeForMobileThreadsCheckbox,\n        pushStatus,\n        handleChangeForTriggerMobileNotificationsSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        updateSection(section);\n        onCancel();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id={'user.settings.notifications.desktopAndMobile.title'}\n                        defaultMessage='Desktop and mobile notifications'\n                    />\n                }\n                inputs={maximizedSettingsInputs}\n                submit={onSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n                extraContentBeforeSettingList={<NotificationPermissionSectionNotice/>}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.title'\n                        defaultMessage='Desktop and mobile notifications'\n                    />\n                    <NotificationPermissionTitleTag/>\n                </>\n            }\n            describe={getCollapsedText(desktopActivity, pushActivity)}\n            section={UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nconst optionsOfSendNotifications = [\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.allNewMessages',\n            defaultMessage: 'All new messages',\n        }),\n        value: NotificationLevels.ALL,\n    },\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.onlyMentions',\n            defaultMessage: 'Mentions, direct messages, and group messages',\n        }),\n        value: NotificationLevels.MENTION,\n    },\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.nothing',\n            defaultMessage: 'Nothing',\n        }),\n        value: NotificationLevels.NONE,\n    },\n];\n\nexport function shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled: boolean, desktopActivity: UserNotifyProps['desktop']) {\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (desktopActivity === NotificationLevels.ALL || desktopActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function shouldShowMobileThreadsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], isCollapsedThreadsEnabled: boolean, desktopAndMobileSettingsDifferent: boolean, pushActivity: UserNotifyProps['push']) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        return false;\n    }\n\n    if (pushActivity === NotificationLevels.ALL || pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction shouldShowSendMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopAndMobileSettingsDifferent: boolean) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (desktopAndMobileSettingsDifferent) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getValueOfSendMobileNotificationForSelect(pushActivity: UserNotifyProps['push']): OnChangeValue<SelectOption, boolean> {\n    if (!pushActivity) {\n        return optionsOfSendNotifications[1];\n    }\n\n    const option = optionsOfSendNotifications.find((option) => option.value === pushActivity);\n    if (!option) {\n        return optionsOfSendNotifications[1];\n    }\n\n    return option;\n}\n\nexport function shouldShowTriggerMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push'], desktopAndMobileSettingsDifferent: boolean): boolean {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!desktopActivity || !pushActivity) {\n        return true;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        if (desktopActivity === NotificationLevels.NONE) {\n            return false;\n        }\n        return true;\n    }\n\n    if (pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nconst optionsOfSendMobileNotificationsWhenSelect: Options<SelectOption> = [\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.online',\n            defaultMessage: 'Online, away, or offline',\n        }),\n        value: Constants.UserStatuses.ONLINE,\n    },\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.away',\n            defaultMessage: 'Away or offline',\n        }),\n        value: Constants.UserStatuses.AWAY,\n    },\n    {\n        label: defineMessage({\n            id: 'user.settings.notifications.desktopAndMobile.offline',\n            defaultMessage: 'Offline',\n        }),\n        value: Constants.UserStatuses.OFFLINE,\n    },\n];\n\nexport function getValueOfSendMobileNotificationWhenSelect(pushStatus?: UserNotifyProps['push_status']): OnChangeValue<SelectOption, boolean> {\n    if (!pushStatus) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    const option = optionsOfSendMobileNotificationsWhenSelect.find((option) => option.value === pushStatus);\n    if (!option) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    return option;\n}\n\nfunction getCollapsedText(desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push']): ReactNode {\n    if (desktopActivity === NotificationLevels.ALL) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allForDesktopAndMobile'\n                    defaultMessage='All new messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileMentions'\n                    defaultMessage='All new messages on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileNone'\n                    defaultMessage='All new messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.MENTION) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsDesktopButMobileAll'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopAndMobile'\n                    defaultMessage='Mentions, direct messages, and group messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopButMobileNone'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.NONE) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileAll'\n                    defaultMessage='Never on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileMentions'\n                    defaultMessage='Never on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneForDesktopAndMobile'\n                    defaultMessage='Never'\n                />\n            );\n        }\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopAndMobile.noValidSettings'\n            defaultMessage='Configure desktop and mobile settings'\n        />\n    );\n}\n\nexport default memo(DesktopAndMobileNotificationSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent} from 'react';\nimport React, {memo, useEffect, useRef, Fragment, useMemo, useCallback} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport type {OnChangeValue} from 'react-select';\nimport ReactSelect from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport {getOptionLabel, type SelectOption} from 'components/widgets/modals/components/react_select_item';\n\nimport {UserSettingsNotificationSections} from 'utils/constants';\nimport {\n    notificationSoundKeys,\n    stopTryNotificationRing,\n    tryNotificationSound,\n    tryNotificationRing,\n    getValueOfNotificationSoundsSelect,\n    getValueOfIncomingCallSoundsSelect,\n    optionsOfMessageNotificationSoundsSelect,\n    optionsOfIncomingCallSoundsSelect,\n    callNotificationSoundKeys,\n} from 'utils/notification_sounds';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    desktopSound: UserNotifyProps['desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n};\n\nfunction DesktopNotificationSoundsSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    desktopSound,\n    desktopNotificationSound,\n    isCallsRingingEnabled,\n    callsDesktopSound,\n    callsNotificationSound,\n}: Props) {\n    const intl = useIntl();\n\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForMessageNotificationSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('desktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomginCallSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('callsDesktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForMessageNotificationSoundSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('desktopNotificationSound', selectedOption.value);\n            tryNotificationSound(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomingCallSoundSelect = useCallback((selectedOption: OnChangeValue<SelectOption, boolean>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('callsNotificationSound', selectedOption.value);\n            tryNotificationRing(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const isMessageNotificationSoundChecked = desktopSound === 'true';\n        const messageSoundSection = (\n            <Fragment key='messageSoundSection'>\n                <div className='checkbox inlineCheckboxSelect'>\n                    <label>\n                        <input\n                            type='checkbox'\n                            checked={desktopSound === 'true'}\n                            onChange={handleChangeForMessageNotificationSoundCheckbox}\n                        />\n                        <span id='messageNotificationSoundLabel'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopNotificationSound.messageNotificationSound'\n                                defaultMessage='Message notification sound'\n                            />\n                        </span>\n                    </label>\n                    <ReactSelect\n                        id='messageNotificationSoundSelect'\n                        inputId='messageNotificationSoundSelectInput'\n                        className='react-select inlineSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfMessageNotificationSoundsSelect}\n                        isClearable={false}\n                        isSearchable={false}\n                        isDisabled={!isMessageNotificationSoundChecked}\n                        placeholder={intl.formatMessage({\n                            id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                            defaultMessage: 'Select a sound',\n                        })}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfNotificationSoundsSelect(desktopNotificationSound)}\n                        onChange={handleChangeForMessageNotificationSoundSelect}\n                        aria-labelledby='messageNotificationSoundLabel'\n                        getOptionLabel={(option) => getOptionLabel(option, intl)}\n\n                    />\n                </div>\n            </Fragment>\n        );\n        maximizedSettingInputs.push(messageSoundSection);\n\n        if (isCallsRingingEnabled) {\n            const isIncomingCallSoundChecked = callsDesktopSound === 'true';\n            const callSoundSection = (\n                <Fragment key='callSoundSection'>\n                    <br/>\n                    <div className='checkbox inlineCheckboxSelect'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={isIncomingCallSoundChecked}\n                                onChange={handleChangeForIncomginCallSoundCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopNotificationSound.incomingCallSound'\n                                defaultMessage='Incoming call sound'\n                            />\n                        </label>\n                        <ReactSelect\n                            id='incomingCallSoundNotificationSelect'\n                            inputId='incomingCallSoundNotificationSelectInput'\n                            className='react-select inlineSelect'\n                            classNamePrefix='react-select'\n                            options={optionsOfIncomingCallSoundsSelect}\n                            isClearable={false}\n                            isSearchable={false}\n                            isDisabled={!isIncomingCallSoundChecked}\n                            components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                            placeholder={intl.formatMessage({\n                                id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                                defaultMessage: 'Select a sound',\n                            })}\n                            value={getValueOfIncomingCallSoundsSelect(callsNotificationSound)}\n                            onChange={handleChangeForIncomingCallSoundSelect}\n                            getOptionLabel={(option) => getOptionLabel(option, intl)}\n\n                        />\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(callSoundSection);\n        }\n        return maximizedSettingInputs;\n    },\n    [\n        desktopSound,\n        handleChangeForMessageNotificationSoundCheckbox,\n        handleChangeForMessageNotificationSoundSelect,\n        desktopNotificationSound,\n        isCallsRingingEnabled,\n        callsDesktopSound,\n        handleChangeForIncomginCallSoundCheckbox,\n        callsNotificationSound,\n        handleChangeForIncomingCallSoundSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n        onCancel();\n    }\n\n    function handleSubmit() {\n        stopTryNotificationRing();\n        onSubmit();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopNotificationSounds.title'\n                        defaultMessage='Desktop notification sounds'\n                    />\n                }\n                inputs={maximizedSettingInputs}\n                submit={handleSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSounds.title'\n                    defaultMessage='Desktop notification sounds'\n                />\n            }\n            describe={getCollapsedText(isCallsRingingEnabled, desktopSound, desktopNotificationSound, callsDesktopSound, callsNotificationSound)}\n            section={UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nfunction getCollapsedText(\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'],\n    desktopSound: UserNotifyProps['desktop_sound'],\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'],\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'],\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'],\n) {\n    const desktopNotificationSoundIsSelected = notificationSoundKeys.includes(desktopNotificationSound as string);\n    const callNotificationSoundIsSelected = callNotificationSoundKeys.includes(callsNotificationSound as string);\n\n    let hasCallsSound: boolean | null = null;\n    if (isCallsRingingEnabled && callNotificationSoundIsSelected) {\n        if (callsDesktopSound === 'true') {\n            hasCallsSound = true;\n        } else {\n            hasCallsSound = false;\n        }\n    }\n\n    let hasDesktopSound: boolean | null = null;\n    if (desktopNotificationSoundIsSelected) {\n        if (desktopSound === 'true') {\n            hasDesktopSound = true;\n        } else {\n            hasDesktopSound = false;\n        }\n    }\n\n    if (hasDesktopSound !== null && hasCallsSound !== null) {\n        if (hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, \"{callsSound}\" for calls'\n                    values={{\n                        desktopSound: desktopNotificationSound,\n                        callsSound: callsNotificationSound,\n                    }}\n                />\n            );\n        } else if (!hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.noDesktopAndhasCallsSound'\n                    defaultMessage='No sound for messages, \"{callsSound}\" for calls'\n                    values={{callsSound: callsNotificationSound}}\n                />\n            );\n        } else if (hasDesktopSound && !hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndNoCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, no sound for calls'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopAndNoCallsSound'\n                defaultMessage='No sound'\n            />\n        );\n    } else if (hasDesktopSound !== null && hasCallsSound === null) {\n        if (hasDesktopSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopSound'\n                    defaultMessage='\"{desktopSound}\" for messages'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopSound'\n                defaultMessage='No sound'\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopNotificationSound.noValidSound'\n            defaultMessage='Configure desktop notification sounds'\n        />\n    );\n}\n\nexport default memo(DesktopNotificationSoundsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving?: boolean;\n    error?: string;\n    setParentState: (key: string, value: any) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    enableEmail: boolean;\n    onChange: (enableEmail: UserNotifyProps['email']) => void;\n    threads: string;\n    currentUserId: string;\n    emailInterval: number;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    active: boolean;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    editButtonRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = props;\n\n        this.state = {\n            active,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n\n        this.editButtonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (active && !prevState.active) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            active !== prevState.active\n        ) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.editButtonRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        a11yFocus(e.currentTarget);\n\n        this.props.onChange(enableEmail as UserNotifyProps['email']);\n    };\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    };\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    };\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    };\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                if (this.props.enableEmailBatching) {\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.asSoonAsYouAreAwayForFiveMinutes'\n                            defaultMessage='As soon as you’re away for 5 minutes'\n                        />\n                    );\n                } else {\n                    description = (\n                        <FormattedMessage\n                            id='user.settings.notifications.email.on'\n                            defaultMessage='On'\n                        />\n                    );\n                }\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = this.props.enableEmailBatching ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.off'\n                        defaultMessage='Off'\n                    />\n                );\n            }\n        } else {\n            description = this.props.enableEmailBatching ? (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            ) : (\n                <FormattedMessage\n                    id='user.settings.notifications.email.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                ref={this.editButtonRef}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.notifications.emailNotifications'\n                            defaultMessage='Email notifications'\n                        />\n                    }\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    serverError={this.props.error}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let emailOptions = null;\n        let emailInfo = null;\n        let emailTitle = null;\n        if (this.props.enableEmailBatching) {\n            emailOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationImmediately'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.asSoonAsYouAreAwayForFiveMinutes'\n                                defaultMessage='As soon as you’re away for 5 minutes'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationNever'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_NEVER}\n                                data-enable-email={'false'}\n                                data-email-interval={Preferences.INTERVAL_NEVER}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            emailInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes. If you choose to receive notifications every 15 minutes or every hour, notifications during that period will be combined into a single email.'\n                />\n            );\n\n            emailTitle = ( // Renders only in case emails are batched\n                <legend className='form-legend'>\n                    <FormattedMessage\n                        id='user.settings.notifications.email.send'\n                        defaultMessage='Send email notifications'\n                    />\n                </legend>\n            );\n        } else {\n            emailOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationImmediately'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.on'\n                                defaultMessage='On'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationNever'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_NEVER}\n                                data-enable-email={'false'}\n                                data-email-interval={Preferences.INTERVAL_NEVER}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            emailInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailInfo'\n                    defaultMessage='When enabled, email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <div className='checkbox single-checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.notifyForthreads'\n                                    defaultMessage={'Notify me about replies to threads I’m following'}\n                                />\n                            </label>\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        {emailTitle}\n                        {emailOptions}\n                        <div className='mt-3'>\n                            {emailInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                serverError={this.props.error}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.renderMaxSettingView();\n        }\n\n        return this.renderMinSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport {defineMessage, FormattedMessage} from 'react-intl';\n\nimport LocalizedPlaceholderTextarea from 'components/localized_placeholder_textarea';\nimport SettingItemMax from 'components/setting_item_max';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\ntype Props = {\n    autoResponderActive: boolean;\n    autoResponderMessage: string;\n    updateSection: (section: string) => void;\n    setParentState: (key: string, value: string | boolean) => void;\n    submit: () => void;\n    saving: boolean;\n    error?: string;\n}\n\nexport default class ManageAutoResponder extends React.PureComponent<Props> {\n    handleAutoResponderChecked = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <LocalizedPlaceholderTextarea\n                        style={{resize: 'none', height: 'auto'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows={5}\n                        placeholder={defineMessage({id: 'user.settings.notifications.autoResponderPlaceholder', defaultMessage: 'Message'})}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {sendTestNotification} from 'actions/notification_actions';\n\nimport {useExternalLink} from 'components/common/hooks/use_external_link';\nimport SectionNotice from 'components/section_notice';\n\nconst sectionNoticeContainerStyle: React.CSSProperties = {marginTop: 20};\n\nconst TIME_TO_SENDING = 500;\nconst TIME_TO_SEND = 500;\nconst TIME_TO_IDLE = 3000;\n\ntype Props = {\n    adminMode?: boolean;\n};\n\ntype ButtonState = 'idle'|'sending'|'sent'|'error';\n\nconst SendTestNotificationNotice = ({\n    adminMode = false,\n}: Props) => {\n    const intl = useIntl();\n    const [buttonState, setButtonState] = useState<ButtonState>('idle');\n    const isSending = useRef(false);\n    const timeout = useRef<NodeJS.Timeout>();\n    const [externalLink] = useExternalLink('https://mattermost.com/pl/troubleshoot-notifications');\n\n    const onGoToNotificationDocumentation = useCallback(() => {\n        window.open(externalLink);\n    }, [externalLink]);\n\n    const onSendTestNotificationClick = useCallback(async () => {\n        if (isSending.current) {\n            return;\n        }\n        isSending.current = true;\n        let isShowingSending = false;\n        timeout.current = setTimeout(() => {\n            isShowingSending = true;\n            setButtonState('sending');\n        }, TIME_TO_SENDING);\n        const result = await sendTestNotification();\n        clearTimeout(timeout.current);\n        const setResult = () => {\n            if (result.status === 'OK') {\n                setButtonState('sent');\n            } else {\n                // We want to log this error into the console mainly\n                // for debugging reasons. We still use the 'error' level\n                // because it is an unexpected error.\n                // eslint-disable-next-line no-console\n                console.error(result);\n                setButtonState('error');\n            }\n            timeout.current = setTimeout(() => {\n                isSending.current = false;\n                setButtonState('idle');\n            }, TIME_TO_IDLE);\n        };\n\n        if (isShowingSending) {\n            timeout.current = setTimeout(setResult, TIME_TO_SEND);\n        } else {\n            setResult();\n        }\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(timeout.current);\n        };\n    }, []);\n\n    const primaryButton = useMemo(() => {\n        let text;\n        let icon;\n        let loading;\n        switch (buttonState) {\n        case 'idle':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.send', defaultMessage: 'Send a test notification'});\n            break;\n        case 'sending':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.sending', defaultMessage: 'Sending a test notification'});\n            loading = true;\n            break;\n        case 'sent':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.sent', defaultMessage: 'Test notification sent'});\n            icon = 'icon-check';\n            break;\n        case 'error':\n            text = intl.formatMessage({id: 'user_settings.notifications.test_notification.send_button.error', defaultMessage: 'Error sending test notification'});\n            icon = 'icon-alert-outline';\n        }\n        return {\n            onClick: onSendTestNotificationClick,\n            text,\n            leadingIcon: icon,\n            loading,\n        };\n    }, [buttonState, intl, onSendTestNotificationClick]);\n\n    const secondaryButton = useMemo(() => {\n        return {\n            onClick: onGoToNotificationDocumentation,\n            text: intl.formatMessage({id: 'user_settings.notifications.test_notification.go_to_docs', defaultMessage: 'Troubleshooting docs'}),\n            trailingIcon: 'icon-open-in-new',\n        };\n    }, [intl, onGoToNotificationDocumentation]);\n\n    if (adminMode) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className='divider-light'/>\n            <div style={sectionNoticeContainerStyle}>\n                <SectionNotice\n                    text={intl.formatMessage({\n                        id: 'user_settings.notifications.test_notification.body',\n                        defaultMessage: 'Not receiving notifications? Start by sending a test notification to all your devices to check if they’re working as expected. If issues persist, explore ways to solve them with troubleshooting steps.',\n                    })}\n                    title={intl.formatMessage({id: 'user_settings.notifications.test_notification.title', defaultMessage: 'Troubleshooting notifications'})}\n                    primaryButton={primaryButton}\n                    tertiaryButton={secondaryButton}\n                    type='hint'\n                />\n            </div>\n        </>\n    );\n};\n\nexport default SendTestNotificationNotice;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport type {WrappedComponentProps} from 'react-intl';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {InputProps, OnChangeValue, StylesConfig} from 'react-select';\nimport {components} from 'react-select';\nimport CreatableReactSelect from 'react-select/creatable';\n\nimport {LightbulbOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps, UserProfile} from '@mattermost/types/users';\n\nimport {TrackPassiveKeywordsFeature, TrackPassiveKeywordsEvent} from 'mattermost-redux/constants/telemetry';\n\nimport {trackFeatureEvent} from 'actions/telemetry_actions.jsx';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport RestrictedIndicator from 'components/widgets/menu/menu_items/restricted_indicator';\n\nimport Constants, {NotificationLevels, MattermostFeatures, LicenseSkus, UserSettingsNotificationSections} from 'utils/constants';\nimport {notificationSoundKeys, stopTryNotificationRing} from 'utils/notification_sounds';\nimport {a11yFocus} from 'utils/utils';\n\nimport DesktopAndMobileNotificationSettings from './desktop_and_mobile_notification_setting';\nimport DesktopNotificationSoundsSettings from './desktop_notification_sounds_setting';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder/manage_auto_responder';\nimport SendTestNotificationNotice from './send_test_notification_notice';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\nconst WHITE_SPACE_REGEX = /\\s+/g;\nconst COMMA_REGEX = /,/g;\n\ntype MultiInputValue = {\n    label: string;\n    value: string;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\nexport type Props = PropsFromRedux & OwnProps & WrappedComponentProps;\n\ntype State = {\n    enableEmail: UserNotifyProps['email'];\n    desktopActivity: UserNotifyProps['desktop'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    emailThreads: UserNotifyProps['email_threads'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopSound: UserNotifyProps['desktop_sound'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n    usernameKey: boolean;\n    isCustomKeysWithNotificationInputChecked: boolean;\n    customKeysWithNotification: MultiInputValue[];\n    customKeysWithNotificationInputValue: string;\n    customKeysWithHighlight: MultiInputValue[];\n    customKeysWithHighlightInputValue: string;\n    firstNameKey: boolean;\n    channelKey: boolean;\n    autoResponderActive: boolean;\n    autoResponderMessage: UserNotifyProps['auto_responder_message'];\n    notifyCommentsLevel: UserNotifyProps['comments'];\n    isSaving: boolean;\n    serverError: string;\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction getDefaultStateFromProps(props: Props): State {\n    let desktop: UserNotifyProps['desktop'] = NotificationLevels.MENTION;\n    let desktopThreads: UserNotifyProps['desktop_threads'] = NotificationLevels.ALL;\n    let pushThreads: UserNotifyProps['push_threads'] = NotificationLevels.ALL;\n    let emailThreads: UserNotifyProps['email_threads'] = NotificationLevels.ALL;\n    let sound: UserNotifyProps['desktop_sound'] = 'true';\n    let callsSound: UserNotifyProps['calls_desktop_sound'] = 'true';\n    let desktopNotificationSound: UserNotifyProps['desktop_notification_sound'] = notificationSoundKeys[0] as UserNotifyProps['desktop_notification_sound'];\n    let callsNotificationSound: UserNotifyProps['calls_notification_sound'] = 'Calm';\n    let comments: UserNotifyProps['comments'] = 'never';\n    let enableEmail: UserNotifyProps['email'] = 'true';\n    let pushActivity: UserNotifyProps['push'] = NotificationLevels.MENTION;\n    let pushStatus: UserNotifyProps['push_status'] = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage: UserNotifyProps['auto_responder_message'] = props.intl.formatMessage({\n        id: 'user.settings.notifications.autoResponderDefault',\n        defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n    });\n    let desktopAndMobileSettingsDifferent = true;\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props.desktop) {\n            desktop = props.user.notify_props.desktop;\n        }\n        if (props.user.notify_props.desktop_threads) {\n            desktopThreads = props.user.notify_props.desktop_threads;\n        }\n        if (props.user.notify_props.push_threads) {\n            pushThreads = props.user.notify_props.push_threads;\n        }\n        if (props.user.notify_props.email_threads) {\n            emailThreads = props.user.notify_props.email_threads;\n        }\n        if (props.user.notify_props.desktop_sound) {\n            sound = props.user.notify_props.desktop_sound;\n        }\n        if (props.user.notify_props.calls_desktop_sound) {\n            callsSound = props.user.notify_props.calls_desktop_sound;\n        }\n        if (props.user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = props.user.notify_props.desktop_notification_sound;\n        }\n        if (props.user.notify_props.calls_notification_sound) {\n            callsNotificationSound = props.user.notify_props.calls_notification_sound;\n        }\n        if (props.user.notify_props.comments) {\n            comments = props.user.notify_props.comments;\n        }\n        if (props.user.notify_props.email) {\n            enableEmail = props.user.notify_props.email;\n        }\n        if (props.user.notify_props.push) {\n            pushActivity = props.user.notify_props.push;\n        }\n        if (props.user.notify_props.push_status) {\n            pushStatus = props.user.notify_props.push_status;\n        }\n\n        if (props.user.notify_props.auto_responder_active) {\n            autoResponderActive = props.user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (props.user.notify_props.auto_responder_message) {\n            autoResponderMessage = props.user.notify_props.auto_responder_message;\n        }\n\n        if (props.user.notify_props.desktop && props.user.notify_props.push) {\n            desktopAndMobileSettingsDifferent = areDesktopAndMobileSettingsDifferent(props.user.notify_props.desktop, props.user.notify_props.push, props.user.notify_props?.desktop_threads, props.user.notify_props?.push_threads, props.isCollapsedThreadsEnabled);\n        }\n    }\n\n    let usernameKey = false;\n    let firstNameKey = false;\n    let channelKey = false;\n    let isCustomKeysWithNotificationInputChecked = false;\n    const customKeysWithNotification: MultiInputValue[] = [];\n    const customKeysWithHighlight: MultiInputValue[] = [];\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props?.mention_keys?.length > 0) {\n            const mentionKeys = props.user.notify_props.mention_keys.split(',').filter((key) => key.length > 0);\n            mentionKeys.forEach((mentionKey) => {\n                // Remove username(s) from list of keys\n                if (mentionKey !== props.user.username && mentionKey !== `@${props.user.username}`) {\n                    customKeysWithNotification.push({\n                        label: mentionKey,\n                        value: mentionKey,\n                    });\n                }\n            });\n\n            // Check if username is in list of keys, if so, set the checkbox to true\n            usernameKey = mentionKeys.includes(props.user.username);\n\n            // Check if there are any keys in the list, if so, set the checkbox of custom keys to true\n            isCustomKeysWithNotificationInputChecked = customKeysWithNotification.length > 0;\n        }\n\n        if (props.user.notify_props?.highlight_keys?.length > 0) {\n            const highlightKeys = props.user.notify_props.highlight_keys.split(',').filter((key) => key.length > 0);\n            highlightKeys.forEach((highlightKey) => {\n                customKeysWithHighlight.push({\n                    label: highlightKey,\n                    value: highlightKey,\n                });\n            });\n        }\n\n        firstNameKey = props.user.notify_props?.first_name === 'true';\n        channelKey = props.user.notify_props?.channel === 'true';\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        callsDesktopSound: callsSound,\n        desktopNotificationSound,\n        callsNotificationSound,\n        usernameKey,\n        customKeysWithNotification,\n        isCustomKeysWithNotificationInputChecked,\n        customKeysWithNotificationInputValue: '',\n        customKeysWithHighlight,\n        customKeysWithHighlightInputValue: '',\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n        serverError: '',\n        desktopAndMobileSettingsDifferent,\n    };\n}\n\nexport const CreatableReactSelectInput = (props: InputProps<MultiInputValue, true>) => {\n    const ariaProps = {\n        'aria-labelledby': 'settingTitle',\n    };\n\n    return (\n        <components.Input\n            {...props}\n            {...ariaProps}\n        />);\n};\n\nclass NotificationsTab extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        activeSection: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = getDefaultStateFromProps(props);\n    }\n\n    handleSubmit = async () => {\n        const data: UserNotifyProps = {...this.props.user.notify_props};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.calls_desktop_sound = this.state.callsDesktopSound;\n        data.desktop_notification_sound = this.state.desktopNotificationSound;\n        data.calls_notification_sound = this.state.callsNotificationSound;\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive ? 'true' : 'false';\n        data.auto_responder_message = this.state.autoResponderMessage;\n        data.first_name = this.state.firstNameKey ? 'true' : 'false';\n        data.channel = this.state.channelKey ? 'true' : 'false';\n\n        if (this.state.desktopAndMobileSettingsDifferent) {\n            data.push = this.state.pushActivity;\n            data.push_threads = this.state.pushThreads;\n        } else {\n            data.push = this.state.desktopActivity;\n            data.push_threads = this.state.desktopThreads;\n        }\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = this.props.intl.formatMessage({\n                id: 'user.settings.notifications.autoResponderDefault',\n                defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n            });\n        }\n\n        const mentionKeys: string[] = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n        if (this.state.isCustomKeysWithNotificationInputChecked && this.state.customKeysWithNotification.length > 0) {\n            this.state.customKeysWithNotification.forEach((key) => {\n                mentionKeys.push(key.value);\n            });\n        }\n        data.mention_keys = mentionKeys.join(',');\n\n        const highlightKeys: string[] = [];\n        if (this.state.customKeysWithHighlight.length > 0) {\n            this.state.customKeysWithHighlight.forEach((key) => {\n                highlightKeys.push(key.value);\n            });\n        }\n        data.highlight_keys = highlightKeys.join(',');\n        if (this.props.user.notify_props?.highlight_keys !== data.highlight_keys && data.highlight_keys.length > 0) {\n            trackFeatureEvent(TrackPassiveKeywordsFeature, TrackPassiveKeywordsEvent);\n        }\n\n        this.setState({isSaving: true});\n        stopTryNotificationRing();\n\n        let updatedUser: UserProfile | undefined;\n        let error;\n\n        if (this.props.adminMode) {\n            const payloadUser = {...this.props.user, notify_props: data};\n            const response = await this.props.patchUser(payloadUser);\n            updatedUser = response.data;\n            error = response.error;\n        } else {\n            const response = await this.props.updateMe({notify_props: data});\n            updatedUser = response.data;\n            error = response.error;\n        }\n\n        if (updatedUser) {\n            this.handleUpdateSection('');\n            this.setState(getDefaultStateFromProps(this.props));\n        } else if (error) {\n            this.setState({serverError: error.message, isSaving: false});\n        } else {\n            this.setState({serverError: '', isSaving: false});\n        }\n    };\n\n    handleCancel = (): void => {\n        this.setState(getDefaultStateFromProps(this.props));\n        stopTryNotificationRing();\n    };\n\n    handleUpdateSection = (section: string): void => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key: string, value: string | boolean): void => {\n        const data: {[key: string]: string | boolean } = {};\n        data[key] = value;\n        this.setState((prevState) => ({...prevState, ...data}));\n    };\n\n    handleNotifyCommentsRadio = (notifyCommentsLevel: UserNotifyProps['comments'], e?: React.ChangeEvent): void => {\n        this.setState({notifyCommentsLevel});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleEmailRadio = (enableEmail: UserNotifyProps['email']): void => {\n        this.setState({enableEmail});\n    };\n\n    handleChangeForUsernameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({usernameKey: checked});\n    };\n\n    handleChangeForFirstNameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({firstNameKey: checked});\n    };\n\n    handleChangeForChannelKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({channelKey: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({isCustomKeysWithNotificationInputChecked: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationInput = (values: OnChangeValue<{ value: string }, true>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            // Check the custom keys input checkbox when atleast a single key is entered\n            if (this.state.isCustomKeysWithNotificationInputChecked === false) {\n                this.setState({\n                    isCustomKeysWithNotificationInputChecked: true,\n                });\n            }\n\n            const customKeysWithNotification = values.\n                map((value: MultiInputValue) => {\n                    // Remove all spaces from the value\n                    const formattedValue = value.value.trim().replace(WHITE_SPACE_REGEX, '');\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithNotification});\n        } else {\n            this.setState({\n                isCustomKeysWithNotificationInputChecked: false,\n                customKeysWithNotification: [],\n            });\n        }\n    };\n\n    updateCustomKeysWithNotificationWithInputValue = (newValue: string) => {\n        const customKeysWithNotification = [\n            ...this.state.customKeysWithNotification,\n            {\n                value: newValue,\n                label: newValue,\n            },\n        ];\n\n        this.setState({\n            customKeysWithNotification,\n            customKeysWithNotificationInputValue: '', // Clear the input field\n        });\n\n        if (!this.state.isCustomKeysWithNotificationInputChecked) {\n            this.setState({isCustomKeysWithNotificationInputChecked: true});\n        }\n    };\n\n    handleOnKeydownForCustomKeysWithNotificationInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n            if (unsavedCustomKeyWithNotification.length > 0) {\n                this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n            }\n        }\n    };\n\n    handleChangeForCustomKeysWithNotificationInputValue = (value: string) => {\n        // Check if input contains comma, if so, add the value to the list of custom keys\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            const formattedValue = value.trim().replace(WHITE_SPACE_REGEX, '');\n            this.setState({customKeysWithNotificationInputValue: formattedValue});\n        }\n    };\n\n    handleBlurForCustomKeysWithNotificationInput = () => {\n        const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n        if (unsavedCustomKeyWithNotification.length > 0) {\n            this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n        }\n    };\n\n    handleChangeForCustomKeysWithHighlightInput = (values: OnChangeValue<{ value: string }, true>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            const customKeysWithHighlight = values.\n                map((value: MultiInputValue) => {\n                    const formattedValue = value.value.trim();\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithHighlight});\n        } else {\n            this.setState({\n                customKeysWithHighlight: [],\n            });\n        }\n    };\n\n    handleChangeForCustomKeysWithHighlightInputValue = (value: string) => {\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            this.setState({customKeysWithHighlightInputValue: value});\n        }\n    };\n\n    updateCustomKeysWithHighlightWithInputValue = (newValue: State['customKeysWithHighlightInputValue']) => {\n        const unsavedCustomKeyWithHighlight = newValue?.trim()?.replace(COMMA_REGEX, '') ?? '';\n\n        if (unsavedCustomKeyWithHighlight.length > 0) {\n            const customKeysWithHighlight = [\n                ...this.state.customKeysWithHighlight,\n                {\n                    value: unsavedCustomKeyWithHighlight,\n                    label: unsavedCustomKeyWithHighlight,\n                },\n            ];\n\n            this.setState({\n                customKeysWithHighlight,\n                customKeysWithHighlightInputValue: '',\n            });\n        }\n    };\n\n    handleBlurForCustomKeysWithHighlightInput = () => {\n        this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n    };\n\n    handleOnKeydownForCustomKeysWithHighlightInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n        }\n    };\n\n    handleCloseSettingsModal = () => {\n        this.props.closeModal();\n    };\n\n    createKeywordsWithNotificationSection = () => {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_MENTIONS;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [];\n\n            if (user.first_name) {\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={this.handleChangeForFirstNameKeyCheckbox}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case-sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={this.handleChangeForUsernameKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={this.handleChangeForChannelKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div\n                    key='userNotificationCustomOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                type='checkbox'\n                                checked={this.state.isCustomKeysWithNotificationInputChecked}\n                                onChange={this.handleChangeForCustomKeysWithNotificationCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveCustomWords'\n                                defaultMessage='Other non case-sensitive words, press Tab or use commas to separate keywords:'\n                            />\n                        </label>\n                    </div>\n                    <CreatableReactSelect\n                        inputId='notificationTriggerCustomText'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                            Input: CreatableReactSelectInput,\n                        }}\n                        onChange={this.handleChangeForCustomKeysWithNotificationInput}\n                        value={this.state.customKeysWithNotification}\n                        inputValue={this.state.customKeysWithNotificationInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithNotificationInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithNotificationInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithNotificationInput}\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithNotification.extraInfo'\n                    defaultMessage='Notifications are triggered when someone sends a message that includes your username (\"@{username}\") or any of the options selected above.'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                    inputs={\n                        <fieldset>\n                            <legend className='hidden-label'>\n                                {this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                            </legend>\n                            <div>\n                                {inputs}\n                            </div>\n                        </fieldset>\n                    }\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const selectedMentionKeys = ['@' + user.username];\n        if (this.state.firstNameKey) {\n            selectedMentionKeys.push(user.first_name);\n        }\n        if (this.state.usernameKey) {\n            selectedMentionKeys.push(user.username);\n        }\n        if (this.state.channelKey) {\n            selectedMentionKeys.push('@channel');\n            selectedMentionKeys.push('@all');\n            selectedMentionKeys.push('@here');\n        }\n        if (this.state.customKeysWithNotification.length > 0) {\n            const customKeysWithNotificationStringArray = this.state.customKeysWithNotification.map((key) => key.value);\n            selectedMentionKeys.push(...customKeysWithNotificationStringArray);\n        }\n        const collapsedDescription = selectedMentionKeys.filter((key) => key.trim().length !== 0).map((key) => `\"${key}\"`).join(', ');\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                section={UserSettingsNotificationSections.KEYWORDS_MENTIONS}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n            />);\n    };\n\n    createKeywordsWithHighlightSection = () => {\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [(\n                <div\n                    key='userNotificationHighlightOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <label htmlFor='mentionKeysWithHighlightInput'>\n                        <FormattedMessage\n                            id='user.settings.notifications.keywordsWithHighlight.inputTitle'\n                            defaultMessage='Enter non case-sensitive keywords, press Tab or use commas to separate them:'\n                        />\n                    </label>\n                    <CreatableReactSelect\n                        inputId='mentionKeysWithHighlightInput'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                        }}\n                        aria-labelledby='mentionKeysWithHighlightInput'\n                        onChange={this.handleChangeForCustomKeysWithHighlightInput}\n                        value={this.state.customKeysWithHighlight}\n                        inputValue={this.state.customKeysWithHighlightInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithHighlightInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithHighlightInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithHighlightInput}\n                    />\n                </div>\n            )];\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithHighlight.extraInfo'\n                    defaultMessage='These keywords will be shown to you with a highlight when anyone sends a message that includes them.'\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let collapsedDescription = this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.none', defaultMessage: 'None'});\n        if (!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady && this.state.customKeysWithHighlight.length > 0) {\n            const customKeysWithHighlightStringArray = this.state.customKeysWithHighlight.map((key) => key.value);\n            collapsedDescription = customKeysWithHighlightStringArray.map((key) => `\"${key}\"`).join(', ');\n        }\n\n        const collapsedEditButtonWhenDisabled = (\n            <RestrictedIndicator\n                blocked={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                feature={MattermostFeatures.HIGHLIGHT_WITHOUT_NOTIFICATION}\n                minimumPlanRequiredForFeature={LicenseSkus.Professional}\n                tooltipTitle={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipTitle',\n                    defaultMessage: 'Professional feature',\n                })}\n                tooltipMessageBlocked={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipMessage',\n                    defaultMessage:\n                    'This feature is available on the Professional plan',\n                })}\n                titleAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPreTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPreTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                })}\n                titleAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPostTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPostTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                },\n                )}\n                titleEndUser={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleEndUser',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageEndUser={this.props.intl.formatMessage(\n                    {\n                        id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageEndUser',\n                        defaultMessage: 'Get the ability to passively highlight keywords that you care about.{br}{br}Request your admin to upgrade to Mattermost Professional to access this feature.',\n                    },\n                    {\n                        br: <br/>,\n                    },\n                )}\n                ctaExtraContent={\n                    <FormattedMessage\n                        id='user.settings.notifications.keywordsWithHighlight.professional'\n                        defaultMessage='Professional'\n                    />\n                }\n                clickCallback={this.handleCloseSettingsModal}\n            />\n        );\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                section={UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n                isDisabled={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n            />);\n    };\n\n    createCommentsSection = () => {\n        const serverError = this.state.serverError;\n\n        let max = null;\n        if (this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS) {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage\n                            id='user.settings.notifications.comments'\n                            defaultMessage='Reply notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element;\n        if (this.state.notifyCommentsLevel === 'never') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsNever'\n                    defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                />\n            );\n        } else if (this.state.notifyCommentsLevel === 'root') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsRoot'\n                    defaultMessage='Trigger notifications on messages in threads that I start'\n                />\n            );\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsAny'\n                    defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                active={this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                describe={describe}\n                section={UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n                areAllSectionsInactive={this.props.activeSection === ''}\n            />\n        );\n    };\n\n    createAutoResponderSection = () => {\n        const describe = this.state.autoResponderActive ? (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderEnabled'\n                defaultMessage='Enabled'\n            />\n        ) : (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderDisabled'\n                defaultMessage='Disabled'\n            />\n        );\n\n        return (\n            <SettingItem\n                active={this.props.activeSection === UserSettingsNotificationSections.AUTO_RESPONDER}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                describe={describe}\n                section={UserSettingsNotificationSections.AUTO_RESPONDER}\n                updateSection={this.handleUpdateSection}\n                max={(\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage || ''}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                )}\n            />\n        );\n    };\n\n    render() {\n        const keywordsWithNotificationSection = this.createKeywordsWithNotificationSection();\n        const keywordsWithHighlightSection = this.createKeywordsWithHighlightSection();\n        const commentsSection = this.createCommentsSection();\n        const autoResponderSection = this.createAutoResponderSection();\n\n        const areAllSectionsInactive = this.props.activeSection === '';\n\n        return (\n            <div\n                id='notificationsSettings'\n                aria-labelledby='notificationsButton'\n                role='tabpanel'\n            >\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification settings'\n                        />\n                    }\n                />\n                <div\n                    className='user-settings'\n                >\n                    <SettingDesktopHeader\n                        id='notificationSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.notifications.header'\n                                defaultMessage='Notifications'\n                            />\n                        }\n                        info={\n                            <FormattedMessage\n                                id='user.settings.notifications.learnMore'\n                                defaultMessage='<a>Learn more about notifications</a>'\n                                values={{\n                                    a: (chunks: string) => ((\n                                        <ExternalLink\n                                            location='user_settings_notifications'\n                                            href='https://mattermost.com/pl/about-notifications'\n                                            className='btn btn-link'\n                                        >\n                                            <LightbulbOutlineIcon className='circular-border'/>\n                                            <span>{chunks}</span>\n                                        </ExternalLink>\n                                    )),\n                                }}\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    <DesktopAndMobileNotificationSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        desktopActivity={this.state.desktopActivity}\n                        pushActivity={this.state.pushActivity}\n                        sendPushNotifications={this.props.sendPushNotifications}\n                        pushStatus={this.state.pushStatus}\n                        desktopThreads={this.state.desktopThreads}\n                        pushThreads={this.state.pushThreads}\n                        desktopAndMobileSettingsDifferent={this.state.desktopAndMobileSettingsDifferent}\n                    />\n                    <div className='divider-light'/>\n                    <DesktopNotificationSoundsSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        desktopSound={this.state.desktopSound}\n                        desktopNotificationSound={this.state.desktopNotificationSound}\n                        isCallsRingingEnabled={this.props.isCallsRingingEnabled}\n                        callsDesktopSound={this.state.callsDesktopSound}\n                        callsNotificationSound={this.state.callsNotificationSound}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        active={this.props.activeSection === UserSettingsNotificationSections.EMAIL}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onChange={this.handleEmailRadio}\n                        threads={this.state.emailThreads || ''}\n                    />\n                    <div className='divider-light'/>\n                    {keywordsWithNotificationSection}\n                    {(!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            <div className='divider-light'/>\n                            {commentsSection}\n                        </>\n                    )}\n                    {this.props.enableAutoResponder && (\n                        <>\n                            <div className='divider-light'/>\n                            {autoResponderSection}\n                        </>\n                    )}\n\n                    {/*  We placed the disabled items in the last */}\n                    {(this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <SendTestNotificationNotice adminMode={this.props.adminMode}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst customKeywordsSelectorStyles = {\n    container: ((baseStyle) => ({\n        ...baseStyle,\n        marginBlockStart: '10px',\n    })),\n    control: ((baseStyles) => ({\n        ...baseStyles,\n        backgroundColor: 'var(--center-channel-bg)',\n        border: '1px solid rgba(var(--center-channel-color-rgb), 0.16);',\n        ':hover': {\n            borderColor: 'rgba(var(--center-channel-color-rgb), 0.48);',\n        },\n    })),\n    multiValue: ((baseStyles) => ({\n        ...baseStyles,\n        background: 'rgba(var(--center-channel-color-rgb), 0.08)',\n    })),\n    multiValueLabel: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color);',\n    })),\n    input: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color)',\n    })),\n    indicatorSeparator: ((indicatorSeperatorStyles) => ({\n        ...indicatorSeperatorStyles,\n        display: 'none',\n    })),\n    multiValueRemove: ((multiValueRemoveStyles) => ({\n        ...multiValueRemoveStyles,\n        cursor: 'pointer',\n        color: 'rgba(var(--center-channel-color-rgb),0.32);',\n        ':hover': {\n            backgroundColor: 'rgba(var(--center-channel-color-rgb), 0.16)',\n            color: 'rgba(var(--center-channel-color-rgb), 0.56);',\n        },\n    })),\n} satisfies StylesConfig<MultiInputValue, true>;\n\nconst validNotificationLevels = Object.values(NotificationLevels);\n\n/**\n * Check's if user's global notification settings for desktop and mobile are different\n */\nexport function areDesktopAndMobileSettingsDifferent(\n    desktopActivity: UserNotifyProps['desktop'],\n    pushActivity?: UserNotifyProps['push'],\n    desktopThreads?: UserNotifyProps['desktop_threads'],\n    pushThreads?: UserNotifyProps['push_threads'],\n    isCollapsedThreadsEnabled?: boolean,\n): boolean {\n    if (!desktopActivity || !pushActivity || !desktopThreads || !pushThreads) {\n        return true;\n    }\n\n    if (\n        !validNotificationLevels.includes(desktopActivity) ||\n        !validNotificationLevels.includes(pushActivity) ||\n        !validNotificationLevels.includes(desktopThreads) ||\n        !validNotificationLevels.includes(pushThreads)\n    ) {\n        return true;\n    }\n\n    if (desktopActivity === pushActivity) {\n        if (isCollapsedThreadsEnabled) {\n            if (desktopThreads === pushThreads) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    return true;\n}\n\nexport default injectIntl(NotificationsTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function EditIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='icon-pencil-outline'\n            aria-hidden='true'\n            title={formatMessage({id: 'generic_icons.edit', defaultMessage: 'Edit Icon'})}\n        />\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    additionalClassName?: string;\n}\n\nconst WarningIcon = ({additionalClassName}: Props) => {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className={classNames('fa fa-warning', additionalClassName)}\n            title={formatMessage({id: 'generic_icons.warning', defaultMessage: 'Warning Icon'})}\n        />\n    );\n};\n\nexport default React.memo(WarningIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {PrimitiveType, FormatXMLElementFn} from 'intl-messageformat';\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useIntl} from 'react-intl';\n\nimport {AlertCircleOutlineIcon} from '@mattermost/compass-icons/components';\n\nimport './base_setting_item.scss';\n\ntype ExtendedMessageDescriptor = MessageDescriptor & {\n    values?: Record<string, PrimitiveType | FormatXMLElementFn<string, string>>;\n};\n\nexport type BaseSettingItemProps = {\n    title?: string;\n    description?: string;\n    error?: ExtendedMessageDescriptor;\n    dataTestId?: string;\n};\n\ntype Props = BaseSettingItemProps & {\n    content: JSX.Element;\n    isContentInline?: boolean;\n    className?: string;\n    descriptionAboveContent?: boolean;\n}\n\nfunction BaseSettingItem({title, description, content, className, error, descriptionAboveContent = false, isContentInline = false, dataTestId}: Props): JSX.Element {\n    const {formatMessage} = useIntl();\n\n    const titleComponent = title && (\n        <h4\n            data-testid='mm-modal-generic-section-item__title'\n            className='mm-modal-generic-section-item__title'\n        >\n            {title}\n        </h4>\n    );\n\n    const descriptionComponent = description && (\n        <p\n            data-testid='mm-modal-generic-section-item__description'\n            className='mm-modal-generic-section-item__description'\n        >\n            {description}\n        </p>\n    );\n\n    const Error = error && (\n        <div\n            data-testid='mm-modal-generic-section-item__error'\n            className='mm-modal-generic-section-item__error'\n        >\n            <AlertCircleOutlineIcon/>\n            {formatMessage({id: error.id, defaultMessage: error.defaultMessage}, error.values)}\n        </div>\n    );\n\n    return (\n        <div\n            data-testid={dataTestId}\n            className={classNames('mm-modal-generic-section-item', className)}\n        >\n            {titleComponent}\n            {descriptionAboveContent ? descriptionComponent : undefined}\n            <div\n                data-testid='mm-modal-generic-section-item__content'\n                className={classNames('mm-modal-generic-section-item__content', {\n                    inline: isContentInline,\n                })}\n            >\n                {content}\n            </div>\n            {descriptionAboveContent ? undefined : descriptionComponent}\n            {Error}\n        </div>\n    );\n}\n\nexport default BaseSettingItem;\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport type {MessageDescriptor} from 'react-intl';\nimport type {OnChangeValue} from 'react-select';\nimport ReactSelect from 'react-select';\n\nimport {formatAsString} from 'utils/i18n';\n\nimport type {BaseSettingItemProps} from './base_setting_item';\nimport BaseSettingItem from './base_setting_item';\n\nexport type SelectOption = {\n    value: string;\n    label: string | MessageDescriptor;\n};\n\nexport type FieldsetReactSelect = {\n    id: string;\n    name?: string;\n    inputId?: string;\n    dataTestId?: string;\n    ariaLabelledby?: string;\n    clearable?: boolean;\n    options: SelectOption[];\n}\n\ntype Props = BaseSettingItemProps & {\n    inputFieldData: FieldsetReactSelect;\n    inputFieldValue: SelectOption;\n    handleChange: (selected: OnChangeValue<SelectOption, boolean>) => void;\n}\n\n// Function to extract text from MessageDescriptor or return string as-is\nexport const getOptionLabel = (option: SelectOption, intl: ReturnType<typeof useIntl>): string => {\n    return formatAsString(intl.formatMessage, option.label) || '';\n};\n\nfunction ReactSelectItemCreator({\n    title,\n    description,\n    inputFieldData,\n    inputFieldValue,\n    handleChange,\n}: Props): JSX.Element {\n    const intl = useIntl();\n    const content = (\n        <fieldset className='mm-modal-generic-section-item__fieldset-react-select'>\n            <ReactSelect\n                id={inputFieldData.id}\n                name={inputFieldData.name}\n                inputId={inputFieldData.inputId}\n                aria-labelledby={inputFieldData.ariaLabelledby}\n                className='react-select singleSelect react-select-top'\n                classNamePrefix='react-select'\n                options={inputFieldData.options}\n                isClearable={inputFieldData.clearable}\n                isSearchable={false}\n                onChange={handleChange}\n                value={inputFieldValue}\n                components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                getOptionLabel={(option) => getOptionLabel(option, intl)}\n\n            />\n        </fieldset>\n    );\n\n    return (\n        <BaseSettingItem\n            content={content}\n            title={title}\n            description={description}\n        />\n    );\n}\n\nexport default ReactSelectItemCreator;\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Constants from 'utils/constants';\n\nexport function isValidPassword(password: string, passwordConfig: PasswordConfig, intl?: IntlShape) {\n    let errorId = passwordErrors.passwordError.id;\n    const telemetryErrorIds = [];\n    let valid = true;\n    const minimumLength = passwordConfig.minimumLength || Constants.MIN_PASSWORD_LENGTH;\n\n    if (password.length < minimumLength || password.length > Constants.MAX_PASSWORD_LENGTH) {\n        valid = false;\n        telemetryErrorIds.push({field: 'password', rule: 'error_length'});\n    }\n\n    if (passwordConfig.requireLowercase) {\n        if (!password.match(/[a-z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Lowercase';\n        telemetryErrorIds.push({field: 'password', rule: 'lowercase'});\n    }\n\n    if (passwordConfig.requireUppercase) {\n        if (!password.match(/[A-Z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Uppercase';\n        telemetryErrorIds.push({field: 'password', rule: 'uppercase'});\n    }\n\n    if (passwordConfig.requireNumber) {\n        if (!password.match(/[0-9]/)) {\n            valid = false;\n        }\n\n        errorId += 'Number';\n        telemetryErrorIds.push({field: 'password', rule: 'number'});\n    }\n\n    if (passwordConfig.requireSymbol) {\n        if (!password.match(/[ !\"\\\\#$%&'()*+,-./:;<=>?@[\\]^_`|~]/)) {\n            valid = false;\n        }\n\n        errorId += 'Symbol';\n        telemetryErrorIds.push({field: 'password', rule: 'symbol'});\n    }\n\n    let error;\n    if (!valid) {\n        error = intl ? (\n            intl.formatMessage(\n                {\n                    id: errorId,\n                    defaultMessage: 'Must be {min}-{max} characters long.',\n                },\n                {\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                },\n            )\n        ) : (\n            <FormattedMessage\n                id={errorId}\n                defaultMessage='Must be {min}-{max} characters long.'\n                values={{\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    return {valid, error, telemetryErrorIds};\n}\n\nexport const passwordErrors = defineMessages({\n    passwordError: {id: 'user.settings.security.passwordError', defaultMessage: 'Your password must be {min}-{max} characters long.'},\n    passwordErrorLowercase: {id: 'user.settings.security.passwordErrorLowercase', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters.'},\n    passwordErrorLowercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and numbers.'},\n    passwordErrorLowercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include lowercase letters and special characters.'},\n    passwordErrorLowercaseUppercase: {id: 'user.settings.security.passwordErrorLowercaseUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters.'},\n    passwordErrorLowercaseUppercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and numbers.'},\n    passwordErrorLowercaseUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseUppercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include both lowercase and uppercase letters, and special characters.'},\n    passwordErrorNumber: {id: 'user.settings.security.passwordErrorNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers.'},\n    passwordErrorNumberSymbol: {id: 'user.settings.security.passwordErrorNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include numbers and special characters.'},\n    passwordErrorSymbol: {id: 'user.settings.security.passwordErrorSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include special characters.'},\n    passwordErrorUppercase: {id: 'user.settings.security.passwordErrorUppercase', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters.'},\n    passwordErrorUppercaseNumber: {id: 'user.settings.security.passwordErrorUppercaseNumber', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and numbers.'},\n    passwordErrorUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorUppercaseNumberSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, numbers, and special characters.'},\n    passwordErrorUppercaseSymbol: {id: 'user.settings.security.passwordErrorUppercaseSymbol', defaultMessage: 'Your password must be {min}-{max} characters long and include uppercase letters, and special characters.'},\n});\n"],"names":["defineMessages","sessionRevoked","id","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditRow","_ref","actionURL","audit","desc","aDesc","showUserId","showIp","showSession","intl","useIntl","extra_info","indexOf","formatMessage","holders","actionDesc","lastIndexOf","substring","replace","toTitleCase","extraInfoDesc","date","Date","create_at","timestamp","React","FormattedDate","value","day","month","year","FormattedTime","hour","minute","ip","ip_address","sessionId","session_id","auditProfile","useSelector","state","getUser","user_id","userId","email","uContent","iContent","sContent","className","descStyle","toLowerCase","key","propTypes","_pt","isRequired","ChannelCreateDirectRow","_channelObj$id","_useSelector","channelObj","channelId","username","getDirectTeammate","ChannelDefaultRow","channelInfo","channelName","channelURL","userIdField","split","profile","test","url","ChannelRow","_channelObj$display_n","props","channelNameField","getChannelByName","display_name","Object","assign","UserUpdateActiveSessionRow","updateField","userInfo","actingUserInfo","isSessionUser","actingUser","user","getCurrentUser","isSystemAdmin","roles","UserRow","userRoles","trim","updateType","FormatAudit","action","auditDesc","oauthInfo","clientIdField","oauthTokenFailure","token","webhookInfo","licenseInfo","AuditTable","componentDidMount","ids","this","audits","map","actions","getMissingProfilesByIds","render","userIdContent","ipContent","sessionContent","FormattedMessage","Boolean","injectIntl","connect","currentUser","dispatch","bindActionCreators","ColorInput","constructor","super","_defineProperty","e","colorPicker","current","contains","target","setState","isOpened","colorInput","focus","newColorData","focused","onChange","hex","event","color","tinycolor","normalizedColor","toHex","isValid","setSelectionRange","length","togglePicker","getDerivedStateFromProps","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","capture","removeEventListener","concat","ref","type","onBlur","onFocus","onKeyDown","maxLength","disabled","isDisabled","onClick","style","backgroundColor","ChromePicker","handleColorChange","disableAlpha","TYPE_BACKSTAGE","EMPTY_ERROR_LIST","FormError","error","errors","iconClassName","margin","textClassName","message","err","LocalizedPlaceholderTextarea","placeholder","otherProps","_objectWithoutProperties","_excluded","displayName","SettingItem","active","areAllSectionsInactive","section","max","updateSection","title","describe","collapsedEditButtonWhenDisabled","minRef","useRef","useDidUpdate","_minRef$current","SettingItemMin","SettingItemMax","shiftEnter","isKeyPressed","Constants","KeyCodes","ENTER","shiftKey","disableEnterSubmit","submit","tagName","parentElement","classList","settingList","handleSubmit","preventDefault","setting","focusableElements","querySelectorAll","a11yFocus","componentWillUnmount","serverError","role","extraInfo","hintClass","infoPosition","SaveButton","saveButtonText","saving","btnClass","saveButtonClassName","inputs","cancelButtonText","listContent","containerStyle","extraContentBeforeSettingList","classNames","isFullWidth","tabIndex","submitExtra","handleUpdateSection","arguments","node","edit","editButtonComponent","getEdit","handleClick","EditIcon","SettingDesktopHeader","text","info","SettingMobileHeader","closeModal","collapseModal","NotificationPermissionDeniedSectionNotice","useCallback","window","open","SectionNotice","tertiaryButton","NotificationPermissionNeverGrantedSectionNotice","async","permission","requestNotificationPermission","onCtaButtonClick","primaryButton","NotificationPermissionUnsupportedSectionNotice","NotificationPermissionDesktopDeniedSectionNotice","checkedPermissionDenied","setCheckedPermissionDenied","useState","handleInstructionButtonClick","requestDesktopNotificationPermission","NotificationPermissionDenied","NotificationPermissionSectionNotice","isNotificationSupported","isNotificationAPISupported","notificationPermission","setNotificationPermission","getNotificationPermission","desktopNotificationPermission","useDesktopAppNotificationPermission","NotificationPermissionNeverGranted","NotificationPermissionNeverGrantedNotice","NotificationPermissionDeniedNotice","NotificationPermissionTitleTag","Tag","size","variant","icon","DesktopAndMobileNotificationSettings","onSubmit","onCancel","setParentState","isCollapsedThreadsEnabled","desktopActivity","sendPushNotifications","pushActivity","pushStatus","desktopThreads","pushThreads","desktopAndMobileSettingsDifferent","editButtonRef","previousActiveRef","useEffect","_editButtonRef$curren","handleChangeForSendDesktopNotificationsRadio","handleChangeForDesktopThreadsCheckbox","checked","NotificationLevels","ALL","MENTION","handleChangeForDifferentMobileNotificationsCheckbox","handleChangeForSendMobileNotificationsSelect","selectedOption","handleChangeForMobileThreadsCheckbox","handleChangeForTriggerMobileNotificationsSelect","maximizedSettingsInputs","useMemo","maximizedSettingInputs","sendDesktopNotificationsSection","optionsOfSendNotifications","optionOfSendNotifications","formatAsComponent","label","push","NONE","shouldShowDesktopThreadsSection","desktopThreadNotificationSection","Fragment","differentMobileNotificationsSection","shouldShowSendMobileNotificationsSection","sendMobileNotificationsSection","htmlFor","ReactSelect","inputId","classNamePrefix","options","isClearable","isSearchable","components","IndicatorSeparator","NoIndicatorSeparatorComponent","getValueOfSendMobileNotificationForSelect","getOptionLabel","option","shouldShowMobileThreadsSection","threadNotificationSection","shouldShowTriggerMobileNotificationsSection","triggerMobileNotificationsSection","optionsOfSendMobileNotificationsWhenSelect","getValueOfSendMobileNotificationWhenSelect","disabledPushNotificationsSection","getCollapsedText","UserSettingsNotificationSections","DESKTOP_AND_MOBILE","defineMessage","find","ONLINE","AWAY","OFFLINE","memo","DesktopNotificationSoundsSettings","desktopSound","desktopNotificationSound","isCallsRingingEnabled","callsDesktopSound","callsNotificationSound","handleChangeForMessageNotificationSoundCheckbox","stopTryNotificationRing","handleChangeForIncomginCallSoundCheckbox","handleChangeForMessageNotificationSoundSelect","tryNotificationSound","handleChangeForIncomingCallSoundSelect","tryNotificationRing","isMessageNotificationSoundChecked","messageSoundSection","optionsOfMessageNotificationSoundsSelect","getValueOfNotificationSoundsSelect","isIncomingCallSoundChecked","callSoundSection","optionsOfIncomingCallSoundsSelect","getValueOfIncomingCallSoundsSelect","DESKTOP_NOTIFICATION_SOUND","desktopNotificationSoundIsSelected","notificationSoundKeys","includes","callNotificationSoundIsSelected","callNotificationSoundKeys","hasCallsSound","hasDesktopSound","values","callsSound","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","Preferences","validValuesWithoutEmailBatching","EmailNotificationSetting","enableEmail","currentTarget","getAttribute","newInterval","parseInt","emailInterval","currentUserId","category","CATEGORY_NOTIFICATIONS","name","EMAIL_INTERVAL","toString","savePreferences","sendEmailNotifications","description","count","emailOptions","emailInfo","emailTitle","handleChange","threadsNotificationSelection","threads","handleThreadsOnChange","nextProps","focusEditButton","_this$editButtonRef$c","renderMaxSettingView","renderMinSettingView","config","getConfig","getPreference","INTERVAL_NOT_SET","getCurrentUserId","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","height","rows","onMessageChanged","sectionNoticeContainerStyle","marginTop","SendTestNotificationNotice","adminMode","buttonState","setButtonState","isSending","timeout","externalLink","useExternalLink","onGoToNotificationDocumentation","onSendTestNotificationClick","isShowingSending","setTimeout","result","sendTestNotification","clearTimeout","setResult","status","console","loading","leadingIcon","secondaryButton","trailingIcon","WHITE_SPACE_REGEX","COMMA_REGEX","getDefaultStateFromProps","desktop","emailThreads","sound","comments","_props$user$notify_pr","_props$user$notify_pr2","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","calls_desktop_sound","desktop_notification_sound","calls_notification_sound","push_status","auto_responder_active","auto_responder_message","validNotificationLevels","areDesktopAndMobileSettingsDifferent","usernameKey","firstNameKey","channelKey","isCustomKeysWithNotificationInputChecked","customKeysWithNotification","customKeysWithHighlight","_props$user$notify_pr3","_props$user$notify_pr4","_props$user$notify_pr5","_props$user$notify_pr6","_props$user$notify_pr7","_props$user$notify_pr8","mention_keys","mentionKeys","filter","forEach","mentionKey","highlight_keys","highlightKey","first_name","channel","customKeysWithNotificationInputValue","customKeysWithHighlightInputValue","notifyCommentsLevel","isSaving","CreatableReactSelectInput","Input","NotificationsTab","_this$props$user$noti","data","_objectSpread","join","highlightKeys","updatedUser","trackFeatureEvent","TrackPassiveKeywordsFeature","TrackPassiveKeywordsEvent","payloadUser","response","patchUser","updateMe","handleCancel","Array","isArray","formattedValue","newValue","COMMA","TAB","_this$state$customKey","_this$state$customKey2","_this$state$customKey3","_this$state$customKey4","unsavedCustomKeyWithNotification","updateCustomKeysWithNotificationWithInputValue","_this$state$customKey5","_this$state$customKey6","_this$state$customKey7","_this$state$customKey8","_newValue$trim$replac","_newValue$trim","unsavedCustomKeyWithHighlight","updateCustomKeysWithHighlightWithInputValue","isSectionExpanded","activeSection","KEYWORDS_MENTIONS","expandedSection","handleChangeForFirstNameKeyCheckbox","handleChangeForUsernameKeyCheckbox","handleChangeForChannelKeyCheckbox","handleChangeForCustomKeysWithNotificationCheckbox","CreatableReactSelect","autoFocus","isMulti","styles","customKeywordsSelectorStyles","DropdownIndicator","Menu","MenuList","handleChangeForCustomKeysWithNotificationInput","inputValue","onInputChange","handleChangeForCustomKeysWithNotificationInputValue","handleBlurForCustomKeysWithNotificationInput","handleOnKeydownForCustomKeysWithNotificationInput","selectedMentionKeys","customKeysWithNotificationStringArray","collapsedDescription","KEYWORDS_HIGHLIGHT","handleChangeForCustomKeysWithHighlightInput","handleChangeForCustomKeysWithHighlightInputValue","handleBlurForCustomKeysWithHighlightInput","handleOnKeydownForCustomKeysWithHighlightInput","isEnterpriseOrCloudOrSKUStarterFree","isEnterpriseReady","RestrictedIndicator","blocked","feature","MattermostFeatures","HIGHLIGHT_WITHOUT_NOTIFICATION","minimumPlanRequiredForFeature","LicenseSkus","Professional","tooltipTitle","tooltipMessageBlocked","titleAdminPreTrial","messageAdminPreTrial","titleAdminPostTrial","messageAdminPostTrial","titleEndUser","messageEndUser","br","ctaExtraContent","clickCallback","handleCloseSettingsModal","REPLY_NOTIFCATIONS","commentsActive","handleNotifyCommentsRadio","bind","AUTO_RESPONDER","setStateValue","keywordsWithNotificationSection","createKeywordsWithNotificationSection","keywordsWithHighlightSection","createKeywordsWithHighlightSection","commentsSection","createCommentsSection","autoResponderSection","createAutoResponderSection","a","chunks","ExternalLink","location","href","LightbulbOutlineIcon","EMAIL","handleEmailRadio","enableAutoResponder","container","baseStyle","marginBlockStart","control","baseStyles","border","borderColor","multiValue","background","multiValueLabel","input","indicatorSeparator","indicatorSeperatorStyles","display","multiValueRemove","multiValueRemoveStyles","cursor","WarningIcon","additionalClassName","BaseSettingItem","content","descriptionAboveContent","isContentInline","dataTestId","titleComponent","descriptionComponent","Error","AlertCircleOutlineIcon","undefined","inline","formatAsString","ariaLabelledby","clearable","isValidPassword","password","passwordConfig","errorId","passwordErrors","passwordError","telemetryErrorIds","valid","minimumLength","MIN_PASSWORD_LENGTH","MAX_PASSWORD_LENGTH","field","rule","requireLowercase","match","requireUppercase","requireNumber","requireSymbol","min","passwordErrorLowercase","passwordErrorLowercaseNumber","passwordErrorLowercaseNumberSymbol","passwordErrorLowercaseSymbol","passwordErrorLowercaseUppercase","passwordErrorLowercaseUppercaseNumber","passwordErrorLowercaseUppercaseNumberSymbol","passwordErrorLowercaseUppercaseSymbol","passwordErrorNumber","passwordErrorNumberSymbol","passwordErrorSymbol","passwordErrorUppercase","passwordErrorUppercaseNumber","passwordErrorUppercaseNumberSymbol","passwordErrorUppercaseSymbol"],"sourceRoot":""}