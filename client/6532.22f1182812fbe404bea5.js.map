{"version":3,"file":"6532.22f1182812fbe404bea5.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/user_details/user_details.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/user_details/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/types.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/list_item.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/list/list.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/more_direct_channels.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport CustomStatusEmoji from 'components/custom_status/custom_status_emoji';\nimport ProfilePicture from 'components/profile_picture';\nimport BotTag from 'components/widgets/tag/bot_tag';\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\nimport {displayEntireNameForUser} from 'utils/utils';\n\ntype Props = {\n    currentUserId: string;\n    option: UserProfile;\n    status: string;\n};\n\nexport default function UserDetails(props: Props): JSX.Element {\n    const {currentUserId, option, status} = props;\n    const {\n        id,\n        delete_at: deleteAt,\n        is_bot: isBot = false,\n        last_picture_update: lastPictureUpdate,\n    } = option;\n\n    const displayName = displayEntireNameForUser(option);\n\n    let modalName: React.ReactNode = displayName;\n    if (option.id === currentUserId) {\n        modalName = (\n            <FormattedMessage\n                id='more_direct_channels.directchannel.you'\n                defaultMessage='{displayname} (you)'\n                values={{\n                    displayname: displayName,\n                }}\n            />\n        );\n    } else if (option.delete_at) {\n        modalName = (\n            <FormattedMessage\n                id='more_direct_channels.directchannel.deactivated'\n                defaultMessage='{displayname} - Deactivated'\n                values={{\n                    displayname: displayName,\n                }}\n            />\n        );\n    }\n\n    return (\n        <>\n            <ProfilePicture\n                src={Client4.getProfilePictureUrl(id, lastPictureUpdate)}\n                status={!deleteAt && !isBot ? status : undefined}\n                size='md'\n            />\n            <div className='more-modal__details'>\n                <div className='more-modal__name'>\n                    {modalName}\n                    {isBot && <BotTag/>}\n                    {isGuest(option.roles) && <GuestTag/>}\n                    <CustomStatusEmoji\n                        userID={option.id}\n                        showTooltip={true}\n                        emojiSize={15}\n                        spanStyle={{\n                            display: 'flex',\n                            flex: '0 0 auto',\n                            alignItems: 'center',\n                        }}\n                    />\n                </div>\n                {!isBot && (\n                    <div className='more-modal__description'>\n                        {option.email}\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getCurrentUserId, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserDetails from './user_details';\n\ntype OwnProps = {\n    option: UserProfile;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        status: getStatusForUserId(state, ownProps.option.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {Value} from 'components/multiselect/multiselect';\n\n// Not to be confused with the GroupChannel type used for LDAP groups\nexport type GroupChannel = Channel & {\n    profiles: UserProfile[];\n}\n\nexport function isGroupChannel(option: UserProfile | GroupChannel): option is GroupChannel {\n    return (option as GroupChannel)?.type === 'G';\n}\n\nexport type Option = (UserProfile & {last_post_at?: number}) | GroupChannel;\n\nexport type OptionValue = Option & Value;\n\nexport function optionValue(option: Option): OptionValue {\n    return {\n        value: option.id,\n        label: isGroupChannel(option) ? option.display_name : option.username,\n        ...option,\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport Timestamp from 'components/timestamp';\n\nimport UserDetails from './user_details';\n\nimport {isGroupChannel} from '../types';\nimport type {\n    GroupChannel,\n    OptionValue,\n} from '../types';\n\nconst TIME_SPEC: React.ComponentProps<typeof Timestamp> = {\n    useTime: false,\n    style: 'long',\n    ranges: [\n        {within: ['minute', -1], display: ['second', 0]},\n        {within: ['hour', -1], display: ['minute']},\n        {within: ['hour', -24], display: ['hour']},\n        {within: ['day', -30], display: ['day']},\n        {within: ['month', -11], display: ['month']},\n        {within: ['year', -1000], display: ['year']},\n    ],\n};\n\nexport type Props = {\n    option: OptionValue;\n    isMobileView: boolean;\n    isSelected: boolean;\n    add: (value: OptionValue) => void;\n    select: (value: OptionValue) => void;\n}\n\nconst ListItem = React.forwardRef((props: Props, ref?: React.Ref<HTMLDivElement>) => {\n    const {\n        option,\n        isMobileView,\n        isSelected,\n        add,\n        select,\n    } = props;\n    const intl = useIntl();\n\n    const {last_post_at: lastPostAt} = option;\n\n    let details;\n    if (isGroupChannel(option)) {\n        details = <GMDetails option={option}/>;\n    } else {\n        details = <UserDetails option={option}/>;\n    }\n\n    const handleClick = useCallback(() => add(option), [option, add]);\n    const handleMouseEnter = useCallback(() => select(option), [option, select]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames('more-modal__row clickable', {'more-modal__row--selected': isSelected})}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n        >\n            {details}\n\n            {isMobileView && Boolean(lastPostAt) &&\n                <div className='more-modal__lastPostAt'>\n                    <Timestamp\n                        {...TIME_SPEC}\n                        value={lastPostAt}\n                    />\n                </div>\n            }\n\n            <div className='more-modal__actions'>\n                <button\n                    className='more-modal__actions--round'\n                    aria-label={intl.formatMessage({\n                        id: 'more_direct_channels.new_convo_add.label',\n                        defaultMessage: 'Add option {label}',\n                    }, {label: option.label})}\n                >\n                    <i className='icon icon-plus'/>\n                </button>\n            </div>\n        </div>\n    );\n});\nListItem.displayName = 'ListItem';\n\nexport default ListItem;\n\nfunction GMDetails(props: {option: GroupChannel}) {\n    const {option} = props;\n\n    return (\n        <>\n            <div className='more-modal__gm-icon'>\n                {option.profiles.length}\n            </div>\n            <div className='more-modal__details'>\n                <div className='more-modal__name'>\n                    <span>\n                        {option.profiles.map((profile) => `@${profile.username}`).join(', ')}\n                    </span>\n                </div>\n            </div>\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport ListItem from './list_item';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps, null, null, {forwardRef: true})(ListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useMemo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {openModal} from 'actions/views/modals';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport ListItem from '../list_item';\nimport {optionValue} from '../types';\nimport type {Option, OptionValue} from '../types';\n\nconst MAX_SELECTABLE_VALUES = Constants.MAX_USERS_IN_GM - 1;\nexport const USERS_PER_PAGE = 50;\n\ntype Props = {\n    addValue: (value: OptionValue) => void;\n    currentUserId: string;\n    handleDelete: (values: OptionValue[]) => void;\n    handlePageChange: (page: number, prevPage: number) => void;\n    handleSubmit: (values?: OptionValue[]) => void;\n    handleHide: () => void;\n    isExistingChannel: boolean;\n    loading: boolean;\n    options: Option[];\n    saving: boolean;\n    search: (term: string) => void;\n    selectedItemRef: React.RefObject<HTMLDivElement>;\n    totalCount: number;\n    users: UserProfile[];\n\n    /**\n     * An array of values that have been selected by the user in the multiselect.\n     */\n    values: OptionValue[];\n}\n\nconst List = React.forwardRef((props: Props, ref?: React.Ref<MultiSelect<OptionValue>>) => {\n    const renderOptionValue = useCallback((\n        option: OptionValue,\n        isSelected: boolean,\n        add: (value: OptionValue) => void,\n        select: (value: OptionValue) => void,\n    ) => {\n        return (\n            <ListItem\n                ref={isSelected ? props.selectedItemRef : undefined}\n                key={'more_direct_channels_list_' + option.value}\n                option={option}\n                isSelected={isSelected}\n                add={add}\n                select={select}\n            />\n        );\n    }, [props.selectedItemRef]);\n\n    const dispatch = useDispatch();\n\n    const handleSubmitImmediatelyOn = useCallback((value: OptionValue) => {\n        return value.id === props.currentUserId || Boolean(value.delete_at);\n    }, [props.currentUserId]);\n\n    const handleCreateChannel = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault();\n        props.handleHide();\n        dispatch(openModal({modalId: ModalIdentifiers.NEW_CHANNEL_MODAL, dialogType: NewChannelModal}));\n    };\n\n    const intl = useIntl();\n\n    let note;\n    if (props.isExistingChannel) {\n        if (props.values.length >= MAX_SELECTABLE_VALUES) {\n            note = (\n                <FormattedMessage\n                    id='more_direct_channels.new_convo_note.full'\n                    defaultMessage={'You\\'ve reached the maximum number of people for this conversation. Consider creating a private channel instead.'}\n                />\n            );\n        } else {\n            note = (\n                <FormattedMessage\n                    id='more_direct_channels.new_convo_note'\n                    defaultMessage={'This will start a new conversation. If you\\'re adding a lot of people, consider creating a private channel instead.'}\n                />\n            );\n        }\n    }\n\n    let remainingText;\n    if (MAX_SELECTABLE_VALUES > props.values.length) {\n        remainingText = (\n            <FormattedMessage\n                id={'multiselect.numPeopleRemaining'}\n                defaultMessage={'Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '}\n                values={{\n                    num: MAX_SELECTABLE_VALUES - props.values.length,\n                }}\n            />\n        );\n    } else {\n        remainingText = (\n            <FormattedMessage\n                id={'multiselect.maxPeople'}\n                defaultMessage={'Use ↑↓ to browse, ↵ to select. You can\\'t add more than {num} people. Please <a>create a channel</a> to include more people.'}\n                values={{\n                    num: MAX_SELECTABLE_VALUES,\n                    a: (chunks: React.ReactNode) => {\n                        return (\n                            <a\n                                href='#'\n                                onClick={(e) => handleCreateChannel(e)}\n                            >{chunks}</a>\n                        );\n                    },\n                }}\n            />\n        );\n    }\n\n    const options = useMemo(() => {\n        return props.options.map(optionValue);\n    }, [props.options]);\n\n    return (\n        <MultiSelect<OptionValue>\n            ref={ref}\n            options={options}\n            optionRenderer={renderOptionValue}\n            intl={intl}\n            selectedItemRef={props.selectedItemRef}\n            values={props.values}\n            valueRenderer={renderValue}\n            ariaLabelRenderer={renderAriaLabel}\n            perPage={USERS_PER_PAGE}\n            handlePageChange={props.handlePageChange}\n            handleInput={props.search}\n            handleDelete={props.handleDelete}\n            handleAdd={props.addValue}\n            handleSubmit={props.handleSubmit}\n            noteText={note}\n            maxValues={MAX_SELECTABLE_VALUES}\n            numRemainingText={remainingText}\n            buttonSubmitText={\n                <FormattedMessage\n                    id='multiselect.go'\n                    defaultMessage='Go'\n                />\n            }\n            buttonSubmitLoadingText={\n                <FormattedMessage\n                    id='multiselect.loading'\n                    defaultMessage='Loading...'\n                />\n            }\n            submitImmediatelyOn={handleSubmitImmediatelyOn}\n            saving={props.saving}\n            loading={props.loading}\n            users={props.users}\n            totalCount={props.totalCount}\n            placeholderText={intl.formatMessage({id: 'multiselect.placeholder', defaultMessage: 'Search and add members'})}\n        />\n    );\n});\n\nexport default List;\n\nfunction renderValue(props: {data: OptionValue}) {\n    return (props.data as UserProfile).username;\n}\n\nfunction renderAriaLabel(option: OptionValue) {\n    return (option as UserProfile)?.username ?? '';\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getAllChannels, getChannelsWithUserProfiles} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\nimport {filterProfilesStartingWithTerm} from 'mattermost-redux/utils/user_utils';\n\nimport Constants from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport List from './list';\n\nimport type {Option, OptionValue} from '../types';\n\ntype OwnProps = {\n    users: UserProfile[];\n    values: OptionValue[];\n}\n\nexport function makeGetOptions(): (state: GlobalState, users: UserProfile[], values: OptionValue[]) => Option[] {\n    // Gets all loaded DMs (as UserProfiles)\n    const getUsersWithDMs = createSelector(\n        'getUsersWithDMs',\n        getCurrentUserId,\n        getAllChannels,\n        (state: GlobalState, users: UserProfile[]) => users,\n        (currentUserId, allChannels, users) => {\n            const directChannels = Object.values(allChannels).filter((channel) => channel.type === Constants.DM_CHANNEL);\n\n            // Gets all loaded DMs (as UserProfiles)\n            const usersWithDMs: Array<UserProfile & {last_post_at: number}> = [];\n            for (const channel of directChannels) {\n                const otherUserId = getUserIdFromChannelName(currentUserId, channel.name);\n                const otherUser = users.find((user) => user.id === otherUserId);\n\n                if (!otherUser) {\n                    // The user doesn't match the search filter\n                    continue;\n                }\n\n                if (channel.last_post_at === 0) {\n                    // The DM channel exists but has no messages in it\n                    continue;\n                }\n\n                usersWithDMs.push({\n                    ...otherUser,\n                    last_post_at: channel.last_post_at,\n                });\n            }\n\n            return usersWithDMs;\n        },\n    );\n\n    // Gets GM channels matching the search term and selected values\n    const getFilteredGroupChannels = createSelector(\n        'getFilteredGroupChannels',\n        getChannelsWithUserProfiles,\n        (state: GlobalState) => state.views.search.modalSearch,\n        (state: GlobalState, values: OptionValue[]) => values,\n        (channelsWithProfiles, searchTerm, values) => {\n            return channelsWithProfiles.filter((channel) => {\n                if (searchTerm) {\n                    // Check that at least one of the users in the channel matches the search term\n                    const matches = filterProfilesStartingWithTerm(channel.profiles, searchTerm);\n                    if (matches.length === 0) {\n                        return false;\n                    }\n                }\n\n                if (values) {\n                    // Check that all of the selected users are in the channel\n                    const valuesInProfiles = values.every((value) => channel.profiles.find((user) => user.id === value.id));\n                    if (!valuesInProfiles) {\n                        return false;\n                    }\n                }\n\n                // Only include GM channels with messages in them\n                return channel.last_post_at > 0;\n            });\n        },\n    );\n\n    return createSelector(\n        'makeGetOptions',\n        getUsersWithDMs,\n        (state: GlobalState, users: UserProfile[], values: OptionValue[]) => getFilteredGroupChannels(state, values),\n        (state: GlobalState, users: UserProfile[]) => users,\n        (state: GlobalState) => Boolean(state.views.search.modalSearch),\n        (usersWithDMs, filteredGroupChannels, users, isSearch) => {\n            // Recent DMs (as UserProfiles) and GMs sorted by recent activity\n            const recents = [...usersWithDMs, ...filteredGroupChannels].\n                sort((a, b) => b.last_post_at - a.last_post_at);\n\n            // Only show the 20 most recent DMs and GMs when no search term has been entered. If a search term has been\n            // entered, `users` is expected to have already been filtered by it\n            if (!isSearch && recents.length > 0) {\n                return recents.slice(0, 20);\n            }\n\n            // Other users sorted by whether or not they've been deactivated followed by alphabetically\n            const usersWithoutDMs = users.\n                filter((user) => user.delete_at === 0 && !usersWithDMs.some((other) => other.id === user.id)).\n                map((user) => ({...user, last_post_at: 0}));\n            usersWithoutDMs.sort((a, b) => {\n                return a.username.localeCompare(b.username);\n            });\n\n            // Returns an array containing:\n            //  1. All recent DMs (represented by UserProfiles) and GMs matching the filter\n            //      - GMs are also filtered to only show ones containing each selected user\n            //  2. Other non-deactivated users sorted by username\n            return [\n                ...recents,\n                ...usersWithoutDMs,\n            ];\n        },\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getOptions = makeGetOptions();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        return {\n            options: getOptions(state, ownProps.users, ownProps.values),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(List);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type MultiSelect from 'components/multiselect/multiselect';\n\nimport {focusElement} from 'utils/a11y_utils';\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\nimport List from './list';\nimport {USERS_PER_PAGE} from './list/list';\nimport {isGroupChannel, optionValue} from './types';\nimport type {OptionValue} from './types';\n\nexport type Props = {\n    currentUserId: string;\n    currentTeamId?: string;\n    currentTeamName?: string;\n    searchTerm: string;\n    users: UserProfile[];\n    totalCount: number;\n\n    /*\n    * List of current channel members of existing channel\n    */\n    currentChannelMembers?: UserProfile[];\n\n    /*\n    * Whether the modal is for existing channel or not\n    */\n    isExistingChannel: boolean;\n\n    /*\n    * The mode by which direct messages are restricted, if at all.\n    */\n    restrictDirectMessage?: string;\n    onModalDismissed?: () => void;\n    onExited?: () => void;\n    actions: {\n        getProfiles: (page?: number, perPage?: number, options?: any) => Promise<ActionResult>;\n        getProfilesInTeam: (teamId: string, page: number, perPage?: number, sort?: string, options?: any) => Promise<ActionResult>;\n        loadProfilesMissingStatus: (users: UserProfile[]) => void;\n        getTotalUsersStats: () => void;\n        loadStatusesForProfilesList: (users: UserProfile[]) => void;\n        loadProfilesForGroupChannels: (groupChannels: Channel[]) => void;\n        openDirectChannelToUserId: (userId: string) => Promise<ActionResult>;\n        openGroupChannelToUserIds: (userIds: string[]) => Promise<ActionResult>;\n        searchProfiles: (term: string, options: any) => Promise<ActionResult<UserProfile[]>>;\n        searchGroupChannels: (term: string) => Promise<ActionResult<Channel[]>>;\n        setModalSearchTerm: (term: string) => void;\n        canUserDirectMessage: (userId: string, otherUserId: string) => Promise<ActionResult<{can_dm: boolean}>>;\n    };\n    focusOriginElement: string;\n}\n\ntype State = {\n    values: OptionValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    loadingUsers: boolean;\n    directMessageCapabilityCache: Record<string, boolean>;\n}\n\nexport default class MoreDirectChannels extends React.PureComponent<Props, State> {\n    searchTimeoutId: any;\n    exitToChannel?: string;\n    multiselect: React.RefObject<MultiSelect<OptionValue>>;\n    selectedItemRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n        this.multiselect = React.createRef();\n        this.selectedItemRef = React.createRef();\n\n        const values: OptionValue[] = [];\n        if (props.currentChannelMembers) {\n            for (let i = 0; i < props.currentChannelMembers.length; i++) {\n                const user = Object.assign({}, props.currentChannelMembers[i]);\n                if (user.id === props.currentUserId) {\n                    continue;\n                }\n                values.push(optionValue(user));\n            }\n        }\n\n        this.state = {\n            values,\n            show: true,\n            search: false,\n            saving: false,\n            loadingUsers: true,\n            directMessageCapabilityCache: {},\n        };\n    }\n\n    loadModalData = () => {\n        this.getUserProfiles();\n        this.props.actions.getTotalUsersStats();\n        this.props.actions.loadProfilesMissingStatus(this.props.users);\n        this.checkDMCapabilities(this.props.users);\n    };\n\n    checkDMCapabilities = async (users: UserProfile[]) => {\n        const {currentUserId} = this.props;\n        const {directMessageCapabilityCache} = this.state;\n        const usersToCheck = users.filter((user) =>\n            user.id !== currentUserId &&\n            user.remote_id &&\n            !(user.id in directMessageCapabilityCache),\n        );\n\n        if (usersToCheck.length === 0) {\n            return;\n        }\n\n        const promises = usersToCheck.map(async (user) => {\n            try {\n                const result = await this.props.actions.canUserDirectMessage(currentUserId, user.id);\n                return {userId: user.id, canDM: result.data?.can_dm ?? false};\n            } catch {\n                return {userId: user.id, canDM: false};\n            }\n        });\n\n        const results = await Promise.all(promises);\n        const newCache = {...directMessageCapabilityCache};\n        results.forEach(({userId, canDM}) => {\n            newCache[userId] = canDM;\n        });\n\n        this.setState({directMessageCapabilityCache: newCache});\n    };\n\n    updateFromProps(prevProps: Props) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.resetPaging();\n            } else {\n                const teamId = this.props.restrictDirectMessage === 'any' ? '' : this.props.currentTeamId;\n\n                this.searchTimeoutId = setTimeout(\n                    async () => {\n                        this.setUsersLoadingState(true);\n                        const [{data: profilesData}, {data: groupChannelsData}] = await Promise.all([\n                            this.props.actions.searchProfiles(searchTerm, {team_id: teamId}),\n                            this.props.actions.searchGroupChannels(searchTerm),\n                        ]);\n                        if (profilesData) {\n                            this.props.actions.loadStatusesForProfilesList(profilesData);\n                        }\n                        if (groupChannelsData) {\n                            this.props.actions.loadProfilesForGroupChannels(groupChannelsData);\n                        }\n                        this.resetPaging();\n                        this.setUsersLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS,\n                );\n            }\n        }\n\n        if (prevProps.users.length !== this.props.users.length) {\n            this.props.actions.loadProfilesMissingStatus(this.props.users);\n            this.checkDMCapabilities(this.props.users);\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateFromProps(prevProps);\n    }\n\n    setUsersLoadingState = (loadingState: boolean) => {\n        this.setState({loadingUsers: loadingState});\n    };\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    };\n\n    handleExit = () => {\n        this.props.onExited?.();\n        this.props.onModalDismissed?.();\n\n        if (this.exitToChannel) {\n            getHistory().push(this.exitToChannel);\n        } else if (this.props.focusOriginElement) {\n            setTimeout(() => {\n                focusElement(this.props.focusOriginElement, true);\n            }, 0);\n        }\n    };\n\n    handleSubmit = (values = this.state.values) => {\n        const {actions} = this.props;\n\n        if (this.state.saving) {\n            return;\n        }\n\n        const userIds = values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const done = (result: any) => {\n            const {data, error} = result;\n            this.setState({saving: false});\n\n            if (!error) {\n                this.exitToChannel = '/' + this.props.currentTeamName + '/channels/' + data.name;\n                this.handleHide();\n            }\n        };\n\n        if (userIds.length === 1) {\n            actions.openDirectChannelToUserId(userIds[0]).then(done);\n        } else {\n            actions.openGroupChannelToUserIds(userIds).then(done);\n        }\n    };\n\n    addValue = (value: OptionValue) => {\n        if (isGroupChannel(value)) {\n            this.addUsers(value.profiles);\n        } else {\n            const values = [...this.state.values];\n            if (!values.includes(value)) {\n                values.push(value);\n            }\n            this.setState({values});\n        }\n    };\n\n    addUsers = (users: UserProfile[]) => {\n        const values = [...this.state.values];\n        const existingUserIds = values.map((user) => user.id);\n        for (const user of users) {\n            if (!existingUserIds.includes(user.id)) {\n                values.push(optionValue(user));\n            }\n        }\n        this.setState({values});\n    };\n\n    getUserProfiles = (page?: number) => {\n        const pageNum = page ? page + 1 : 0;\n        if (this.props.restrictDirectMessage === 'any') {\n            this.props.actions.getProfiles(pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        } else {\n            this.props.actions.getProfilesInTeam(this.props.currentTeamId || '', pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    };\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.getUserProfiles(page);\n        }\n    };\n\n    resetPaging = () => {\n        this.multiselect.current?.resetPaging();\n    };\n\n    search = debounce((term: string) => {\n        this.props.actions.setModalSearchTerm(term);\n    }, 250);\n\n    handleDelete = (values: OptionValue[]) => {\n        this.setState({values});\n    };\n\n    getDirectMessageableUsers = (): UserProfile[] => {\n        const {users} = this.props;\n        const {directMessageCapabilityCache} = this.state;\n\n        return users.filter((user) => {\n            // For remote users, check if they can be DMed\n            if (user.remote_id) {\n                // If we haven't checked this user yet, hide them until we have the result\n                if (!(user.id in directMessageCapabilityCache)) {\n                    return false;\n                }\n\n                // Only show if they can be DMed\n                return directMessageCapabilityCache[user.id];\n            }\n\n            // Show local users (including self)\n            return true;\n        });\n    };\n\n    render() {\n        const filteredUsers = this.getDirectMessageableUsers();\n        const body = (\n            <List\n                addValue={this.addValue}\n                currentUserId={this.props.currentUserId}\n                handleDelete={this.handleDelete}\n                handlePageChange={this.handlePageChange}\n                handleSubmit={this.handleSubmit}\n                handleHide={this.handleHide}\n                isExistingChannel={this.props.isExistingChannel}\n                loading={this.state.loadingUsers}\n                saving={this.state.saving}\n                search={this.search}\n                selectedItemRef={this.selectedItemRef}\n                totalCount={this.props.totalCount}\n                users={filteredUsers}\n                values={this.state.values}\n            />\n        );\n\n        const modalHeaderText = (\n            <FormattedMessage\n                id='more_direct_channels.title'\n                defaultMessage='Direct Messages'\n            />\n        );\n\n        return (\n            <GenericModal\n                id='moreDmModal'\n                className='a11y__modal more-modal more-direct-channels more-direct-channels-generic-modal'\n                show={this.state.show}\n                modalHeaderText={modalHeaderText}\n                onExited={this.handleExit}\n                onHide={this.handleExit}\n                compassDesign={true}\n                bodyPadding={false}\n                onEntered={this.loadModalData}\n                modalLocation={'top'}\n                delayFocusTrap={true}\n            >\n                <div role='application'>\n                    {body}\n                </div>\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {searchGroupChannels} from 'mattermost-redux/actions/channels';\nimport {\n    getProfiles,\n    getProfilesInTeam,\n    getTotalUsersStats,\n    searchProfiles,\n    canUserDirectMessage,\n} from 'mattermost-redux/actions/users';\nimport {getConfig, getFeatureFlagValue} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUserId,\n    getProfiles as selectProfiles,\n    getProfilesInCurrentChannel,\n    getProfilesInCurrentTeam,\n    makeSearchProfilesStartingWithTerm,\n    searchProfilesInCurrentTeam,\n    getTotalUsersStats as getTotalUsersStatsSelector,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport {openDirectChannelToUserId, openGroupChannelToUserIds} from 'actions/channel_actions';\nimport {loadStatusesForProfilesList, loadProfilesMissingStatus} from 'actions/status_actions';\nimport {loadProfilesForGroupChannels} from 'actions/user_actions';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport MoreDirectChannels from './more_direct_channels';\n\ntype OwnProps = {\n    isExistingChannel: boolean;\n}\n\nexport const makeMapStateToProps = () => {\n    const searchProfilesStartingWithTerm = makeSearchProfilesStartingWithTerm();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const currentUserId = getCurrentUserId(state);\n        let currentChannelMembers;\n        if (ownProps.isExistingChannel) {\n            currentChannelMembers = getProfilesInCurrentChannel(state);\n        }\n\n        const config = getConfig(state);\n        const restrictDirectMessage = config.RestrictDirectMessage;\n\n        const searchTerm = state.views.search.modalSearch;\n\n        let filters;\n        const enableSharedChannelsDMs = getFeatureFlagValue(state, 'EnableSharedChannelsDMs') === 'true';\n        if (!enableSharedChannelsDMs) {\n            filters = {exclude_remote: true};\n        }\n\n        let users: UserProfile[];\n        if (searchTerm) {\n            if (restrictDirectMessage === 'any') {\n                users = searchProfilesStartingWithTerm(state, searchTerm, false, filters);\n            } else {\n                users = searchProfilesInCurrentTeam(state, searchTerm, false, filters);\n            }\n        } else if (restrictDirectMessage === 'any') {\n            users = selectProfiles(state, filters);\n        } else {\n            users = getProfilesInCurrentTeam(state, filters);\n        }\n\n        const team = getCurrentTeam(state);\n        const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n        return {\n            currentTeamId: team?.id,\n            currentTeamName: team?.name,\n            searchTerm,\n            users,\n            currentChannelMembers,\n            currentUserId,\n            restrictDirectMessage,\n            totalCount: stats.total_users_count ?? 0,\n        };\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n            getProfilesInTeam,\n            loadProfilesMissingStatus,\n            getTotalUsersStats,\n            loadStatusesForProfilesList,\n            loadProfilesForGroupChannels,\n            openDirectChannelToUserId,\n            openGroupChannelToUserIds,\n            searchProfiles,\n            searchGroupChannels,\n            setModalSearchTerm,\n            canUserDirectMessage,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(MoreDirectChannels);\n"],"names":["UserDetails","props","currentUserId","option","status","id","delete_at","deleteAt","is_bot","isBot","last_picture_update","lastPictureUpdate","displayName","displayEntireNameForUser","modalName","React","FormattedMessage","defaultMessage","values","displayname","ProfilePicture","src","Client4","getProfilePictureUrl","undefined","size","className","BotTag","isGuest","roles","GuestTag","CustomStatusEmoji","userID","showTooltip","emojiSize","spanStyle","display","flex","alignItems","email","propTypes","_pt","isRequired","connect","state","ownProps","getCurrentUserId","getStatusForUserId","isGroupChannel","type","optionValue","_objectSpread","value","label","display_name","username","TIME_SPEC","useTime","style","ranges","within","ListItem","ref","isMobileView","isSelected","add","select","intl","useIntl","last_post_at","lastPostAt","details","GMDetails","handleClick","useCallback","handleMouseEnter","classNames","onClick","onMouseEnter","Boolean","Timestamp","Object","assign","formatMessage","profiles","length","map","profile","concat","join","getIsMobileView","forwardRef","MAX_SELECTABLE_VALUES","Constants","MAX_USERS_IN_GM","List","renderOptionValue","selectedItemRef","key","dispatch","useDispatch","handleSubmitImmediatelyOn","note","remainingText","isExistingChannel","num","a","chunks","href","e","preventDefault","handleHide","openModal","modalId","ModalIdentifiers","NEW_CHANNEL_MODAL","dialogType","NewChannelModal","handleCreateChannel","options","useMemo","MultiSelect","optionRenderer","valueRenderer","renderValue","ariaLabelRenderer","renderAriaLabel","perPage","handlePageChange","handleInput","search","handleDelete","handleAdd","addValue","handleSubmit","noteText","maxValues","numRemainingText","buttonSubmitText","buttonSubmitLoadingText","submitImmediatelyOn","saving","loading","users","totalCount","placeholderText","data","_username","getOptions","getUsersWithDMs","createSelector","getAllChannels","allChannels","directChannels","filter","channel","DM_CHANNEL","usersWithDMs","otherUserId","getUserIdFromChannelName","name","otherUser","find","user","push","getFilteredGroupChannels","getChannelsWithUserProfiles","views","modalSearch","channelsWithProfiles","searchTerm","filterProfilesStartingWithTerm","every","filteredGroupChannels","isSearch","recents","sort","b","slice","usersWithoutDMs","some","other","localeCompare","makeGetOptions","MoreDirectChannels","constructor","_this","super","this","_defineProperty","getUserProfiles","actions","getTotalUsersStats","loadProfilesMissingStatus","checkDMCapabilities","async","directMessageCapabilityCache","usersToCheck","remote_id","promises","_result$data$can_dm","_result$data","result","canUserDirectMessage","userId","canDM","can_dm","_unused","results","Promise","all","newCache","forEach","_ref","setState","loadingState","loadingUsers","setModalSearchTerm","show","_this$props$onExited","_this$props","_this$props$onModalDi","_this$props2","onExited","call","onModalDismissed","exitToChannel","getHistory","focusOriginElement","setTimeout","focusElement","arguments","userIds","v","done","error","currentTeamName","openDirectChannelToUserId","then","openGroupChannelToUserIds","addUsers","includes","existingUserIds","page","pageNum","restrictDirectMessage","getProfiles","USERS_PER_PAGE","setUsersLoadingState","getProfilesInTeam","currentTeamId","prevPage","_this$multiselect$cur","multiselect","current","resetPaging","debounce","term","searchTimeoutId","currentChannelMembers","i","updateFromProps","prevProps","clearTimeout","teamId","profilesData","groupChannelsData","searchProfiles","team_id","searchGroupChannels","loadStatusesForProfilesList","loadProfilesForGroupChannels","SEARCH_TIMEOUT_MILLISECONDS","componentDidUpdate","render","filteredUsers","getDirectMessageableUsers","body","modalHeaderText","GenericModal","handleExit","onHide","compassDesign","bodyPadding","onEntered","loadModalData","modalLocation","delayFocusTrap","role","makeMapStateToProps","searchProfilesStartingWithTerm","makeSearchProfilesStartingWithTerm","_stats$total_users_co","getProfilesInCurrentChannel","getConfig","RestrictDirectMessage","filters","getFeatureFlagValue","exclude_remote","searchProfilesInCurrentTeam","selectProfiles","getProfilesInCurrentTeam","team","getCurrentTeam","stats","getTotalUsersStatsSelector","total_users_count","bindActionCreators"],"sourceRoot":""}