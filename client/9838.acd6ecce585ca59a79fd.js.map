{"version":3,"file":"9838.acd6ecce585ca59a79fd.js","mappings":"0tBAsCA,SAAeA,EAAAA,EAAAA,aAAUC,EAAC,cAAkCC,IAAAA,cACxDC,WAAAA,CAAYC,GACRC,MAAMD,GAAOE,EAAA,sBAuBAC,KACTC,EAAAA,EAAAA,GAAaD,EAAOE,EAAAA,GAAUC,SAASC,SACvCC,KAAKR,MAAMS,UACf,IACHP,EAAA,mBAEaQ,IACHC,EAAAA,EAAAA,IAAmBD,EAAMF,KAAKR,MAAMY,KAAKC,iBACnDX,EAAA,gBAES,KAcC,CACHY,gBAbAhB,IAAAA,cAACiB,EAAAA,iBAAgB,CACbC,GAAG,0CACHC,eAAe,gCAYnBC,kBARApB,IAAAA,cAACiB,EAAAA,iBAAgB,CACbC,GAAG,4CACHC,eAAe,8BAQ1Bf,EAAA,sBAEeiB,UACZ,MAAMC,EAAUZ,KAAKa,MAAMC,iBAAiBC,SACxCH,EAAU,IAAII,aAGZhB,KAAKR,MAAMyB,QAAQC,UAAU,CAC/BC,QAASnB,KAAKR,MAAM4B,OACpBC,OAAQC,EAAAA,GAAaC,IACrBC,cAAcC,EAAAA,EAAAA,IAAmBb,GACjCc,QAAQ,EACRC,kBAAkBF,EAAAA,EAAAA,IAAmBzB,KAAKR,MAAMoC,eAEpD5B,KAAKR,MAAMS,WAAU,IACxBP,EAAA,6BAEuBmC,IACpB7B,KAAK8B,SAAS,CACVhB,iBAAkBe,GACpB,IArEF,MAAM,YAACD,GAAe5B,KAAKR,MAC3B,IAAIsB,EAAmBiB,IAAOH,GAGC,KAA3BA,EAAYI,YAAqBJ,EAAYK,aAAe,KAC5DnB,EAAmBA,EAAiBoB,IAAI,EAAG,OAAOC,QAAQ,OAAOD,IAAI,EAAG,UAG5ElC,KAAKa,MAAQ,CACTC,mBAER,CAEAsB,iBAAAA,GACIC,SAASC,iBAAiB,UAAWtC,KAAKuC,cAC9C,CAEAC,oBAAAA,GACIH,SAASI,oBAAoB,UAAWzC,KAAKuC,cACjD,CAqDAG,MAAAA,GACI,MAAM,gBACFpC,EAAe,kBACfI,GACAV,KAAK2C,WAEH,iBAAC7B,GAAoBd,KAAKa,MAEhC,OACIvB,IAAAA,cAACsD,EAAAA,QAAoB,CAACC,MAAO7C,KAAKR,MAAMqD,OACpCvD,IAAAA,cAACwD,EAAAA,GAAY,CACTC,eAAe,EACfC,WAAWC,EAAAA,EAAAA,IAAgB,CAACzC,GAAI,0CAA2CC,eAAgB,gCAC3FR,SAAUD,KAAKR,MAAMS,SACrBK,gBAAiBA,EACjBI,kBAAmBA,EACnBwC,cAAelD,KAAKkD,cACpBC,oBAAqBnD,KAAKkD,cAC1B1C,GAAG,2BACH4C,UAAW,0BACXC,UAAW,EACXC,gBAAgB,EAChBC,cAAc,GAEdjE,IAAAA,cAAA,OAAK8D,UAAU,qBACX9D,IAAAA,cAACkE,EAAAA,GAAa,CACVC,KAAM3C,EACN4C,aAAc1D,KAAK2D,qBACnBC,SAAU5D,KAAKR,MAAMqE,OACrBC,cAAc,MAMtC,GACHpE,EAAAL,EAAA,aA/HGY,SAAQ8D,IAAAA,KAAAC,WACR5C,OAAM2C,IAAAA,OAAAC,WACNpC,YAAWmC,IAAAA,WAAA/C,MAAAgD,WACXH,OAAME,IAAAA,OAAAC,WAGN/C,QAAO8C,IAAAA,MAAA,CACH7C,UAAS6C,IAAAA,KAAAC,aAAAA,aAAA3E,G","sources":["webpack://mattermost-webapp/./src/components/dnd_custom_time_picker_modal/dnd_custom_time_picker_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport moment from 'moment';\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {UserStatus} from '@mattermost/types/users';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport CompassThemeProvider from 'components/compass_theme_provider/compass_theme_provider';\nimport DateTimeInput from 'components/datetime_input/datetime_input';\n\nimport Constants, {UserStatuses} from 'utils/constants';\nimport {toUTCUnixInSeconds, relativeFormatDate} from 'utils/datetime';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {localizeMessage} from 'utils/utils';\n\nimport './dnd_custom_time_picker_modal.scss';\n\ntype Props = {\n    onExited: () => void;\n    userId: string;\n    currentDate: Date;\n    locale: string;\n\n    theme: Theme;\n    actions: {\n        setStatus: (status: UserStatus) => void;\n    };\n} & WrappedComponentProps;\n\ntype State = {\n    selectedDateTime: moment.Moment;\n}\n\nexport default injectIntl(class DndCustomTimePicker extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const {currentDate} = this.props;\n        let selectedDateTime = moment(currentDate);\n\n        // if current time is > 23:20 then we will set date to tomorrow and show all times\n        if (currentDate.getHours() === 23 && currentDate.getMinutes() > 20) {\n            selectedDateTime = selectedDateTime.add(1, 'day').startOf('day').add(9, 'hours');\n        }\n\n        this.state = {\n            selectedDateTime,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = (event: KeyboardEvent) => {\n        if (isKeyPressed(event, Constants.KeyCodes.ESCAPE)) {\n            this.props.onExited();\n        }\n    };\n\n    formatDate = (date: moment.Moment): string => {\n        return relativeFormatDate(date, this.props.intl.formatMessage);\n    };\n\n    getText = () => {\n        const modalHeaderText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.defaultMsg'\n                defaultMessage='Disable notifications until'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='dnd_custom_time_picker_modal.submitButton'\n                defaultMessage='Disable Notifications'\n            />\n        );\n\n        return {\n            modalHeaderText,\n            confirmButtonText,\n        };\n    };\n\n    handleConfirm = async () => {\n        const endTime = this.state.selectedDateTime.toDate();\n        if (endTime < new Date()) {\n            return;\n        }\n        await this.props.actions.setStatus({\n            user_id: this.props.userId,\n            status: UserStatuses.DND,\n            dnd_end_time: toUTCUnixInSeconds(endTime),\n            manual: true,\n            last_activity_at: toUTCUnixInSeconds(this.props.currentDate),\n        });\n        this.props.onExited();\n    };\n\n    handleDateTimeChange = (newDateTime: moment.Moment) => {\n        this.setState({\n            selectedDateTime: newDateTime,\n        });\n    };\n\n    render() {\n        const {\n            modalHeaderText,\n            confirmButtonText,\n        } = this.getText();\n\n        const {selectedDateTime} = this.state;\n\n        return (\n            <CompassThemeProvider theme={this.props.theme}>\n                <GenericModal\n                    compassDesign={true}\n                    ariaLabel={localizeMessage({id: 'dnd_custom_time_picker_modal.defaultMsg', defaultMessage: 'Disable notifications until'})}\n                    onExited={this.props.onExited}\n                    modalHeaderText={modalHeaderText}\n                    confirmButtonText={confirmButtonText}\n                    handleConfirm={this.handleConfirm}\n                    handleEnterKeyPress={this.handleConfirm}\n                    id='dndCustomTimePickerModal'\n                    className={'DndModal modal-overflow'}\n                    tabIndex={-1}\n                    keyboardEscape={true}\n                    enforceFocus={false}\n                >\n                    <div className='DndModal__content'>\n                        <DateTimeInput\n                            time={selectedDateTime}\n                            handleChange={this.handleDateTimeChange}\n                            timezone={this.props.locale}\n                            relativeDate={true}\n                        />\n                    </div>\n                </GenericModal>\n            </CompassThemeProvider>\n        );\n    }\n});\n"],"names":["injectIntl","_DndCustomTimePicker","React","constructor","props","super","_defineProperty","event","isKeyPressed","Constants","KeyCodes","ESCAPE","this","onExited","date","relativeFormatDate","intl","formatMessage","modalHeaderText","FormattedMessage","id","defaultMessage","confirmButtonText","async","endTime","state","selectedDateTime","toDate","Date","actions","setStatus","user_id","userId","status","UserStatuses","DND","dnd_end_time","toUTCUnixInSeconds","manual","last_activity_at","currentDate","newDateTime","setState","moment","getHours","getMinutes","add","startOf","componentDidMount","document","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","render","getText","CompassThemeProvider","theme","GenericModal","compassDesign","ariaLabel","localizeMessage","handleConfirm","handleEnterKeyPress","className","tabIndex","keyboardEscape","enforceFocus","DateTimeInput","time","handleChange","handleDateTimeChange","timezone","locale","relativeDate","_pt","isRequired"],"sourceRoot":""}